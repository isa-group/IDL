/*
 * generated by Xtext 2.19.0
 */
package es.us.isa.interparamdep.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import es.us.isa.interparamdep.ide.contentassist.antlr.internal.InternalInterparameterDependenciesLanguageParser;
import es.us.isa.interparamdep.services.InterparameterDependenciesLanguageGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class InterparameterDependenciesLanguageParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(InterparameterDependenciesLanguageGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, InterparameterDependenciesLanguageGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getDependencyAccess().getDepAlternatives_0_0(), "rule__Dependency__DepAlternatives_0_0");
			builder.put(grammarAccess.getRelationalOperatorAccess().getAlternatives(), "rule__RelationalOperator__Alternatives");
			builder.put(grammarAccess.getArithmeticOperatorAccess().getAlternatives(), "rule__ArithmeticOperator__Alternatives");
			builder.put(grammarAccess.getLogicalOperatorAccess().getAlternatives(), "rule__LogicalOperator__Alternatives");
			builder.put(grammarAccess.getOperationAccess().getAlternatives(), "rule__Operation__Alternatives");
			builder.put(grammarAccess.getOperationContinuationAccess().getAdditionalParamsAlternatives_1_0(), "rule__OperationContinuation__AdditionalParamsAlternatives_1_0");
			builder.put(grammarAccess.getClauseAccess().getAlternatives(), "rule__Clause__Alternatives");
			builder.put(grammarAccess.getClauseAccess().getFirstElementAlternatives_0_0(), "rule__Clause__FirstElementAlternatives_0_0");
			builder.put(grammarAccess.getTermAccess().getAlternatives(), "rule__Term__Alternatives");
			builder.put(grammarAccess.getParamAccess().getNameAlternatives_0(), "rule__Param__NameAlternatives_0");
			builder.put(grammarAccess.getParamAssignmentAccess().getAlternatives(), "rule__ParamAssignment__Alternatives");
			builder.put(grammarAccess.getPredefinedDependencyAccess().getPredefDepTypeAlternatives_1_0(), "rule__PredefinedDependency__PredefDepTypeAlternatives_1_0");
			builder.put(grammarAccess.getPositiveTermAccess().getAlternatives(), "rule__PositiveTerm__Alternatives");
			builder.put(grammarAccess.getPositiveClauseAccess().getAlternatives(), "rule__PositiveClause__Alternatives");
			builder.put(grammarAccess.getPositiveClauseAccess().getFirstElementAlternatives_0_0(), "rule__PositiveClause__FirstElementAlternatives_0_0");
			builder.put(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepTypeAlternatives_0_0(), "rule__PositivePredefinedDependency__PredefDepTypeAlternatives_0_0");
			builder.put(grammarAccess.getDependencyAccess().getGroup(), "rule__Dependency__Group__0");
			builder.put(grammarAccess.getRelationalDependencyAccess().getGroup(), "rule__RelationalDependency__Group__0");
			builder.put(grammarAccess.getArithmeticDependencyAccess().getGroup(), "rule__ArithmeticDependency__Group__0");
			builder.put(grammarAccess.getOperationAccess().getGroup_0(), "rule__Operation__Group_0__0");
			builder.put(grammarAccess.getOperationAccess().getGroup_1(), "rule__Operation__Group_1__0");
			builder.put(grammarAccess.getOperationContinuationAccess().getGroup(), "rule__OperationContinuation__Group__0");
			builder.put(grammarAccess.getConditionalDependencyAccess().getGroup(), "rule__ConditionalDependency__Group__0");
			builder.put(grammarAccess.getPredicateAccess().getGroup(), "rule__Predicate__Group__0");
			builder.put(grammarAccess.getClauseAccess().getGroup_1(), "rule__Clause__Group_1__0");
			builder.put(grammarAccess.getTermAccess().getGroup_0(), "rule__Term__Group_0__0");
			builder.put(grammarAccess.getTermAccess().getGroup_1(), "rule__Term__Group_1__0");
			builder.put(grammarAccess.getParamAssignmentAccess().getGroup_0(), "rule__ParamAssignment__Group_0__0");
			builder.put(grammarAccess.getParamAssignmentAccess().getGroup_0_3(), "rule__ParamAssignment__Group_0_3__0");
			builder.put(grammarAccess.getParamAssignmentAccess().getGroup_1(), "rule__ParamAssignment__Group_1__0");
			builder.put(grammarAccess.getParamAssignmentAccess().getGroup_2(), "rule__ParamAssignment__Group_2__0");
			builder.put(grammarAccess.getParamAssignmentAccess().getGroup_3(), "rule__ParamAssignment__Group_3__0");
			builder.put(grammarAccess.getClauseContinuationAccess().getGroup(), "rule__ClauseContinuation__Group__0");
			builder.put(grammarAccess.getPredefinedDependencyAccess().getGroup(), "rule__PredefinedDependency__Group__0");
			builder.put(grammarAccess.getPredefinedDependencyAccess().getGroup_4(), "rule__PredefinedDependency__Group_4__0");
			builder.put(grammarAccess.getPositivePredicateAccess().getGroup(), "rule__PositivePredicate__Group__0");
			builder.put(grammarAccess.getPositiveClauseAccess().getGroup_1(), "rule__PositiveClause__Group_1__0");
			builder.put(grammarAccess.getPositiveClauseContinuationAccess().getGroup(), "rule__PositiveClauseContinuation__Group__0");
			builder.put(grammarAccess.getPositivePredefinedDependencyAccess().getGroup(), "rule__PositivePredefinedDependency__Group__0");
			builder.put(grammarAccess.getPositivePredefinedDependencyAccess().getGroup_3(), "rule__PositivePredefinedDependency__Group_3__0");
			builder.put(grammarAccess.getModelAccess().getDependenciesAssignment(), "rule__Model__DependenciesAssignment");
			builder.put(grammarAccess.getDependencyAccess().getDepAssignment_0(), "rule__Dependency__DepAssignment_0");
			builder.put(grammarAccess.getRelationalDependencyAccess().getParam1Assignment_0(), "rule__RelationalDependency__Param1Assignment_0");
			builder.put(grammarAccess.getRelationalDependencyAccess().getRelationalOpAssignment_1(), "rule__RelationalDependency__RelationalOpAssignment_1");
			builder.put(grammarAccess.getRelationalDependencyAccess().getParam2Assignment_2(), "rule__RelationalDependency__Param2Assignment_2");
			builder.put(grammarAccess.getArithmeticDependencyAccess().getOperationAssignment_0(), "rule__ArithmeticDependency__OperationAssignment_0");
			builder.put(grammarAccess.getArithmeticDependencyAccess().getRelationalOpAssignment_1(), "rule__ArithmeticDependency__RelationalOpAssignment_1");
			builder.put(grammarAccess.getArithmeticDependencyAccess().getResultAssignment_2(), "rule__ArithmeticDependency__ResultAssignment_2");
			builder.put(grammarAccess.getOperationAccess().getFirstParamAssignment_0_0(), "rule__Operation__FirstParamAssignment_0_0");
			builder.put(grammarAccess.getOperationAccess().getOperationContinuationAssignment_0_1(), "rule__Operation__OperationContinuationAssignment_0_1");
			builder.put(grammarAccess.getOperationAccess().getOpeningParenthesisAssignment_1_0(), "rule__Operation__OpeningParenthesisAssignment_1_0");
			builder.put(grammarAccess.getOperationAccess().getOperationAssignment_1_1(), "rule__Operation__OperationAssignment_1_1");
			builder.put(grammarAccess.getOperationAccess().getClosingParenthesisAssignment_1_2(), "rule__Operation__ClosingParenthesisAssignment_1_2");
			builder.put(grammarAccess.getOperationAccess().getOperationContinuationAssignment_1_3(), "rule__Operation__OperationContinuationAssignment_1_3");
			builder.put(grammarAccess.getOperationContinuationAccess().getArithOpAssignment_0(), "rule__OperationContinuation__ArithOpAssignment_0");
			builder.put(grammarAccess.getOperationContinuationAccess().getAdditionalParamsAssignment_1(), "rule__OperationContinuation__AdditionalParamsAssignment_1");
			builder.put(grammarAccess.getConditionalDependencyAccess().getConditionAssignment_1(), "rule__ConditionalDependency__ConditionAssignment_1");
			builder.put(grammarAccess.getConditionalDependencyAccess().getConsequenceAssignment_3(), "rule__ConditionalDependency__ConsequenceAssignment_3");
			builder.put(grammarAccess.getPredicateAccess().getFirstClauseAssignment_0(), "rule__Predicate__FirstClauseAssignment_0");
			builder.put(grammarAccess.getPredicateAccess().getClauseContinuationAssignment_1(), "rule__Predicate__ClauseContinuationAssignment_1");
			builder.put(grammarAccess.getClauseAccess().getFirstElementAssignment_0(), "rule__Clause__FirstElementAssignment_0");
			builder.put(grammarAccess.getClauseAccess().getNotAssignment_1_0(), "rule__Clause__NotAssignment_1_0");
			builder.put(grammarAccess.getClauseAccess().getOpeningParenthesisAssignment_1_1(), "rule__Clause__OpeningParenthesisAssignment_1_1");
			builder.put(grammarAccess.getClauseAccess().getPredicateAssignment_1_2(), "rule__Clause__PredicateAssignment_1_2");
			builder.put(grammarAccess.getClauseAccess().getClosingParenthesisAssignment_1_3(), "rule__Clause__ClosingParenthesisAssignment_1_3");
			builder.put(grammarAccess.getTermAccess().getNotAssignment_0_0(), "rule__Term__NotAssignment_0_0");
			builder.put(grammarAccess.getTermAccess().getParamAssignment_0_1(), "rule__Term__ParamAssignment_0_1");
			builder.put(grammarAccess.getTermAccess().getNotAssignment_1_0(), "rule__Term__NotAssignment_1_0");
			builder.put(grammarAccess.getTermAccess().getParamAssignment_1_1(), "rule__Term__ParamAssignment_1_1");
			builder.put(grammarAccess.getParamAccess().getNameAssignment(), "rule__Param__NameAssignment");
			builder.put(grammarAccess.getParamAssignmentAccess().getStringValuesAssignment_0_2(), "rule__ParamAssignment__StringValuesAssignment_0_2");
			builder.put(grammarAccess.getParamAssignmentAccess().getStringValuesAssignment_0_3_1(), "rule__ParamAssignment__StringValuesAssignment_0_3_1");
			builder.put(grammarAccess.getParamAssignmentAccess().getPatternStringAssignment_1_2(), "rule__ParamAssignment__PatternStringAssignment_1_2");
			builder.put(grammarAccess.getParamAssignmentAccess().getBooleanValueAssignment_2_2(), "rule__ParamAssignment__BooleanValueAssignment_2_2");
			builder.put(grammarAccess.getParamAssignmentAccess().getRelationalOpAssignment_3_1(), "rule__ParamAssignment__RelationalOpAssignment_3_1");
			builder.put(grammarAccess.getParamAssignmentAccess().getDoubleValueAssignment_3_2(), "rule__ParamAssignment__DoubleValueAssignment_3_2");
			builder.put(grammarAccess.getClauseContinuationAccess().getLogicalOpAssignment_0(), "rule__ClauseContinuation__LogicalOpAssignment_0");
			builder.put(grammarAccess.getClauseContinuationAccess().getAdditionalElementsAssignment_1(), "rule__ClauseContinuation__AdditionalElementsAssignment_1");
			builder.put(grammarAccess.getPredefinedDependencyAccess().getNotAssignment_0(), "rule__PredefinedDependency__NotAssignment_0");
			builder.put(grammarAccess.getPredefinedDependencyAccess().getPredefDepTypeAssignment_1(), "rule__PredefinedDependency__PredefDepTypeAssignment_1");
			builder.put(grammarAccess.getPredefinedDependencyAccess().getPredefDepElementsAssignment_3(), "rule__PredefinedDependency__PredefDepElementsAssignment_3");
			builder.put(grammarAccess.getPredefinedDependencyAccess().getPredefDepElementsAssignment_4_1(), "rule__PredefinedDependency__PredefDepElementsAssignment_4_1");
			builder.put(grammarAccess.getPositivePredicateAccess().getFirstClauseAssignment_0(), "rule__PositivePredicate__FirstClauseAssignment_0");
			builder.put(grammarAccess.getPositivePredicateAccess().getClauseContinuationAssignment_1(), "rule__PositivePredicate__ClauseContinuationAssignment_1");
			builder.put(grammarAccess.getPositiveTermAccess().getParamAssignment_0(), "rule__PositiveTerm__ParamAssignment_0");
			builder.put(grammarAccess.getPositiveTermAccess().getParamAssignment_1(), "rule__PositiveTerm__ParamAssignment_1");
			builder.put(grammarAccess.getPositiveClauseAccess().getFirstElementAssignment_0(), "rule__PositiveClause__FirstElementAssignment_0");
			builder.put(grammarAccess.getPositiveClauseAccess().getOpeningParenthesisAssignment_1_0(), "rule__PositiveClause__OpeningParenthesisAssignment_1_0");
			builder.put(grammarAccess.getPositiveClauseAccess().getPredicateAssignment_1_1(), "rule__PositiveClause__PredicateAssignment_1_1");
			builder.put(grammarAccess.getPositiveClauseAccess().getClosingParenthesisAssignment_1_2(), "rule__PositiveClause__ClosingParenthesisAssignment_1_2");
			builder.put(grammarAccess.getPositiveClauseContinuationAccess().getLogicalOpAssignment_0(), "rule__PositiveClauseContinuation__LogicalOpAssignment_0");
			builder.put(grammarAccess.getPositiveClauseContinuationAccess().getAdditionalElementsAssignment_1(), "rule__PositiveClauseContinuation__AdditionalElementsAssignment_1");
			builder.put(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepTypeAssignment_0(), "rule__PositivePredefinedDependency__PredefDepTypeAssignment_0");
			builder.put(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepElementsAssignment_2(), "rule__PositivePredefinedDependency__PredefDepElementsAssignment_2");
			builder.put(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepElementsAssignment_3_1(), "rule__PositivePredefinedDependency__PredefDepElementsAssignment_3_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private InterparameterDependenciesLanguageGrammarAccess grammarAccess;

	@Override
	protected InternalInterparameterDependenciesLanguageParser createParser() {
		InternalInterparameterDependenciesLanguageParser result = new InternalInterparameterDependenciesLanguageParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public InterparameterDependenciesLanguageGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(InterparameterDependenciesLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
