/*
 * generated by Xtext 2.19.0
 */
package es.us.isa.interparamdep.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import es.us.isa.interparamdep.ide.contentassist.antlr.internal.InternalInterparameterDependenciesLanguageParser;
import es.us.isa.interparamdep.services.InterparameterDependenciesLanguageGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class InterparameterDependenciesLanguageParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(InterparameterDependenciesLanguageGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, InterparameterDependenciesLanguageGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getDependencyAccess().getDepAlternatives_0_0(), "rule__Dependency__DepAlternatives_0_0");
			builder.put(grammarAccess.getArithmeticOperatorAccess().getAlternatives(), "rule__ArithmeticOperator__Alternatives");
			builder.put(grammarAccess.getPredicate2Access().getAlternatives(), "rule__Predicate2__Alternatives");
			builder.put(grammarAccess.getClauseAccess().getAlternatives(), "rule__Clause__Alternatives");
			builder.put(grammarAccess.getClauseAccess().getAtomicElementsAlternatives_0_0_0(), "rule__Clause__AtomicElementsAlternatives_0_0_0");
			builder.put(grammarAccess.getClauseAccess().getAtomicElementsAlternatives_0_1_1_0(), "rule__Clause__AtomicElementsAlternatives_0_1_1_0");
			builder.put(grammarAccess.getClause2Access().getAlternatives(), "rule__Clause2__Alternatives");
			builder.put(grammarAccess.getClause2Access().getFirstElementAlternatives_0_0_0(), "rule__Clause2__FirstElementAlternatives_0_0_0");
			builder.put(grammarAccess.getClause2Access().getAdditionalElementsAlternatives_0_2_0(), "rule__Clause2__AdditionalElementsAlternatives_0_2_0");
			builder.put(grammarAccess.getClause2Access().getFirstElementAlternatives_1_2_0(), "rule__Clause2__FirstElementAlternatives_1_2_0");
			builder.put(grammarAccess.getClause2Access().getAdditionalElementsAlternatives_1_4_0(), "rule__Clause2__AdditionalElementsAlternatives_1_4_0");
			builder.put(grammarAccess.getClauseContinuationAccess().getAdditionalElementsAlternatives_1_0(), "rule__ClauseContinuation__AdditionalElementsAlternatives_1_0");
			builder.put(grammarAccess.getClause3Access().getAlternatives(), "rule__Clause3__Alternatives");
			builder.put(grammarAccess.getClause3Access().getFirstElementAlternatives_0_0_0(), "rule__Clause3__FirstElementAlternatives_0_0_0");
			builder.put(grammarAccess.getClause3Access().getFirstElementAlternatives_1_2_0(), "rule__Clause3__FirstElementAlternatives_1_2_0");
			builder.put(grammarAccess.getPositiveClauseContinuationAccess().getAdditionalElementsAlternatives_1_0(), "rule__PositiveClauseContinuation__AdditionalElementsAlternatives_1_0");
			builder.put(grammarAccess.getPositiveClause3Access().getAlternatives(), "rule__PositiveClause3__Alternatives");
			builder.put(grammarAccess.getPositiveClause3Access().getPositiveFirstElementAlternatives_1_2_0(), "rule__PositiveClause3__PositiveFirstElementAlternatives_1_2_0");
			builder.put(grammarAccess.getPredefinedDependency2Access().getPredefDepTypeAlternatives_1_0(), "rule__PredefinedDependency2__PredefDepTypeAlternatives_1_0");
			builder.put(grammarAccess.getPredefinedDependency2Access().getPredefDepClausesAlternatives_3_0(), "rule__PredefinedDependency2__PredefDepClausesAlternatives_3_0");
			builder.put(grammarAccess.getPredefinedDependency2Access().getPredefDepClausesAlternatives_4_1_0(), "rule__PredefinedDependency2__PredefDepClausesAlternatives_4_1_0");
			builder.put(grammarAccess.getPositiveClause2Access().getAlternatives(), "rule__PositiveClause2__Alternatives");
			builder.put(grammarAccess.getPositiveClause2Access().getAdditionalElementsAlternatives_0_2_0(), "rule__PositiveClause2__AdditionalElementsAlternatives_0_2_0");
			builder.put(grammarAccess.getPositiveClause2Access().getAdditionalElementsAlternatives_1_4_0(), "rule__PositiveClause2__AdditionalElementsAlternatives_1_4_0");
			builder.put(grammarAccess.getAtomicAccess().getAlternatives(), "rule__Atomic__Alternatives");
			builder.put(grammarAccess.getNegativeAtomicAccess().getAlternatives(), "rule__NegativeAtomic__Alternatives");
			builder.put(grammarAccess.getLogicalOperatorAccess().getAlternatives(), "rule__LogicalOperator__Alternatives");
			builder.put(grammarAccess.getPositiveClauseAccess().getPositiveClausesAlternatives_1_1_0(), "rule__PositiveClause__PositiveClausesAlternatives_1_1_0");
			builder.put(grammarAccess.getPositiveAtomicAccess().getAlternatives(), "rule__PositiveAtomic__Alternatives");
			builder.put(grammarAccess.getPredefinedDependencyAccess().getPredefDepTypeAlternatives_1_0(), "rule__PredefinedDependency__PredefDepTypeAlternatives_1_0");
			builder.put(grammarAccess.getPredefinedDependencyAccess().getPredefDepClausesAlternatives_3_0(), "rule__PredefinedDependency__PredefDepClausesAlternatives_3_0");
			builder.put(grammarAccess.getPredefinedDependencyAccess().getPredefDepClausesAlternatives_4_1_0(), "rule__PredefinedDependency__PredefDepClausesAlternatives_4_1_0");
			builder.put(grammarAccess.getDependencyAccess().getGroup(), "rule__Dependency__Group__0");
			builder.put(grammarAccess.getArithmeticDependencyAccess().getGroup(), "rule__ArithmeticDependency__Group__0");
			builder.put(grammarAccess.getConditionalDependencyAccess().getGroup(), "rule__ConditionalDependency__Group__0");
			builder.put(grammarAccess.getPredicateAccess().getGroup(), "rule__Predicate__Group__0");
			builder.put(grammarAccess.getPredicateAccess().getGroup_1(), "rule__Predicate__Group_1__0");
			builder.put(grammarAccess.getClauseAccess().getGroup_0(), "rule__Clause__Group_0__0");
			builder.put(grammarAccess.getClauseAccess().getGroup_0_1(), "rule__Clause__Group_0_1__0");
			builder.put(grammarAccess.getClauseAccess().getGroup_1(), "rule__Clause__Group_1__0");
			builder.put(grammarAccess.getClauseAccess().getGroup_1_3(), "rule__Clause__Group_1_3__0");
			builder.put(grammarAccess.getClause2Access().getGroup_0(), "rule__Clause2__Group_0__0");
			builder.put(grammarAccess.getClause2Access().getGroup_1(), "rule__Clause2__Group_1__0");
			builder.put(grammarAccess.getClauseContinuationAccess().getGroup(), "rule__ClauseContinuation__Group__0");
			builder.put(grammarAccess.getClause3Access().getGroup_0(), "rule__Clause3__Group_0__0");
			builder.put(grammarAccess.getClause3Access().getGroup_1(), "rule__Clause3__Group_1__0");
			builder.put(grammarAccess.getClause3Access().getGroup_2(), "rule__Clause3__Group_2__0");
			builder.put(grammarAccess.getPositiveClauseContinuationAccess().getGroup(), "rule__PositiveClauseContinuation__Group__0");
			builder.put(grammarAccess.getPositiveClause3Access().getGroup_0(), "rule__PositiveClause3__Group_0__0");
			builder.put(grammarAccess.getPositiveClause3Access().getGroup_1(), "rule__PositiveClause3__Group_1__0");
			builder.put(grammarAccess.getPositiveClause3Access().getGroup_2(), "rule__PositiveClause3__Group_2__0");
			builder.put(grammarAccess.getPredefinedDependency2Access().getGroup(), "rule__PredefinedDependency2__Group__0");
			builder.put(grammarAccess.getPredefinedDependency2Access().getGroup_4(), "rule__PredefinedDependency2__Group_4__0");
			builder.put(grammarAccess.getPositiveClause2Access().getGroup_0(), "rule__PositiveClause2__Group_0__0");
			builder.put(grammarAccess.getPositiveClause2Access().getGroup_1(), "rule__PositiveClause2__Group_1__0");
			builder.put(grammarAccess.getPositiveFullClause2Access().getGroup(), "rule__PositiveFullClause2__Group__0");
			builder.put(grammarAccess.getAtomicAccess().getGroup_0(), "rule__Atomic__Group_0__0");
			builder.put(grammarAccess.getAtomicAccess().getGroup_1(), "rule__Atomic__Group_1__0");
			builder.put(grammarAccess.getNegativeAtomicAccess().getGroup_0(), "rule__NegativeAtomic__Group_0__0");
			builder.put(grammarAccess.getNegativeAtomicAccess().getGroup_1(), "rule__NegativeAtomic__Group_1__0");
			builder.put(grammarAccess.getParamAssignmentAccess().getGroup(), "rule__ParamAssignment__Group__0");
			builder.put(grammarAccess.getParamAssignmentAccess().getGroup_3(), "rule__ParamAssignment__Group_3__0");
			builder.put(grammarAccess.getPositiveClauseAccess().getGroup(), "rule__PositiveClause__Group__0");
			builder.put(grammarAccess.getPositiveClauseAccess().getGroup_1(), "rule__PositiveClause__Group_1__0");
			builder.put(grammarAccess.getPositiveFullClauseAccess().getGroup(), "rule__PositiveFullClause__Group__0");
			builder.put(grammarAccess.getPredefinedDependencyAccess().getGroup(), "rule__PredefinedDependency__Group__0");
			builder.put(grammarAccess.getPredefinedDependencyAccess().getGroup_4(), "rule__PredefinedDependency__Group_4__0");
			builder.put(grammarAccess.getModelAccess().getDependenciesAssignment(), "rule__Model__DependenciesAssignment");
			builder.put(grammarAccess.getDependencyAccess().getDepAssignment_0(), "rule__Dependency__DepAssignment_0");
			builder.put(grammarAccess.getArithmeticDependencyAccess().getParam1Assignment_0(), "rule__ArithmeticDependency__Param1Assignment_0");
			builder.put(grammarAccess.getArithmeticDependencyAccess().getArithOpAssignment_1(), "rule__ArithmeticDependency__ArithOpAssignment_1");
			builder.put(grammarAccess.getArithmeticDependencyAccess().getParam2Assignment_2(), "rule__ArithmeticDependency__Param2Assignment_2");
			builder.put(grammarAccess.getConditionalDependencyAccess().getConditionAssignment_1(), "rule__ConditionalDependency__ConditionAssignment_1");
			builder.put(grammarAccess.getConditionalDependencyAccess().getConsequenceAssignment_3(), "rule__ConditionalDependency__ConsequenceAssignment_3");
			builder.put(grammarAccess.getPredicateAccess().getClausesAssignment_0(), "rule__Predicate__ClausesAssignment_0");
			builder.put(grammarAccess.getPredicateAccess().getClausesAssignment_1_1(), "rule__Predicate__ClausesAssignment_1_1");
			builder.put(grammarAccess.getClauseAccess().getAtomicElementsAssignment_0_0(), "rule__Clause__AtomicElementsAssignment_0_0");
			builder.put(grammarAccess.getClauseAccess().getAtomicElementsAssignment_0_1_1(), "rule__Clause__AtomicElementsAssignment_0_1_1");
			builder.put(grammarAccess.getClauseAccess().getClausesAssignment_1_2(), "rule__Clause__ClausesAssignment_1_2");
			builder.put(grammarAccess.getClauseAccess().getClausesAssignment_1_3_1(), "rule__Clause__ClausesAssignment_1_3_1");
			builder.put(grammarAccess.getClause2Access().getFirstElementAssignment_0_0(), "rule__Clause2__FirstElementAssignment_0_0");
			builder.put(grammarAccess.getClause2Access().getLogicalOpAssignment_0_1(), "rule__Clause2__LogicalOpAssignment_0_1");
			builder.put(grammarAccess.getClause2Access().getAdditionalElementsAssignment_0_2(), "rule__Clause2__AdditionalElementsAssignment_0_2");
			builder.put(grammarAccess.getClause2Access().getFirstElementAssignment_1_2(), "rule__Clause2__FirstElementAssignment_1_2");
			builder.put(grammarAccess.getClause2Access().getLogicalOpAssignment_1_3(), "rule__Clause2__LogicalOpAssignment_1_3");
			builder.put(grammarAccess.getClause2Access().getAdditionalElementsAssignment_1_4(), "rule__Clause2__AdditionalElementsAssignment_1_4");
			builder.put(grammarAccess.getClauseContinuationAccess().getLogicalOpAssignment_0(), "rule__ClauseContinuation__LogicalOpAssignment_0");
			builder.put(grammarAccess.getClauseContinuationAccess().getAdditionalElementsAssignment_1(), "rule__ClauseContinuation__AdditionalElementsAssignment_1");
			builder.put(grammarAccess.getClause3Access().getFirstElementAssignment_0_0(), "rule__Clause3__FirstElementAssignment_0_0");
			builder.put(grammarAccess.getClause3Access().getClauseContinuationAssignment_0_1(), "rule__Clause3__ClauseContinuationAssignment_0_1");
			builder.put(grammarAccess.getClause3Access().getFirstElementAssignment_1_2(), "rule__Clause3__FirstElementAssignment_1_2");
			builder.put(grammarAccess.getClause3Access().getClauseContinuationAssignment_1_3(), "rule__Clause3__ClauseContinuationAssignment_1_3");
			builder.put(grammarAccess.getClause3Access().getClauseContinuation2Assignment_1_5(), "rule__Clause3__ClauseContinuation2Assignment_1_5");
			builder.put(grammarAccess.getClause3Access().getFirstElementAssignment_2_0(), "rule__Clause3__FirstElementAssignment_2_0");
			builder.put(grammarAccess.getClause3Access().getClauseContinuationAssignment_2_1(), "rule__Clause3__ClauseContinuationAssignment_2_1");
			builder.put(grammarAccess.getPositiveClauseContinuationAccess().getLogicalOpAssignment_0(), "rule__PositiveClauseContinuation__LogicalOpAssignment_0");
			builder.put(grammarAccess.getPositiveClauseContinuationAccess().getAdditionalElementsAssignment_1(), "rule__PositiveClauseContinuation__AdditionalElementsAssignment_1");
			builder.put(grammarAccess.getPositiveClause3Access().getPositiveFirstElementAssignment_0_0(), "rule__PositiveClause3__PositiveFirstElementAssignment_0_0");
			builder.put(grammarAccess.getPositiveClause3Access().getPositiveClauseContinuationAssignment_0_1(), "rule__PositiveClause3__PositiveClauseContinuationAssignment_0_1");
			builder.put(grammarAccess.getPositiveClause3Access().getPositiveFirstElementAssignment_1_2(), "rule__PositiveClause3__PositiveFirstElementAssignment_1_2");
			builder.put(grammarAccess.getPositiveClause3Access().getPositiveClauseContinuationAssignment_1_3(), "rule__PositiveClause3__PositiveClauseContinuationAssignment_1_3");
			builder.put(grammarAccess.getPositiveClause3Access().getPositiveClauseContinuation2Assignment_1_5(), "rule__PositiveClause3__PositiveClauseContinuation2Assignment_1_5");
			builder.put(grammarAccess.getPositiveClause3Access().getPositiveClauseContinuationAssignment_2_1(), "rule__PositiveClause3__PositiveClauseContinuationAssignment_2_1");
			builder.put(grammarAccess.getPredefinedDependency2Access().getPredefDepTypeAssignment_1(), "rule__PredefinedDependency2__PredefDepTypeAssignment_1");
			builder.put(grammarAccess.getPredefinedDependency2Access().getPredefDepClausesAssignment_3(), "rule__PredefinedDependency2__PredefDepClausesAssignment_3");
			builder.put(grammarAccess.getPredefinedDependency2Access().getPredefDepClausesAssignment_4_1(), "rule__PredefinedDependency2__PredefDepClausesAssignment_4_1");
			builder.put(grammarAccess.getPositiveClause2Access().getFirstElementAssignment_0_0(), "rule__PositiveClause2__FirstElementAssignment_0_0");
			builder.put(grammarAccess.getPositiveClause2Access().getLogicalOpAssignment_0_1(), "rule__PositiveClause2__LogicalOpAssignment_0_1");
			builder.put(grammarAccess.getPositiveClause2Access().getAdditionalElementsAssignment_0_2(), "rule__PositiveClause2__AdditionalElementsAssignment_0_2");
			builder.put(grammarAccess.getPositiveClause2Access().getFirstElementAssignment_1_2(), "rule__PositiveClause2__FirstElementAssignment_1_2");
			builder.put(grammarAccess.getPositiveClause2Access().getLogicalOpAssignment_1_3(), "rule__PositiveClause2__LogicalOpAssignment_1_3");
			builder.put(grammarAccess.getPositiveClause2Access().getAdditionalElementsAssignment_1_4(), "rule__PositiveClause2__AdditionalElementsAssignment_1_4");
			builder.put(grammarAccess.getParamAccess().getNameAssignment(), "rule__Param__NameAssignment");
			builder.put(grammarAccess.getParamAssignmentAccess().getParamValuesAssignment_2(), "rule__ParamAssignment__ParamValuesAssignment_2");
			builder.put(grammarAccess.getParamAssignmentAccess().getParamValuesAssignment_3_1(), "rule__ParamAssignment__ParamValuesAssignment_3_1");
			builder.put(grammarAccess.getPositiveClauseAccess().getPositiveClausesAssignment_0(), "rule__PositiveClause__PositiveClausesAssignment_0");
			builder.put(grammarAccess.getPositiveClauseAccess().getPositiveClausesAssignment_1_1(), "rule__PositiveClause__PositiveClausesAssignment_1_1");
			builder.put(grammarAccess.getPredefinedDependencyAccess().getPredefDepTypeAssignment_1(), "rule__PredefinedDependency__PredefDepTypeAssignment_1");
			builder.put(grammarAccess.getPredefinedDependencyAccess().getPredefDepClausesAssignment_3(), "rule__PredefinedDependency__PredefDepClausesAssignment_3");
			builder.put(grammarAccess.getPredefinedDependencyAccess().getPredefDepClausesAssignment_4_1(), "rule__PredefinedDependency__PredefDepClausesAssignment_4_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private InterparameterDependenciesLanguageGrammarAccess grammarAccess;

	@Override
	protected InternalInterparameterDependenciesLanguageParser createParser() {
		InternalInterparameterDependenciesLanguageParser result = new InternalInterparameterDependenciesLanguageParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public InterparameterDependenciesLanguageGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(InterparameterDependenciesLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
