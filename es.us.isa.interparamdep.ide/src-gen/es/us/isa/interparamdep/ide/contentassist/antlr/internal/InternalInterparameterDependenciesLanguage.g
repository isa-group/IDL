/*
 * generated by Xtext 2.19.0
 */
grammar InternalInterparameterDependenciesLanguage;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package es.us.isa.interparamdep.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package es.us.isa.interparamdep.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import es.us.isa.interparamdep.services.InterparameterDependenciesLanguageGrammarAccess;

}
@parser::members {
	private InterparameterDependenciesLanguageGrammarAccess grammarAccess;

	public void setGrammarAccess(InterparameterDependenciesLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getDependenciesAssignment()); }
		(rule__Model__DependenciesAssignment)*
		{ after(grammarAccess.getModelAccess().getDependenciesAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDependency
entryRuleDependency
:
{ before(grammarAccess.getDependencyRule()); }
	 ruleDependency
{ after(grammarAccess.getDependencyRule()); } 
	 EOF 
;

// Rule Dependency
ruleDependency 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDependencyAccess().getGroup()); }
		(rule__Dependency__Group__0)
		{ after(grammarAccess.getDependencyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArithmeticDependency
entryRuleArithmeticDependency
:
{ before(grammarAccess.getArithmeticDependencyRule()); }
	 ruleArithmeticDependency
{ after(grammarAccess.getArithmeticDependencyRule()); } 
	 EOF 
;

// Rule ArithmeticDependency
ruleArithmeticDependency 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArithmeticDependencyAccess().getGroup()); }
		(rule__ArithmeticDependency__Group__0)
		{ after(grammarAccess.getArithmeticDependencyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArithmeticOperator
entryRuleArithmeticOperator
:
{ before(grammarAccess.getArithmeticOperatorRule()); }
	 ruleArithmeticOperator
{ after(grammarAccess.getArithmeticOperatorRule()); } 
	 EOF 
;

// Rule ArithmeticOperator
ruleArithmeticOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArithmeticOperatorAccess().getAlternatives()); }
		(rule__ArithmeticOperator__Alternatives)
		{ after(grammarAccess.getArithmeticOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConditionalDependency
entryRuleConditionalDependency
:
{ before(grammarAccess.getConditionalDependencyRule()); }
	 ruleConditionalDependency
{ after(grammarAccess.getConditionalDependencyRule()); } 
	 EOF 
;

// Rule ConditionalDependency
ruleConditionalDependency 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionalDependencyAccess().getGroup()); }
		(rule__ConditionalDependency__Group__0)
		{ after(grammarAccess.getConditionalDependencyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePredicate2
entryRulePredicate2
:
{ before(grammarAccess.getPredicate2Rule()); }
	 rulePredicate2
{ after(grammarAccess.getPredicate2Rule()); } 
	 EOF 
;

// Rule Predicate2
rulePredicate2 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPredicate2Access().getAlternatives()); }
		(rule__Predicate2__Alternatives)
		{ after(grammarAccess.getPredicate2Access().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClause
entryRuleClause
:
{ before(grammarAccess.getClauseRule()); }
	 ruleClause
{ after(grammarAccess.getClauseRule()); } 
	 EOF 
;

// Rule Clause
ruleClause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClauseAccess().getAlternatives()); }
		(rule__Clause__Alternatives)
		{ after(grammarAccess.getClauseAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClause2
entryRuleClause2
:
{ before(grammarAccess.getClause2Rule()); }
	 ruleClause2
{ after(grammarAccess.getClause2Rule()); } 
	 EOF 
;

// Rule Clause2
ruleClause2 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClause2Access().getAlternatives()); }
		(rule__Clause2__Alternatives)
		{ after(grammarAccess.getClause2Access().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClauseContinuation
entryRuleClauseContinuation
:
{ before(grammarAccess.getClauseContinuationRule()); }
	 ruleClauseContinuation
{ after(grammarAccess.getClauseContinuationRule()); } 
	 EOF 
;

// Rule ClauseContinuation
ruleClauseContinuation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClauseContinuationAccess().getGroup()); }
		(rule__ClauseContinuation__Group__0)
		{ after(grammarAccess.getClauseContinuationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClause3
entryRuleClause3
:
{ before(grammarAccess.getClause3Rule()); }
	 ruleClause3
{ after(grammarAccess.getClause3Rule()); } 
	 EOF 
;

// Rule Clause3
ruleClause3 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClause3Access().getAlternatives()); }
		(rule__Clause3__Alternatives)
		{ after(grammarAccess.getClause3Access().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePositiveClauseContinuation
entryRulePositiveClauseContinuation
:
{ before(grammarAccess.getPositiveClauseContinuationRule()); }
	 rulePositiveClauseContinuation
{ after(grammarAccess.getPositiveClauseContinuationRule()); } 
	 EOF 
;

// Rule PositiveClauseContinuation
rulePositiveClauseContinuation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPositiveClauseContinuationAccess().getGroup()); }
		(rule__PositiveClauseContinuation__Group__0)
		{ after(grammarAccess.getPositiveClauseContinuationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePositiveClause3
entryRulePositiveClause3
:
{ before(grammarAccess.getPositiveClause3Rule()); }
	 rulePositiveClause3
{ after(grammarAccess.getPositiveClause3Rule()); } 
	 EOF 
;

// Rule PositiveClause3
rulePositiveClause3 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPositiveClause3Access().getAlternatives()); }
		(rule__PositiveClause3__Alternatives)
		{ after(grammarAccess.getPositiveClause3Access().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePredefinedDependency2
entryRulePredefinedDependency2
:
{ before(grammarAccess.getPredefinedDependency2Rule()); }
	 rulePredefinedDependency2
{ after(grammarAccess.getPredefinedDependency2Rule()); } 
	 EOF 
;

// Rule PredefinedDependency2
rulePredefinedDependency2 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPredefinedDependency2Access().getGroup()); }
		(rule__PredefinedDependency2__Group__0)
		{ after(grammarAccess.getPredefinedDependency2Access().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePositiveClause2
entryRulePositiveClause2
:
{ before(grammarAccess.getPositiveClause2Rule()); }
	 rulePositiveClause2
{ after(grammarAccess.getPositiveClause2Rule()); } 
	 EOF 
;

// Rule PositiveClause2
rulePositiveClause2 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPositiveClause2Access().getAlternatives()); }
		(rule__PositiveClause2__Alternatives)
		{ after(grammarAccess.getPositiveClause2Access().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNegativeAtomic
entryRuleNegativeAtomic
:
{ before(grammarAccess.getNegativeAtomicRule()); }
	 ruleNegativeAtomic
{ after(grammarAccess.getNegativeAtomicRule()); } 
	 EOF 
;

// Rule NegativeAtomic
ruleNegativeAtomic 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNegativeAtomicAccess().getAlternatives()); }
		(rule__NegativeAtomic__Alternatives)
		{ after(grammarAccess.getNegativeAtomicAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNot
entryRuleNot
:
{ before(grammarAccess.getNotRule()); }
	 ruleNot
{ after(grammarAccess.getNotRule()); } 
	 EOF 
;

// Rule Not
ruleNot 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNotAccess().getNOTKeyword()); }
		'NOT'
		{ after(grammarAccess.getNotAccess().getNOTKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLogicalOperator
entryRuleLogicalOperator
:
{ before(grammarAccess.getLogicalOperatorRule()); }
	 ruleLogicalOperator
{ after(grammarAccess.getLogicalOperatorRule()); } 
	 EOF 
;

// Rule LogicalOperator
ruleLogicalOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLogicalOperatorAccess().getAlternatives()); }
		(rule__LogicalOperator__Alternatives)
		{ after(grammarAccess.getLogicalOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParam
entryRuleParam
:
{ before(grammarAccess.getParamRule()); }
	 ruleParam
{ after(grammarAccess.getParamRule()); } 
	 EOF 
;

// Rule Param
ruleParam 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParamAccess().getNameAssignment()); }
		(rule__Param__NameAssignment)
		{ after(grammarAccess.getParamAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParamAssignment
entryRuleParamAssignment
:
{ before(grammarAccess.getParamAssignmentRule()); }
	 ruleParamAssignment
{ after(grammarAccess.getParamAssignmentRule()); } 
	 EOF 
;

// Rule ParamAssignment
ruleParamAssignment 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParamAssignmentAccess().getGroup()); }
		(rule__ParamAssignment__Group__0)
		{ after(grammarAccess.getParamAssignmentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePositiveClause
entryRulePositiveClause
:
{ before(grammarAccess.getPositiveClauseRule()); }
	 rulePositiveClause
{ after(grammarAccess.getPositiveClauseRule()); } 
	 EOF 
;

// Rule PositiveClause
rulePositiveClause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPositiveClauseAccess().getGroup()); }
		(rule__PositiveClause__Group__0)
		{ after(grammarAccess.getPositiveClauseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePositiveFullClause
entryRulePositiveFullClause
:
{ before(grammarAccess.getPositiveFullClauseRule()); }
	 rulePositiveFullClause
{ after(grammarAccess.getPositiveFullClauseRule()); } 
	 EOF 
;

// Rule PositiveFullClause
rulePositiveFullClause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPositiveFullClauseAccess().getGroup()); }
		(rule__PositiveFullClause__Group__0)
		{ after(grammarAccess.getPositiveFullClauseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePositiveAtomic
entryRulePositiveAtomic
:
{ before(grammarAccess.getPositiveAtomicRule()); }
	 rulePositiveAtomic
{ after(grammarAccess.getPositiveAtomicRule()); } 
	 EOF 
;

// Rule PositiveAtomic
rulePositiveAtomic 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPositiveAtomicAccess().getAlternatives()); }
		(rule__PositiveAtomic__Alternatives)
		{ after(grammarAccess.getPositiveAtomicAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePredefinedDependency
entryRulePredefinedDependency
:
{ before(grammarAccess.getPredefinedDependencyRule()); }
	 rulePredefinedDependency
{ after(grammarAccess.getPredefinedDependencyRule()); } 
	 EOF 
;

// Rule PredefinedDependency
rulePredefinedDependency 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPredefinedDependencyAccess().getGroup()); }
		(rule__PredefinedDependency__Group__0)
		{ after(grammarAccess.getPredefinedDependencyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dependency__DepAlternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDependencyAccess().getDepArithmeticDependencyParserRuleCall_0_0_0()); }
		ruleArithmeticDependency
		{ after(grammarAccess.getDependencyAccess().getDepArithmeticDependencyParserRuleCall_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getDependencyAccess().getDepConditionalDependencyParserRuleCall_0_0_1()); }
		ruleConditionalDependency
		{ after(grammarAccess.getDependencyAccess().getDepConditionalDependencyParserRuleCall_0_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getDependencyAccess().getDepPredefinedDependency2ParserRuleCall_0_0_2()); }
		rulePredefinedDependency2
		{ after(grammarAccess.getDependencyAccess().getDepPredefinedDependency2ParserRuleCall_0_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArithmeticOperatorAccess().getLessThanSignKeyword_0()); }
		'<'
		{ after(grammarAccess.getArithmeticOperatorAccess().getLessThanSignKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getArithmeticOperatorAccess().getGreaterThanSignKeyword_1()); }
		'>'
		{ after(grammarAccess.getArithmeticOperatorAccess().getGreaterThanSignKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getArithmeticOperatorAccess().getLessThanSignEqualsSignKeyword_2()); }
		'<='
		{ after(grammarAccess.getArithmeticOperatorAccess().getLessThanSignEqualsSignKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getArithmeticOperatorAccess().getGreaterThanSignEqualsSignKeyword_3()); }
		'>='
		{ after(grammarAccess.getArithmeticOperatorAccess().getGreaterThanSignEqualsSignKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getArithmeticOperatorAccess().getEqualsSignKeyword_4()); }
		'='
		{ after(grammarAccess.getArithmeticOperatorAccess().getEqualsSignKeyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getArithmeticOperatorAccess().getExclamationMarkEqualsSignKeyword_5()); }
		'!='
		{ after(grammarAccess.getArithmeticOperatorAccess().getExclamationMarkEqualsSignKeyword_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate2__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredicate2Access().getClause3ParserRuleCall_0()); }
		ruleClause3
		{ after(grammarAccess.getPredicate2Access().getClause3ParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPredicate2Access().getPositiveAtomicParserRuleCall_1()); }
		rulePositiveAtomic
		{ after(grammarAccess.getPredicate2Access().getPositiveAtomicParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getPredicate2Access().getNegativeAtomicParserRuleCall_2()); }
		ruleNegativeAtomic
		{ after(grammarAccess.getPredicate2Access().getNegativeAtomicParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClauseAccess().getGroup_0()); }
		(rule__Clause__Group_0__0)
		{ after(grammarAccess.getClauseAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getClauseAccess().getGroup_1()); }
		(rule__Clause__Group_1__0)
		{ after(grammarAccess.getClauseAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getClauseAccess().getPredefinedDependencyParserRuleCall_2()); }
		rulePredefinedDependency
		{ after(grammarAccess.getClauseAccess().getPredefinedDependencyParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__AtomicElementsAlternatives_0_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClauseAccess().getAtomicElementsPositiveAtomicParserRuleCall_0_0_0_0()); }
		rulePositiveAtomic
		{ after(grammarAccess.getClauseAccess().getAtomicElementsPositiveAtomicParserRuleCall_0_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getClauseAccess().getAtomicElementsNegativeAtomicParserRuleCall_0_0_0_1()); }
		ruleNegativeAtomic
		{ after(grammarAccess.getClauseAccess().getAtomicElementsNegativeAtomicParserRuleCall_0_0_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__AtomicElementsAlternatives_0_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClauseAccess().getAtomicElementsPositiveAtomicParserRuleCall_0_1_1_0_0()); }
		rulePositiveAtomic
		{ after(grammarAccess.getClauseAccess().getAtomicElementsPositiveAtomicParserRuleCall_0_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getClauseAccess().getAtomicElementsNegativeAtomicParserRuleCall_0_1_1_0_1()); }
		ruleNegativeAtomic
		{ after(grammarAccess.getClauseAccess().getAtomicElementsNegativeAtomicParserRuleCall_0_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause2__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClause2Access().getGroup_0()); }
		(rule__Clause2__Group_0__0)
		{ after(grammarAccess.getClause2Access().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getClause2Access().getGroup_1()); }
		(rule__Clause2__Group_1__0)
		{ after(grammarAccess.getClause2Access().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause2__FirstElementAlternatives_0_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClause2Access().getFirstElementPositiveAtomicParserRuleCall_0_0_0_0()); }
		rulePositiveAtomic
		{ after(grammarAccess.getClause2Access().getFirstElementPositiveAtomicParserRuleCall_0_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getClause2Access().getFirstElementNegativeAtomicParserRuleCall_0_0_0_1()); }
		ruleNegativeAtomic
		{ after(grammarAccess.getClause2Access().getFirstElementNegativeAtomicParserRuleCall_0_0_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause2__AdditionalElementsAlternatives_0_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClause2Access().getAdditionalElementsPositiveAtomicParserRuleCall_0_2_0_0()); }
		rulePositiveAtomic
		{ after(grammarAccess.getClause2Access().getAdditionalElementsPositiveAtomicParserRuleCall_0_2_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getClause2Access().getAdditionalElementsNegativeAtomicParserRuleCall_0_2_0_1()); }
		ruleNegativeAtomic
		{ after(grammarAccess.getClause2Access().getAdditionalElementsNegativeAtomicParserRuleCall_0_2_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getClause2Access().getAdditionalElementsClause2ParserRuleCall_0_2_0_2()); }
		ruleClause2
		{ after(grammarAccess.getClause2Access().getAdditionalElementsClause2ParserRuleCall_0_2_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause2__FirstElementAlternatives_1_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClause2Access().getFirstElementPositiveAtomicParserRuleCall_1_2_0_0()); }
		rulePositiveAtomic
		{ after(grammarAccess.getClause2Access().getFirstElementPositiveAtomicParserRuleCall_1_2_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getClause2Access().getFirstElementNegativeAtomicParserRuleCall_1_2_0_1()); }
		ruleNegativeAtomic
		{ after(grammarAccess.getClause2Access().getFirstElementNegativeAtomicParserRuleCall_1_2_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause2__AdditionalElementsAlternatives_1_4_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClause2Access().getAdditionalElementsPositiveAtomicParserRuleCall_1_4_0_0()); }
		rulePositiveAtomic
		{ after(grammarAccess.getClause2Access().getAdditionalElementsPositiveAtomicParserRuleCall_1_4_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getClause2Access().getAdditionalElementsNegativeAtomicParserRuleCall_1_4_0_1()); }
		ruleNegativeAtomic
		{ after(grammarAccess.getClause2Access().getAdditionalElementsNegativeAtomicParserRuleCall_1_4_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getClause2Access().getAdditionalElementsClause2ParserRuleCall_1_4_0_2()); }
		ruleClause2
		{ after(grammarAccess.getClause2Access().getAdditionalElementsClause2ParserRuleCall_1_4_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClauseContinuation__AdditionalElementsAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClauseContinuationAccess().getAdditionalElementsPositiveAtomicParserRuleCall_1_0_0()); }
		rulePositiveAtomic
		{ after(grammarAccess.getClauseContinuationAccess().getAdditionalElementsPositiveAtomicParserRuleCall_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getClauseContinuationAccess().getAdditionalElementsNegativeAtomicParserRuleCall_1_0_1()); }
		ruleNegativeAtomic
		{ after(grammarAccess.getClauseContinuationAccess().getAdditionalElementsNegativeAtomicParserRuleCall_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getClauseContinuationAccess().getAdditionalElementsClause3ParserRuleCall_1_0_2()); }
		ruleClause3
		{ after(grammarAccess.getClauseContinuationAccess().getAdditionalElementsClause3ParserRuleCall_1_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause3__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClause3Access().getGroup_0()); }
		(rule__Clause3__Group_0__0)
		{ after(grammarAccess.getClause3Access().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getClause3Access().getGroup_1()); }
		(rule__Clause3__Group_1__0)
		{ after(grammarAccess.getClause3Access().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getClause3Access().getGroup_2()); }
		(rule__Clause3__Group_2__0)
		{ after(grammarAccess.getClause3Access().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause3__FirstElementAlternatives_0_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClause3Access().getFirstElementPositiveAtomicParserRuleCall_0_0_0_0()); }
		rulePositiveAtomic
		{ after(grammarAccess.getClause3Access().getFirstElementPositiveAtomicParserRuleCall_0_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getClause3Access().getFirstElementNegativeAtomicParserRuleCall_0_0_0_1()); }
		ruleNegativeAtomic
		{ after(grammarAccess.getClause3Access().getFirstElementNegativeAtomicParserRuleCall_0_0_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause3__FirstElementAlternatives_1_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClause3Access().getFirstElementPositiveAtomicParserRuleCall_1_2_0_0()); }
		rulePositiveAtomic
		{ after(grammarAccess.getClause3Access().getFirstElementPositiveAtomicParserRuleCall_1_2_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getClause3Access().getFirstElementNegativeAtomicParserRuleCall_1_2_0_1()); }
		ruleNegativeAtomic
		{ after(grammarAccess.getClause3Access().getFirstElementNegativeAtomicParserRuleCall_1_2_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getClause3Access().getFirstElementPredefinedDependency2ParserRuleCall_1_2_0_2()); }
		rulePredefinedDependency2
		{ after(grammarAccess.getClause3Access().getFirstElementPredefinedDependency2ParserRuleCall_1_2_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClauseContinuation__AdditionalElementsAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveClauseContinuationAccess().getAdditionalElementsPositiveAtomicParserRuleCall_1_0_0()); }
		rulePositiveAtomic
		{ after(grammarAccess.getPositiveClauseContinuationAccess().getAdditionalElementsPositiveAtomicParserRuleCall_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getPositiveClauseContinuationAccess().getAdditionalElementsPositiveClause3ParserRuleCall_1_0_1()); }
		rulePositiveClause3
		{ after(grammarAccess.getPositiveClauseContinuationAccess().getAdditionalElementsPositiveClause3ParserRuleCall_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause3__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveClause3Access().getGroup_0()); }
		(rule__PositiveClause3__Group_0__0)
		{ after(grammarAccess.getPositiveClause3Access().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getPositiveClause3Access().getGroup_1()); }
		(rule__PositiveClause3__Group_1__0)
		{ after(grammarAccess.getPositiveClause3Access().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getPositiveClause3Access().getGroup_2()); }
		(rule__PositiveClause3__Group_2__0)
		{ after(grammarAccess.getPositiveClause3Access().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause3__PositiveFirstElementAlternatives_1_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveClause3Access().getPositiveFirstElementPositiveAtomicParserRuleCall_1_2_0_0()); }
		rulePositiveAtomic
		{ after(grammarAccess.getPositiveClause3Access().getPositiveFirstElementPositiveAtomicParserRuleCall_1_2_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getPositiveClause3Access().getPositiveFirstElementPredefinedDependency2ParserRuleCall_1_2_0_1()); }
		rulePredefinedDependency2
		{ after(grammarAccess.getPositiveClause3Access().getPositiveFirstElementPredefinedDependency2ParserRuleCall_1_2_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency2__PredefDepTypeAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredefinedDependency2Access().getPredefDepTypeOrKeyword_1_0_0()); }
		'Or'
		{ after(grammarAccess.getPredefinedDependency2Access().getPredefDepTypeOrKeyword_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getPredefinedDependency2Access().getPredefDepTypeOnlyOneKeyword_1_0_1()); }
		'OnlyOne'
		{ after(grammarAccess.getPredefinedDependency2Access().getPredefDepTypeOnlyOneKeyword_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getPredefinedDependency2Access().getPredefDepTypeAllOrNoneKeyword_1_0_2()); }
		'AllOrNone'
		{ after(grammarAccess.getPredefinedDependency2Access().getPredefDepTypeAllOrNoneKeyword_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getPredefinedDependency2Access().getPredefDepTypeZeroOrOneKeyword_1_0_3()); }
		'ZeroOrOne'
		{ after(grammarAccess.getPredefinedDependency2Access().getPredefDepTypeZeroOrOneKeyword_1_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency2__PredefDepClausesAlternatives_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredefinedDependency2Access().getPredefDepClausesPositiveAtomicParserRuleCall_3_0_0()); }
		rulePositiveAtomic
		{ after(grammarAccess.getPredefinedDependency2Access().getPredefDepClausesPositiveAtomicParserRuleCall_3_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getPredefinedDependency2Access().getPredefDepClausesPositiveClause3ParserRuleCall_3_0_1()); }
		rulePositiveClause3
		{ after(grammarAccess.getPredefinedDependency2Access().getPredefDepClausesPositiveClause3ParserRuleCall_3_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency2__PredefDepClausesAlternatives_4_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredefinedDependency2Access().getPredefDepClausesPositiveAtomicParserRuleCall_4_1_0_0()); }
		rulePositiveAtomic
		{ after(grammarAccess.getPredefinedDependency2Access().getPredefDepClausesPositiveAtomicParserRuleCall_4_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getPredefinedDependency2Access().getPredefDepClausesPositiveClause3ParserRuleCall_4_1_0_1()); }
		rulePositiveClause3
		{ after(grammarAccess.getPredefinedDependency2Access().getPredefDepClausesPositiveClause3ParserRuleCall_4_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause2__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveClause2Access().getGroup_0()); }
		(rule__PositiveClause2__Group_0__0)
		{ after(grammarAccess.getPositiveClause2Access().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getPositiveClause2Access().getGroup_1()); }
		(rule__PositiveClause2__Group_1__0)
		{ after(grammarAccess.getPositiveClause2Access().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause2__AdditionalElementsAlternatives_0_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveClause2Access().getAdditionalElementsPositiveAtomicParserRuleCall_0_2_0_0()); }
		rulePositiveAtomic
		{ after(grammarAccess.getPositiveClause2Access().getAdditionalElementsPositiveAtomicParserRuleCall_0_2_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getPositiveClause2Access().getAdditionalElementsPositiveClause2ParserRuleCall_0_2_0_1()); }
		rulePositiveClause2
		{ after(grammarAccess.getPositiveClause2Access().getAdditionalElementsPositiveClause2ParserRuleCall_0_2_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause2__AdditionalElementsAlternatives_1_4_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveClause2Access().getAdditionalElementsPositiveAtomicParserRuleCall_1_4_0_0()); }
		rulePositiveAtomic
		{ after(grammarAccess.getPositiveClause2Access().getAdditionalElementsPositiveAtomicParserRuleCall_1_4_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getPositiveClause2Access().getAdditionalElementsPositiveClause2ParserRuleCall_1_4_0_1()); }
		rulePositiveClause2
		{ after(grammarAccess.getPositiveClause2Access().getAdditionalElementsPositiveClause2ParserRuleCall_1_4_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NegativeAtomic__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNegativeAtomicAccess().getGroup_0()); }
		(rule__NegativeAtomic__Group_0__0)
		{ after(grammarAccess.getNegativeAtomicAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getNegativeAtomicAccess().getGroup_1()); }
		(rule__NegativeAtomic__Group_1__0)
		{ after(grammarAccess.getNegativeAtomicAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicalOperatorAccess().getANDKeyword_0()); }
		'AND'
		{ after(grammarAccess.getLogicalOperatorAccess().getANDKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getLogicalOperatorAccess().getORKeyword_1()); }
		'OR'
		{ after(grammarAccess.getLogicalOperatorAccess().getORKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause__PositiveClausesAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveClauseAccess().getPositiveClausesPositiveClauseParserRuleCall_1_1_0_0()); }
		rulePositiveClause
		{ after(grammarAccess.getPositiveClauseAccess().getPositiveClausesPositiveClauseParserRuleCall_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getPositiveClauseAccess().getPositiveClausesPositiveFullClauseParserRuleCall_1_1_0_1()); }
		rulePositiveFullClause
		{ after(grammarAccess.getPositiveClauseAccess().getPositiveClausesPositiveFullClauseParserRuleCall_1_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getPositiveClauseAccess().getPositiveClausesPredefinedDependencyParserRuleCall_1_1_0_2()); }
		rulePredefinedDependency
		{ after(grammarAccess.getPositiveClauseAccess().getPositiveClausesPredefinedDependencyParserRuleCall_1_1_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveAtomic__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveAtomicAccess().getParamParserRuleCall_0()); }
		ruleParam
		{ after(grammarAccess.getPositiveAtomicAccess().getParamParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPositiveAtomicAccess().getParamAssignmentParserRuleCall_1()); }
		ruleParamAssignment
		{ after(grammarAccess.getPositiveAtomicAccess().getParamAssignmentParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getPositiveAtomicAccess().getArithmeticDependencyParserRuleCall_2()); }
		ruleArithmeticDependency
		{ after(grammarAccess.getPositiveAtomicAccess().getArithmeticDependencyParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__PredefDepTypeAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredefinedDependencyAccess().getPredefDepTypeOrKeyword_1_0_0()); }
		'Or'
		{ after(grammarAccess.getPredefinedDependencyAccess().getPredefDepTypeOrKeyword_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getPredefinedDependencyAccess().getPredefDepTypeOnlyOneKeyword_1_0_1()); }
		'OnlyOne'
		{ after(grammarAccess.getPredefinedDependencyAccess().getPredefDepTypeOnlyOneKeyword_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getPredefinedDependencyAccess().getPredefDepTypeAllOrNoneKeyword_1_0_2()); }
		'AllOrNone'
		{ after(grammarAccess.getPredefinedDependencyAccess().getPredefDepTypeAllOrNoneKeyword_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getPredefinedDependencyAccess().getPredefDepTypeZeroOrOneKeyword_1_0_3()); }
		'ZeroOrOne'
		{ after(grammarAccess.getPredefinedDependencyAccess().getPredefDepTypeZeroOrOneKeyword_1_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__PredefDepClausesAlternatives_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredefinedDependencyAccess().getPredefDepClausesPositiveClauseParserRuleCall_3_0_0()); }
		rulePositiveClause
		{ after(grammarAccess.getPredefinedDependencyAccess().getPredefDepClausesPositiveClauseParserRuleCall_3_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getPredefinedDependencyAccess().getPredefDepClausesPositiveFullClauseParserRuleCall_3_0_1()); }
		rulePositiveFullClause
		{ after(grammarAccess.getPredefinedDependencyAccess().getPredefDepClausesPositiveFullClauseParserRuleCall_3_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getPredefinedDependencyAccess().getPredefDepClausesPredefinedDependencyParserRuleCall_3_0_2()); }
		rulePredefinedDependency
		{ after(grammarAccess.getPredefinedDependencyAccess().getPredefDepClausesPredefinedDependencyParserRuleCall_3_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__PredefDepClausesAlternatives_4_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredefinedDependencyAccess().getPredefDepClausesPositiveClauseParserRuleCall_4_1_0_0()); }
		rulePositiveClause
		{ after(grammarAccess.getPredefinedDependencyAccess().getPredefDepClausesPositiveClauseParserRuleCall_4_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getPredefinedDependencyAccess().getPredefDepClausesPositiveFullClauseParserRuleCall_4_1_0_1()); }
		rulePositiveFullClause
		{ after(grammarAccess.getPredefinedDependencyAccess().getPredefDepClausesPositiveFullClauseParserRuleCall_4_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getPredefinedDependencyAccess().getPredefDepClausesPredefinedDependencyParserRuleCall_4_1_0_2()); }
		rulePredefinedDependency
		{ after(grammarAccess.getPredefinedDependencyAccess().getPredefDepClausesPredefinedDependencyParserRuleCall_4_1_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dependency__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dependency__Group__0__Impl
	rule__Dependency__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Dependency__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDependencyAccess().getDepAssignment_0()); }
	(rule__Dependency__DepAssignment_0)
	{ after(grammarAccess.getDependencyAccess().getDepAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dependency__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dependency__Group__1__Impl
	rule__Dependency__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Dependency__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDependencyAccess().getSemicolonKeyword_1()); }
	';'
	{ after(grammarAccess.getDependencyAccess().getSemicolonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dependency__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dependency__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Dependency__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDependencyAccess().getNLTerminalRuleCall_2()); }
	(RULE_NL)?
	{ after(grammarAccess.getDependencyAccess().getNLTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArithmeticDependency__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithmeticDependency__Group__0__Impl
	rule__ArithmeticDependency__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticDependency__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithmeticDependencyAccess().getParam1Assignment_0()); }
	(rule__ArithmeticDependency__Param1Assignment_0)
	{ after(grammarAccess.getArithmeticDependencyAccess().getParam1Assignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticDependency__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithmeticDependency__Group__1__Impl
	rule__ArithmeticDependency__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticDependency__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithmeticDependencyAccess().getArithOpAssignment_1()); }
	(rule__ArithmeticDependency__ArithOpAssignment_1)
	{ after(grammarAccess.getArithmeticDependencyAccess().getArithOpAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticDependency__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithmeticDependency__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticDependency__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithmeticDependencyAccess().getParam2Assignment_2()); }
	(rule__ArithmeticDependency__Param2Assignment_2)
	{ after(grammarAccess.getArithmeticDependencyAccess().getParam2Assignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalDependency__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalDependency__Group__0__Impl
	rule__ConditionalDependency__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalDependencyAccess().getIFKeyword_0()); }
	'IF'
	{ after(grammarAccess.getConditionalDependencyAccess().getIFKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalDependency__Group__1__Impl
	rule__ConditionalDependency__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalDependencyAccess().getConditionAssignment_1()); }
	(rule__ConditionalDependency__ConditionAssignment_1)
	{ after(grammarAccess.getConditionalDependencyAccess().getConditionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalDependency__Group__2__Impl
	rule__ConditionalDependency__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalDependencyAccess().getTHENKeyword_2()); }
	'THEN'
	{ after(grammarAccess.getConditionalDependencyAccess().getTHENKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalDependency__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalDependencyAccess().getConsequenceAssignment_3()); }
	(rule__ConditionalDependency__ConsequenceAssignment_3)
	{ after(grammarAccess.getConditionalDependencyAccess().getConsequenceAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Clause__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause__Group_0__0__Impl
	rule__Clause__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClauseAccess().getAtomicElementsAssignment_0_0()); }
	(rule__Clause__AtomicElementsAssignment_0_0)
	{ after(grammarAccess.getClauseAccess().getAtomicElementsAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClauseAccess().getGroup_0_1()); }
	(rule__Clause__Group_0_1__0)*
	{ after(grammarAccess.getClauseAccess().getGroup_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Clause__Group_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause__Group_0_1__0__Impl
	rule__Clause__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClauseAccess().getLogicalOperatorParserRuleCall_0_1_0()); }
	ruleLogicalOperator
	{ after(grammarAccess.getClauseAccess().getLogicalOperatorParserRuleCall_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause__Group_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClauseAccess().getAtomicElementsAssignment_0_1_1()); }
	(rule__Clause__AtomicElementsAssignment_0_1_1)
	{ after(grammarAccess.getClauseAccess().getAtomicElementsAssignment_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Clause__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause__Group_1__0__Impl
	rule__Clause__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClauseAccess().getNotParserRuleCall_1_0()); }
	(ruleNot)?
	{ after(grammarAccess.getClauseAccess().getNotParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause__Group_1__1__Impl
	rule__Clause__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClauseAccess().getLeftParenthesisKeyword_1_1()); }
	'('
	{ after(grammarAccess.getClauseAccess().getLeftParenthesisKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause__Group_1__2__Impl
	rule__Clause__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClauseAccess().getClausesAssignment_1_2()); }
	(rule__Clause__ClausesAssignment_1_2)
	{ after(grammarAccess.getClauseAccess().getClausesAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause__Group_1__3__Impl
	rule__Clause__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClauseAccess().getGroup_1_3()); }
	(rule__Clause__Group_1_3__0)*
	{ after(grammarAccess.getClauseAccess().getGroup_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause__Group_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClauseAccess().getRightParenthesisKeyword_1_4()); }
	')'
	{ after(grammarAccess.getClauseAccess().getRightParenthesisKeyword_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Clause__Group_1_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause__Group_1_3__0__Impl
	rule__Clause__Group_1_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group_1_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClauseAccess().getLogicalOperatorParserRuleCall_1_3_0()); }
	ruleLogicalOperator
	{ after(grammarAccess.getClauseAccess().getLogicalOperatorParserRuleCall_1_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group_1_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause__Group_1_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group_1_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClauseAccess().getClausesAssignment_1_3_1()); }
	(rule__Clause__ClausesAssignment_1_3_1)
	{ after(grammarAccess.getClauseAccess().getClausesAssignment_1_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Clause2__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause2__Group_0__0__Impl
	rule__Clause2__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause2__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClause2Access().getFirstElementAssignment_0_0()); }
	(rule__Clause2__FirstElementAssignment_0_0)
	{ after(grammarAccess.getClause2Access().getFirstElementAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause2__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause2__Group_0__1__Impl
	rule__Clause2__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause2__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClause2Access().getLogicalOpAssignment_0_1()); }
	(rule__Clause2__LogicalOpAssignment_0_1)
	{ after(grammarAccess.getClause2Access().getLogicalOpAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause2__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause2__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause2__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClause2Access().getAdditionalElementsAssignment_0_2()); }
	(rule__Clause2__AdditionalElementsAssignment_0_2)
	{ after(grammarAccess.getClause2Access().getAdditionalElementsAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Clause2__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause2__Group_1__0__Impl
	rule__Clause2__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause2__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClause2Access().getNotParserRuleCall_1_0()); }
	(ruleNot)?
	{ after(grammarAccess.getClause2Access().getNotParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause2__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause2__Group_1__1__Impl
	rule__Clause2__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause2__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClause2Access().getLeftParenthesisKeyword_1_1()); }
	'('
	{ after(grammarAccess.getClause2Access().getLeftParenthesisKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause2__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause2__Group_1__2__Impl
	rule__Clause2__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause2__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClause2Access().getFirstElementAssignment_1_2()); }
	(rule__Clause2__FirstElementAssignment_1_2)
	{ after(grammarAccess.getClause2Access().getFirstElementAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause2__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause2__Group_1__3__Impl
	rule__Clause2__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause2__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClause2Access().getLogicalOpAssignment_1_3()); }
	(rule__Clause2__LogicalOpAssignment_1_3)
	{ after(grammarAccess.getClause2Access().getLogicalOpAssignment_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause2__Group_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause2__Group_1__4__Impl
	rule__Clause2__Group_1__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause2__Group_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClause2Access().getAdditionalElementsAssignment_1_4()); }
	(rule__Clause2__AdditionalElementsAssignment_1_4)
	{ after(grammarAccess.getClause2Access().getAdditionalElementsAssignment_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause2__Group_1__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause2__Group_1__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause2__Group_1__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClause2Access().getRightParenthesisKeyword_1_5()); }
	')'
	{ after(grammarAccess.getClause2Access().getRightParenthesisKeyword_1_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ClauseContinuation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClauseContinuation__Group__0__Impl
	rule__ClauseContinuation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClauseContinuation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClauseContinuationAccess().getLogicalOpAssignment_0()); }
	(rule__ClauseContinuation__LogicalOpAssignment_0)
	{ after(grammarAccess.getClauseContinuationAccess().getLogicalOpAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClauseContinuation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClauseContinuation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClauseContinuation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClauseContinuationAccess().getAdditionalElementsAssignment_1()); }
	(rule__ClauseContinuation__AdditionalElementsAssignment_1)
	{ after(grammarAccess.getClauseContinuationAccess().getAdditionalElementsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Clause3__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause3__Group_0__0__Impl
	rule__Clause3__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause3__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClause3Access().getFirstElementAssignment_0_0()); }
	(rule__Clause3__FirstElementAssignment_0_0)
	{ after(grammarAccess.getClause3Access().getFirstElementAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause3__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause3__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause3__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClause3Access().getClauseContinuationAssignment_0_1()); }
	(rule__Clause3__ClauseContinuationAssignment_0_1)
	{ after(grammarAccess.getClause3Access().getClauseContinuationAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Clause3__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause3__Group_1__0__Impl
	rule__Clause3__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause3__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClause3Access().getNotParserRuleCall_1_0()); }
	(ruleNot)?
	{ after(grammarAccess.getClause3Access().getNotParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause3__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause3__Group_1__1__Impl
	rule__Clause3__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause3__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClause3Access().getLeftParenthesisKeyword_1_1()); }
	'('
	{ after(grammarAccess.getClause3Access().getLeftParenthesisKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause3__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause3__Group_1__2__Impl
	rule__Clause3__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause3__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClause3Access().getFirstElementAssignment_1_2()); }
	(rule__Clause3__FirstElementAssignment_1_2)
	{ after(grammarAccess.getClause3Access().getFirstElementAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause3__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause3__Group_1__3__Impl
	rule__Clause3__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause3__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClause3Access().getClauseContinuationAssignment_1_3()); }
	(rule__Clause3__ClauseContinuationAssignment_1_3)
	{ after(grammarAccess.getClause3Access().getClauseContinuationAssignment_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause3__Group_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause3__Group_1__4__Impl
	rule__Clause3__Group_1__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause3__Group_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClause3Access().getRightParenthesisKeyword_1_4()); }
	')'
	{ after(grammarAccess.getClause3Access().getRightParenthesisKeyword_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause3__Group_1__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause3__Group_1__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause3__Group_1__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClause3Access().getClauseContinuation2Assignment_1_5()); }
	(rule__Clause3__ClauseContinuation2Assignment_1_5)?
	{ after(grammarAccess.getClause3Access().getClauseContinuation2Assignment_1_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Clause3__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause3__Group_2__0__Impl
	rule__Clause3__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause3__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClause3Access().getFirstElementAssignment_2_0()); }
	(rule__Clause3__FirstElementAssignment_2_0)
	{ after(grammarAccess.getClause3Access().getFirstElementAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause3__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause3__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause3__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClause3Access().getClauseContinuationAssignment_2_1()); }
	(rule__Clause3__ClauseContinuationAssignment_2_1)?
	{ after(grammarAccess.getClause3Access().getClauseContinuationAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PositiveClauseContinuation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositiveClauseContinuation__Group__0__Impl
	rule__PositiveClauseContinuation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClauseContinuation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositiveClauseContinuationAccess().getLogicalOpAssignment_0()); }
	(rule__PositiveClauseContinuation__LogicalOpAssignment_0)
	{ after(grammarAccess.getPositiveClauseContinuationAccess().getLogicalOpAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClauseContinuation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositiveClauseContinuation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClauseContinuation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositiveClauseContinuationAccess().getAdditionalElementsAssignment_1()); }
	(rule__PositiveClauseContinuation__AdditionalElementsAssignment_1)
	{ after(grammarAccess.getPositiveClauseContinuationAccess().getAdditionalElementsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PositiveClause3__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositiveClause3__Group_0__0__Impl
	rule__PositiveClause3__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause3__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositiveClause3Access().getPositiveFirstElementAssignment_0_0()); }
	(rule__PositiveClause3__PositiveFirstElementAssignment_0_0)
	{ after(grammarAccess.getPositiveClause3Access().getPositiveFirstElementAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause3__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositiveClause3__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause3__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositiveClause3Access().getPositiveClauseContinuationAssignment_0_1()); }
	(rule__PositiveClause3__PositiveClauseContinuationAssignment_0_1)
	{ after(grammarAccess.getPositiveClause3Access().getPositiveClauseContinuationAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PositiveClause3__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositiveClause3__Group_1__0__Impl
	rule__PositiveClause3__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause3__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositiveClause3Access().getNotParserRuleCall_1_0()); }
	(ruleNot)?
	{ after(grammarAccess.getPositiveClause3Access().getNotParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause3__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositiveClause3__Group_1__1__Impl
	rule__PositiveClause3__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause3__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositiveClause3Access().getLeftParenthesisKeyword_1_1()); }
	'('
	{ after(grammarAccess.getPositiveClause3Access().getLeftParenthesisKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause3__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositiveClause3__Group_1__2__Impl
	rule__PositiveClause3__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause3__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositiveClause3Access().getPositiveFirstElementAssignment_1_2()); }
	(rule__PositiveClause3__PositiveFirstElementAssignment_1_2)
	{ after(grammarAccess.getPositiveClause3Access().getPositiveFirstElementAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause3__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositiveClause3__Group_1__3__Impl
	rule__PositiveClause3__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause3__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositiveClause3Access().getPositiveClauseContinuationAssignment_1_3()); }
	(rule__PositiveClause3__PositiveClauseContinuationAssignment_1_3)
	{ after(grammarAccess.getPositiveClause3Access().getPositiveClauseContinuationAssignment_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause3__Group_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositiveClause3__Group_1__4__Impl
	rule__PositiveClause3__Group_1__5
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause3__Group_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositiveClause3Access().getRightParenthesisKeyword_1_4()); }
	')'
	{ after(grammarAccess.getPositiveClause3Access().getRightParenthesisKeyword_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause3__Group_1__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositiveClause3__Group_1__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause3__Group_1__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositiveClause3Access().getPositiveClauseContinuation2Assignment_1_5()); }
	(rule__PositiveClause3__PositiveClauseContinuation2Assignment_1_5)?
	{ after(grammarAccess.getPositiveClause3Access().getPositiveClauseContinuation2Assignment_1_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PositiveClause3__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositiveClause3__Group_2__0__Impl
	rule__PositiveClause3__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause3__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositiveClause3Access().getPredefinedDependency2ParserRuleCall_2_0()); }
	rulePredefinedDependency2
	{ after(grammarAccess.getPositiveClause3Access().getPredefinedDependency2ParserRuleCall_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause3__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositiveClause3__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause3__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositiveClause3Access().getPositiveClauseContinuationAssignment_2_1()); }
	(rule__PositiveClause3__PositiveClauseContinuationAssignment_2_1)?
	{ after(grammarAccess.getPositiveClause3Access().getPositiveClauseContinuationAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PredefinedDependency2__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredefinedDependency2__Group__0__Impl
	rule__PredefinedDependency2__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency2__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredefinedDependency2Access().getNotParserRuleCall_0()); }
	(ruleNot)?
	{ after(grammarAccess.getPredefinedDependency2Access().getNotParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency2__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredefinedDependency2__Group__1__Impl
	rule__PredefinedDependency2__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency2__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredefinedDependency2Access().getPredefDepTypeAssignment_1()); }
	(rule__PredefinedDependency2__PredefDepTypeAssignment_1)
	{ after(grammarAccess.getPredefinedDependency2Access().getPredefDepTypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency2__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredefinedDependency2__Group__2__Impl
	rule__PredefinedDependency2__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency2__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredefinedDependency2Access().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getPredefinedDependency2Access().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency2__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredefinedDependency2__Group__3__Impl
	rule__PredefinedDependency2__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency2__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredefinedDependency2Access().getPredefDepClausesAssignment_3()); }
	(rule__PredefinedDependency2__PredefDepClausesAssignment_3)
	{ after(grammarAccess.getPredefinedDependency2Access().getPredefDepClausesAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency2__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredefinedDependency2__Group__4__Impl
	rule__PredefinedDependency2__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency2__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getPredefinedDependency2Access().getGroup_4()); }
		(rule__PredefinedDependency2__Group_4__0)
		{ after(grammarAccess.getPredefinedDependency2Access().getGroup_4()); }
	)
	(
		{ before(grammarAccess.getPredefinedDependency2Access().getGroup_4()); }
		(rule__PredefinedDependency2__Group_4__0)*
		{ after(grammarAccess.getPredefinedDependency2Access().getGroup_4()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency2__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredefinedDependency2__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency2__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredefinedDependency2Access().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getPredefinedDependency2Access().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PredefinedDependency2__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredefinedDependency2__Group_4__0__Impl
	rule__PredefinedDependency2__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency2__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredefinedDependency2Access().getCommaKeyword_4_0()); }
	','
	{ after(grammarAccess.getPredefinedDependency2Access().getCommaKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency2__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredefinedDependency2__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency2__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredefinedDependency2Access().getPredefDepClausesAssignment_4_1()); }
	(rule__PredefinedDependency2__PredefDepClausesAssignment_4_1)
	{ after(grammarAccess.getPredefinedDependency2Access().getPredefDepClausesAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PositiveClause2__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositiveClause2__Group_0__0__Impl
	rule__PositiveClause2__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause2__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositiveClause2Access().getFirstElementAssignment_0_0()); }
	(rule__PositiveClause2__FirstElementAssignment_0_0)
	{ after(grammarAccess.getPositiveClause2Access().getFirstElementAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause2__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositiveClause2__Group_0__1__Impl
	rule__PositiveClause2__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause2__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositiveClause2Access().getLogicalOpAssignment_0_1()); }
	(rule__PositiveClause2__LogicalOpAssignment_0_1)
	{ after(grammarAccess.getPositiveClause2Access().getLogicalOpAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause2__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositiveClause2__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause2__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositiveClause2Access().getAdditionalElementsAssignment_0_2()); }
	(rule__PositiveClause2__AdditionalElementsAssignment_0_2)
	{ after(grammarAccess.getPositiveClause2Access().getAdditionalElementsAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PositiveClause2__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositiveClause2__Group_1__0__Impl
	rule__PositiveClause2__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause2__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositiveClause2Access().getNotParserRuleCall_1_0()); }
	(ruleNot)?
	{ after(grammarAccess.getPositiveClause2Access().getNotParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause2__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositiveClause2__Group_1__1__Impl
	rule__PositiveClause2__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause2__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositiveClause2Access().getLeftParenthesisKeyword_1_1()); }
	'('
	{ after(grammarAccess.getPositiveClause2Access().getLeftParenthesisKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause2__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositiveClause2__Group_1__2__Impl
	rule__PositiveClause2__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause2__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositiveClause2Access().getFirstElementAssignment_1_2()); }
	(rule__PositiveClause2__FirstElementAssignment_1_2)
	{ after(grammarAccess.getPositiveClause2Access().getFirstElementAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause2__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositiveClause2__Group_1__3__Impl
	rule__PositiveClause2__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause2__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositiveClause2Access().getLogicalOpAssignment_1_3()); }
	(rule__PositiveClause2__LogicalOpAssignment_1_3)
	{ after(grammarAccess.getPositiveClause2Access().getLogicalOpAssignment_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause2__Group_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositiveClause2__Group_1__4__Impl
	rule__PositiveClause2__Group_1__5
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause2__Group_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositiveClause2Access().getAdditionalElementsAssignment_1_4()); }
	(rule__PositiveClause2__AdditionalElementsAssignment_1_4)
	{ after(grammarAccess.getPositiveClause2Access().getAdditionalElementsAssignment_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause2__Group_1__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositiveClause2__Group_1__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause2__Group_1__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositiveClause2Access().getRightParenthesisKeyword_1_5()); }
	')'
	{ after(grammarAccess.getPositiveClause2Access().getRightParenthesisKeyword_1_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NegativeAtomic__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NegativeAtomic__Group_0__0__Impl
	rule__NegativeAtomic__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NegativeAtomic__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNegativeAtomicAccess().getNotParserRuleCall_0_0()); }
	ruleNot
	{ after(grammarAccess.getNegativeAtomicAccess().getNotParserRuleCall_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NegativeAtomic__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NegativeAtomic__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NegativeAtomic__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNegativeAtomicAccess().getParamParserRuleCall_0_1()); }
	ruleParam
	{ after(grammarAccess.getNegativeAtomicAccess().getParamParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NegativeAtomic__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NegativeAtomic__Group_1__0__Impl
	rule__NegativeAtomic__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NegativeAtomic__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNegativeAtomicAccess().getNotParserRuleCall_1_0()); }
	ruleNot
	{ after(grammarAccess.getNegativeAtomicAccess().getNotParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NegativeAtomic__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NegativeAtomic__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NegativeAtomic__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNegativeAtomicAccess().getParamAssignmentParserRuleCall_1_1()); }
	ruleParamAssignment
	{ after(grammarAccess.getNegativeAtomicAccess().getParamAssignmentParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParamAssignment__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParamAssignment__Group__0__Impl
	rule__ParamAssignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamAssignment__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamAssignmentAccess().getParamParserRuleCall_0()); }
	ruleParam
	{ after(grammarAccess.getParamAssignmentAccess().getParamParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamAssignment__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParamAssignment__Group__1__Impl
	rule__ParamAssignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamAssignment__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamAssignmentAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getParamAssignmentAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamAssignment__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParamAssignment__Group__2__Impl
	rule__ParamAssignment__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamAssignment__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamAssignmentAccess().getParamValuesAssignment_2()); }
	(rule__ParamAssignment__ParamValuesAssignment_2)
	{ after(grammarAccess.getParamAssignmentAccess().getParamValuesAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamAssignment__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParamAssignment__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamAssignment__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamAssignmentAccess().getGroup_3()); }
	(rule__ParamAssignment__Group_3__0)*
	{ after(grammarAccess.getParamAssignmentAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParamAssignment__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParamAssignment__Group_3__0__Impl
	rule__ParamAssignment__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamAssignment__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamAssignmentAccess().getVerticalLineKeyword_3_0()); }
	'|'
	{ after(grammarAccess.getParamAssignmentAccess().getVerticalLineKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamAssignment__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParamAssignment__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamAssignment__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamAssignmentAccess().getParamValuesAssignment_3_1()); }
	(rule__ParamAssignment__ParamValuesAssignment_3_1)
	{ after(grammarAccess.getParamAssignmentAccess().getParamValuesAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PositiveClause__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositiveClause__Group__0__Impl
	rule__PositiveClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositiveClauseAccess().getPositiveClausesAssignment_0()); }
	(rule__PositiveClause__PositiveClausesAssignment_0)
	{ after(grammarAccess.getPositiveClauseAccess().getPositiveClausesAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositiveClause__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositiveClauseAccess().getGroup_1()); }
	(rule__PositiveClause__Group_1__0)*
	{ after(grammarAccess.getPositiveClauseAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PositiveClause__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositiveClause__Group_1__0__Impl
	rule__PositiveClause__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositiveClauseAccess().getLogicalOperatorParserRuleCall_1_0()); }
	ruleLogicalOperator
	{ after(grammarAccess.getPositiveClauseAccess().getLogicalOperatorParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositiveClause__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositiveClauseAccess().getPositiveClausesAssignment_1_1()); }
	(rule__PositiveClause__PositiveClausesAssignment_1_1)
	{ after(grammarAccess.getPositiveClauseAccess().getPositiveClausesAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PositiveFullClause__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositiveFullClause__Group__0__Impl
	rule__PositiveFullClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveFullClause__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositiveFullClauseAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getPositiveFullClauseAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveFullClause__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositiveFullClause__Group__1__Impl
	rule__PositiveFullClause__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveFullClause__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositiveFullClauseAccess().getPositiveClauseParserRuleCall_1()); }
	rulePositiveClause
	{ after(grammarAccess.getPositiveFullClauseAccess().getPositiveClauseParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveFullClause__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositiveFullClause__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveFullClause__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositiveFullClauseAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getPositiveFullClauseAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PredefinedDependency__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredefinedDependency__Group__0__Impl
	rule__PredefinedDependency__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredefinedDependencyAccess().getNotParserRuleCall_0()); }
	(ruleNot)?
	{ after(grammarAccess.getPredefinedDependencyAccess().getNotParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredefinedDependency__Group__1__Impl
	rule__PredefinedDependency__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredefinedDependencyAccess().getPredefDepTypeAssignment_1()); }
	(rule__PredefinedDependency__PredefDepTypeAssignment_1)
	{ after(grammarAccess.getPredefinedDependencyAccess().getPredefDepTypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredefinedDependency__Group__2__Impl
	rule__PredefinedDependency__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredefinedDependencyAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getPredefinedDependencyAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredefinedDependency__Group__3__Impl
	rule__PredefinedDependency__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredefinedDependencyAccess().getPredefDepClausesAssignment_3()); }
	(rule__PredefinedDependency__PredefDepClausesAssignment_3)
	{ after(grammarAccess.getPredefinedDependencyAccess().getPredefDepClausesAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredefinedDependency__Group__4__Impl
	rule__PredefinedDependency__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getPredefinedDependencyAccess().getGroup_4()); }
		(rule__PredefinedDependency__Group_4__0)
		{ after(grammarAccess.getPredefinedDependencyAccess().getGroup_4()); }
	)
	(
		{ before(grammarAccess.getPredefinedDependencyAccess().getGroup_4()); }
		(rule__PredefinedDependency__Group_4__0)*
		{ after(grammarAccess.getPredefinedDependencyAccess().getGroup_4()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredefinedDependency__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredefinedDependencyAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getPredefinedDependencyAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PredefinedDependency__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredefinedDependency__Group_4__0__Impl
	rule__PredefinedDependency__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredefinedDependencyAccess().getCommaKeyword_4_0()); }
	','
	{ after(grammarAccess.getPredefinedDependencyAccess().getCommaKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredefinedDependency__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredefinedDependencyAccess().getPredefDepClausesAssignment_4_1()); }
	(rule__PredefinedDependency__PredefDepClausesAssignment_4_1)
	{ after(grammarAccess.getPredefinedDependencyAccess().getPredefDepClausesAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__DependenciesAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getDependenciesDependencyParserRuleCall_0()); }
		ruleDependency
		{ after(grammarAccess.getModelAccess().getDependenciesDependencyParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dependency__DepAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDependencyAccess().getDepAlternatives_0_0()); }
		(rule__Dependency__DepAlternatives_0_0)
		{ after(grammarAccess.getDependencyAccess().getDepAlternatives_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticDependency__Param1Assignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArithmeticDependencyAccess().getParam1IDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getArithmeticDependencyAccess().getParam1IDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticDependency__ArithOpAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArithmeticDependencyAccess().getArithOpArithmeticOperatorParserRuleCall_1_0()); }
		ruleArithmeticOperator
		{ after(grammarAccess.getArithmeticDependencyAccess().getArithOpArithmeticOperatorParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticDependency__Param2Assignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArithmeticDependencyAccess().getParam2IDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getArithmeticDependencyAccess().getParam2IDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__ConditionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalDependencyAccess().getConditionPredicate2ParserRuleCall_1_0()); }
		rulePredicate2
		{ after(grammarAccess.getConditionalDependencyAccess().getConditionPredicate2ParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__ConsequenceAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalDependencyAccess().getConsequencePredicate2ParserRuleCall_3_0()); }
		rulePredicate2
		{ after(grammarAccess.getConditionalDependencyAccess().getConsequencePredicate2ParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__AtomicElementsAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClauseAccess().getAtomicElementsAlternatives_0_0_0()); }
		(rule__Clause__AtomicElementsAlternatives_0_0_0)
		{ after(grammarAccess.getClauseAccess().getAtomicElementsAlternatives_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__AtomicElementsAssignment_0_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClauseAccess().getAtomicElementsAlternatives_0_1_1_0()); }
		(rule__Clause__AtomicElementsAlternatives_0_1_1_0)
		{ after(grammarAccess.getClauseAccess().getAtomicElementsAlternatives_0_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__ClausesAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClauseAccess().getClausesClauseParserRuleCall_1_2_0()); }
		ruleClause
		{ after(grammarAccess.getClauseAccess().getClausesClauseParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__ClausesAssignment_1_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClauseAccess().getClausesClauseParserRuleCall_1_3_1_0()); }
		ruleClause
		{ after(grammarAccess.getClauseAccess().getClausesClauseParserRuleCall_1_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause2__FirstElementAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClause2Access().getFirstElementAlternatives_0_0_0()); }
		(rule__Clause2__FirstElementAlternatives_0_0_0)
		{ after(grammarAccess.getClause2Access().getFirstElementAlternatives_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause2__LogicalOpAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClause2Access().getLogicalOpLogicalOperatorParserRuleCall_0_1_0()); }
		ruleLogicalOperator
		{ after(grammarAccess.getClause2Access().getLogicalOpLogicalOperatorParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause2__AdditionalElementsAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClause2Access().getAdditionalElementsAlternatives_0_2_0()); }
		(rule__Clause2__AdditionalElementsAlternatives_0_2_0)
		{ after(grammarAccess.getClause2Access().getAdditionalElementsAlternatives_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause2__FirstElementAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClause2Access().getFirstElementAlternatives_1_2_0()); }
		(rule__Clause2__FirstElementAlternatives_1_2_0)
		{ after(grammarAccess.getClause2Access().getFirstElementAlternatives_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause2__LogicalOpAssignment_1_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClause2Access().getLogicalOpLogicalOperatorParserRuleCall_1_3_0()); }
		ruleLogicalOperator
		{ after(grammarAccess.getClause2Access().getLogicalOpLogicalOperatorParserRuleCall_1_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause2__AdditionalElementsAssignment_1_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClause2Access().getAdditionalElementsAlternatives_1_4_0()); }
		(rule__Clause2__AdditionalElementsAlternatives_1_4_0)
		{ after(grammarAccess.getClause2Access().getAdditionalElementsAlternatives_1_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClauseContinuation__LogicalOpAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClauseContinuationAccess().getLogicalOpLogicalOperatorParserRuleCall_0_0()); }
		ruleLogicalOperator
		{ after(grammarAccess.getClauseContinuationAccess().getLogicalOpLogicalOperatorParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClauseContinuation__AdditionalElementsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClauseContinuationAccess().getAdditionalElementsAlternatives_1_0()); }
		(rule__ClauseContinuation__AdditionalElementsAlternatives_1_0)
		{ after(grammarAccess.getClauseContinuationAccess().getAdditionalElementsAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause3__FirstElementAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClause3Access().getFirstElementAlternatives_0_0_0()); }
		(rule__Clause3__FirstElementAlternatives_0_0_0)
		{ after(grammarAccess.getClause3Access().getFirstElementAlternatives_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause3__ClauseContinuationAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClause3Access().getClauseContinuationClauseContinuationParserRuleCall_0_1_0()); }
		ruleClauseContinuation
		{ after(grammarAccess.getClause3Access().getClauseContinuationClauseContinuationParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause3__FirstElementAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClause3Access().getFirstElementAlternatives_1_2_0()); }
		(rule__Clause3__FirstElementAlternatives_1_2_0)
		{ after(grammarAccess.getClause3Access().getFirstElementAlternatives_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause3__ClauseContinuationAssignment_1_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClause3Access().getClauseContinuationClauseContinuationParserRuleCall_1_3_0()); }
		ruleClauseContinuation
		{ after(grammarAccess.getClause3Access().getClauseContinuationClauseContinuationParserRuleCall_1_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause3__ClauseContinuation2Assignment_1_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClause3Access().getClauseContinuation2ClauseContinuationParserRuleCall_1_5_0()); }
		ruleClauseContinuation
		{ after(grammarAccess.getClause3Access().getClauseContinuation2ClauseContinuationParserRuleCall_1_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause3__FirstElementAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClause3Access().getFirstElementPredefinedDependency2ParserRuleCall_2_0_0()); }
		rulePredefinedDependency2
		{ after(grammarAccess.getClause3Access().getFirstElementPredefinedDependency2ParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause3__ClauseContinuationAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClause3Access().getClauseContinuationClauseContinuationParserRuleCall_2_1_0()); }
		ruleClauseContinuation
		{ after(grammarAccess.getClause3Access().getClauseContinuationClauseContinuationParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClauseContinuation__LogicalOpAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveClauseContinuationAccess().getLogicalOpLogicalOperatorParserRuleCall_0_0()); }
		ruleLogicalOperator
		{ after(grammarAccess.getPositiveClauseContinuationAccess().getLogicalOpLogicalOperatorParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClauseContinuation__AdditionalElementsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveClauseContinuationAccess().getAdditionalElementsAlternatives_1_0()); }
		(rule__PositiveClauseContinuation__AdditionalElementsAlternatives_1_0)
		{ after(grammarAccess.getPositiveClauseContinuationAccess().getAdditionalElementsAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause3__PositiveFirstElementAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveClause3Access().getPositiveFirstElementPositiveAtomicParserRuleCall_0_0_0()); }
		rulePositiveAtomic
		{ after(grammarAccess.getPositiveClause3Access().getPositiveFirstElementPositiveAtomicParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause3__PositiveClauseContinuationAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveClause3Access().getPositiveClauseContinuationPositiveClauseContinuationParserRuleCall_0_1_0()); }
		rulePositiveClauseContinuation
		{ after(grammarAccess.getPositiveClause3Access().getPositiveClauseContinuationPositiveClauseContinuationParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause3__PositiveFirstElementAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveClause3Access().getPositiveFirstElementAlternatives_1_2_0()); }
		(rule__PositiveClause3__PositiveFirstElementAlternatives_1_2_0)
		{ after(grammarAccess.getPositiveClause3Access().getPositiveFirstElementAlternatives_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause3__PositiveClauseContinuationAssignment_1_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveClause3Access().getPositiveClauseContinuationPositiveClauseContinuationParserRuleCall_1_3_0()); }
		rulePositiveClauseContinuation
		{ after(grammarAccess.getPositiveClause3Access().getPositiveClauseContinuationPositiveClauseContinuationParserRuleCall_1_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause3__PositiveClauseContinuation2Assignment_1_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveClause3Access().getPositiveClauseContinuation2PositiveClauseContinuationParserRuleCall_1_5_0()); }
		rulePositiveClauseContinuation
		{ after(grammarAccess.getPositiveClause3Access().getPositiveClauseContinuation2PositiveClauseContinuationParserRuleCall_1_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause3__PositiveClauseContinuationAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveClause3Access().getPositiveClauseContinuationPositiveClauseContinuationParserRuleCall_2_1_0()); }
		rulePositiveClauseContinuation
		{ after(grammarAccess.getPositiveClause3Access().getPositiveClauseContinuationPositiveClauseContinuationParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency2__PredefDepTypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredefinedDependency2Access().getPredefDepTypeAlternatives_1_0()); }
		(rule__PredefinedDependency2__PredefDepTypeAlternatives_1_0)
		{ after(grammarAccess.getPredefinedDependency2Access().getPredefDepTypeAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency2__PredefDepClausesAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredefinedDependency2Access().getPredefDepClausesAlternatives_3_0()); }
		(rule__PredefinedDependency2__PredefDepClausesAlternatives_3_0)
		{ after(grammarAccess.getPredefinedDependency2Access().getPredefDepClausesAlternatives_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency2__PredefDepClausesAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredefinedDependency2Access().getPredefDepClausesAlternatives_4_1_0()); }
		(rule__PredefinedDependency2__PredefDepClausesAlternatives_4_1_0)
		{ after(grammarAccess.getPredefinedDependency2Access().getPredefDepClausesAlternatives_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause2__FirstElementAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveClause2Access().getFirstElementPositiveAtomicParserRuleCall_0_0_0()); }
		rulePositiveAtomic
		{ after(grammarAccess.getPositiveClause2Access().getFirstElementPositiveAtomicParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause2__LogicalOpAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveClause2Access().getLogicalOpLogicalOperatorParserRuleCall_0_1_0()); }
		ruleLogicalOperator
		{ after(grammarAccess.getPositiveClause2Access().getLogicalOpLogicalOperatorParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause2__AdditionalElementsAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveClause2Access().getAdditionalElementsAlternatives_0_2_0()); }
		(rule__PositiveClause2__AdditionalElementsAlternatives_0_2_0)
		{ after(grammarAccess.getPositiveClause2Access().getAdditionalElementsAlternatives_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause2__FirstElementAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveClause2Access().getFirstElementPositiveAtomicParserRuleCall_1_2_0()); }
		rulePositiveAtomic
		{ after(grammarAccess.getPositiveClause2Access().getFirstElementPositiveAtomicParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause2__LogicalOpAssignment_1_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveClause2Access().getLogicalOpLogicalOperatorParserRuleCall_1_3_0()); }
		ruleLogicalOperator
		{ after(grammarAccess.getPositiveClause2Access().getLogicalOpLogicalOperatorParserRuleCall_1_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause2__AdditionalElementsAssignment_1_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveClause2Access().getAdditionalElementsAlternatives_1_4_0()); }
		(rule__PositiveClause2__AdditionalElementsAlternatives_1_4_0)
		{ after(grammarAccess.getPositiveClause2Access().getAdditionalElementsAlternatives_1_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Param__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParamAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getParamAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamAssignment__ParamValuesAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParamAssignmentAccess().getParamValuesSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getParamAssignmentAccess().getParamValuesSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamAssignment__ParamValuesAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParamAssignmentAccess().getParamValuesSTRINGTerminalRuleCall_3_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getParamAssignmentAccess().getParamValuesSTRINGTerminalRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause__PositiveClausesAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveClauseAccess().getPositiveClausesPositiveAtomicParserRuleCall_0_0()); }
		rulePositiveAtomic
		{ after(grammarAccess.getPositiveClauseAccess().getPositiveClausesPositiveAtomicParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause__PositiveClausesAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveClauseAccess().getPositiveClausesAlternatives_1_1_0()); }
		(rule__PositiveClause__PositiveClausesAlternatives_1_1_0)
		{ after(grammarAccess.getPositiveClauseAccess().getPositiveClausesAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__PredefDepTypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredefinedDependencyAccess().getPredefDepTypeAlternatives_1_0()); }
		(rule__PredefinedDependency__PredefDepTypeAlternatives_1_0)
		{ after(grammarAccess.getPredefinedDependencyAccess().getPredefDepTypeAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__PredefDepClausesAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredefinedDependencyAccess().getPredefDepClausesAlternatives_3_0()); }
		(rule__PredefinedDependency__PredefDepClausesAlternatives_3_0)
		{ after(grammarAccess.getPredefinedDependencyAccess().getPredefDepClausesAlternatives_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__PredefDepClausesAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredefinedDependencyAccess().getPredefDepClausesAlternatives_4_1_0()); }
		(rule__PredefinedDependency__PredefDepClausesAlternatives_4_1_0)
		{ after(grammarAccess.getPredefinedDependencyAccess().getPredefDepClausesAlternatives_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_NL : ('\r'? '\n')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
