/*
 * generated by Xtext 2.19.0
 */
grammar InternalInterparameterDependenciesLanguage;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
}

@lexer::header {
package es.us.isa.interparamdep.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package es.us.isa.interparamdep.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import es.us.isa.interparamdep.services.InterparameterDependenciesLanguageGrammarAccess;

}
@parser::members {
	private InterparameterDependenciesLanguageGrammarAccess grammarAccess;

	public void setGrammarAccess(InterparameterDependenciesLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getDependenciesAssignment()); }
		(rule__Model__DependenciesAssignment)*
		{ after(grammarAccess.getModelAccess().getDependenciesAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDependency
entryRuleDependency
:
{ before(grammarAccess.getDependencyRule()); }
	 ruleDependency
{ after(grammarAccess.getDependencyRule()); } 
	 EOF 
;

// Rule Dependency
ruleDependency 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDependencyAccess().getGroup()); }
		(rule__Dependency__Group__0)
		{ after(grammarAccess.getDependencyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArithmeticOperator
entryRuleArithmeticOperator
:
{ before(grammarAccess.getArithmeticOperatorRule()); }
	 ruleArithmeticOperator
{ after(grammarAccess.getArithmeticOperatorRule()); } 
	 EOF 
;

// Rule ArithmeticOperator
ruleArithmeticOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArithmeticOperatorAccess().getAlternatives()); }
		(rule__ArithmeticOperator__Alternatives)
		{ after(grammarAccess.getArithmeticOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMathOperator
entryRuleMathOperator
:
{ before(grammarAccess.getMathOperatorRule()); }
	 ruleMathOperator
{ after(grammarAccess.getMathOperatorRule()); } 
	 EOF 
;

// Rule MathOperator
ruleMathOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMathOperatorAccess().getAlternatives()); }
		(rule__MathOperator__Alternatives)
		{ after(grammarAccess.getMathOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNot
entryRuleNot
:
{ before(grammarAccess.getNotRule()); }
	 ruleNot
{ after(grammarAccess.getNotRule()); } 
	 EOF 
;

// Rule Not
ruleNot 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNotAccess().getNOTKeyword()); }
		'NOT'
		{ after(grammarAccess.getNotAccess().getNOTKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLogicalOperator
entryRuleLogicalOperator
:
{ before(grammarAccess.getLogicalOperatorRule()); }
	 ruleLogicalOperator
{ after(grammarAccess.getLogicalOperatorRule()); } 
	 EOF 
;

// Rule LogicalOperator
ruleLogicalOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLogicalOperatorAccess().getAlternatives()); }
		(rule__LogicalOperator__Alternatives)
		{ after(grammarAccess.getLogicalOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComparisonDependency
entryRuleComparisonDependency
:
{ before(grammarAccess.getComparisonDependencyRule()); }
	 ruleComparisonDependency
{ after(grammarAccess.getComparisonDependencyRule()); } 
	 EOF 
;

// Rule ComparisonDependency
ruleComparisonDependency 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComparisonDependencyAccess().getGroup()); }
		(rule__ComparisonDependency__Group__0)
		{ after(grammarAccess.getComparisonDependencyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArithmeticDependency
entryRuleArithmeticDependency
:
{ before(grammarAccess.getArithmeticDependencyRule()); }
	 ruleArithmeticDependency
{ after(grammarAccess.getArithmeticDependencyRule()); } 
	 EOF 
;

// Rule ArithmeticDependency
ruleArithmeticDependency 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArithmeticDependencyAccess().getGroup()); }
		(rule__ArithmeticDependency__Group__0)
		{ after(grammarAccess.getArithmeticDependencyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOperation
entryRuleOperation
:
{ before(grammarAccess.getOperationRule()); }
	 ruleOperation
{ after(grammarAccess.getOperationRule()); } 
	 EOF 
;

// Rule Operation
ruleOperation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOperationAccess().getAlternatives()); }
		(rule__Operation__Alternatives)
		{ after(grammarAccess.getOperationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOperationContinuation
entryRuleOperationContinuation
:
{ before(grammarAccess.getOperationContinuationRule()); }
	 ruleOperationContinuation
{ after(grammarAccess.getOperationContinuationRule()); } 
	 EOF 
;

// Rule OperationContinuation
ruleOperationContinuation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOperationContinuationAccess().getGroup()); }
		(rule__OperationContinuation__Group__0)
		{ after(grammarAccess.getOperationContinuationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConditionalDependency
entryRuleConditionalDependency
:
{ before(grammarAccess.getConditionalDependencyRule()); }
	 ruleConditionalDependency
{ after(grammarAccess.getConditionalDependencyRule()); } 
	 EOF 
;

// Rule ConditionalDependency
ruleConditionalDependency 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionalDependencyAccess().getGroup()); }
		(rule__ConditionalDependency__Group__0)
		{ after(grammarAccess.getConditionalDependencyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAtomic
entryRuleAtomic
:
{ before(grammarAccess.getAtomicRule()); }
	 ruleAtomic
{ after(grammarAccess.getAtomicRule()); } 
	 EOF 
;

// Rule Atomic
ruleAtomic 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAtomicAccess().getAlternatives()); }
		(rule__Atomic__Alternatives)
		{ after(grammarAccess.getAtomicAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParam
entryRuleParam
:
{ before(grammarAccess.getParamRule()); }
	 ruleParam
{ after(grammarAccess.getParamRule()); } 
	 EOF 
;

// Rule Param
ruleParam 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParamAccess().getNameAssignment()); }
		(rule__Param__NameAssignment)
		{ after(grammarAccess.getParamAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParamAssignment
entryRuleParamAssignment
:
{ before(grammarAccess.getParamAssignmentRule()); }
	 ruleParamAssignment
{ after(grammarAccess.getParamAssignmentRule()); } 
	 EOF 
;

// Rule ParamAssignment
ruleParamAssignment 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParamAssignmentAccess().getAlternatives()); }
		(rule__ParamAssignment__Alternatives)
		{ after(grammarAccess.getParamAssignmentAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClause
entryRuleClause
:
{ before(grammarAccess.getClauseRule()); }
	 ruleClause
{ after(grammarAccess.getClauseRule()); } 
	 EOF 
;

// Rule Clause
ruleClause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClauseAccess().getAlternatives()); }
		(rule__Clause__Alternatives)
		{ after(grammarAccess.getClauseAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClauseContinuation
entryRuleClauseContinuation
:
{ before(grammarAccess.getClauseContinuationRule()); }
	 ruleClauseContinuation
{ after(grammarAccess.getClauseContinuationRule()); } 
	 EOF 
;

// Rule ClauseContinuation
ruleClauseContinuation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClauseContinuationAccess().getGroup()); }
		(rule__ClauseContinuation__Group__0)
		{ after(grammarAccess.getClauseContinuationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePredefinedDependency
entryRulePredefinedDependency
:
{ before(grammarAccess.getPredefinedDependencyRule()); }
	 rulePredefinedDependency
{ after(grammarAccess.getPredefinedDependencyRule()); } 
	 EOF 
;

// Rule PredefinedDependency
rulePredefinedDependency 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPredefinedDependencyAccess().getGroup()); }
		(rule__PredefinedDependency__Group__0)
		{ after(grammarAccess.getPredefinedDependencyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePositiveAtomic
entryRulePositiveAtomic
:
{ before(grammarAccess.getPositiveAtomicRule()); }
	 rulePositiveAtomic
{ after(grammarAccess.getPositiveAtomicRule()); } 
	 EOF 
;

// Rule PositiveAtomic
rulePositiveAtomic 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPositiveAtomicAccess().getAlternatives()); }
		(rule__PositiveAtomic__Alternatives)
		{ after(grammarAccess.getPositiveAtomicAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePositiveClause
entryRulePositiveClause
:
{ before(grammarAccess.getPositiveClauseRule()); }
	 rulePositiveClause
{ after(grammarAccess.getPositiveClauseRule()); } 
	 EOF 
;

// Rule PositiveClause
rulePositiveClause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPositiveClauseAccess().getAlternatives()); }
		(rule__PositiveClause__Alternatives)
		{ after(grammarAccess.getPositiveClauseAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePositiveClauseContinuation
entryRulePositiveClauseContinuation
:
{ before(grammarAccess.getPositiveClauseContinuationRule()); }
	 rulePositiveClauseContinuation
{ after(grammarAccess.getPositiveClauseContinuationRule()); } 
	 EOF 
;

// Rule PositiveClauseContinuation
rulePositiveClauseContinuation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPositiveClauseContinuationAccess().getGroup()); }
		(rule__PositiveClauseContinuation__Group__0)
		{ after(grammarAccess.getPositiveClauseContinuationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePositivePredefinedDependency
entryRulePositivePredefinedDependency
:
{ before(grammarAccess.getPositivePredefinedDependencyRule()); }
	 rulePositivePredefinedDependency
{ after(grammarAccess.getPositivePredefinedDependencyRule()); } 
	 EOF 
;

// Rule PositivePredefinedDependency
rulePositivePredefinedDependency 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPositivePredefinedDependencyAccess().getGroup()); }
		(rule__PositivePredefinedDependency__Group__0)
		{ after(grammarAccess.getPositivePredefinedDependencyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dependency__DepAlternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDependencyAccess().getDepComparisonDependencyParserRuleCall_0_0_0()); }
		ruleComparisonDependency
		{ after(grammarAccess.getDependencyAccess().getDepComparisonDependencyParserRuleCall_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getDependencyAccess().getDepArithmeticDependencyParserRuleCall_0_0_1()); }
		ruleArithmeticDependency
		{ after(grammarAccess.getDependencyAccess().getDepArithmeticDependencyParserRuleCall_0_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getDependencyAccess().getDepConditionalDependencyParserRuleCall_0_0_2()); }
		ruleConditionalDependency
		{ after(grammarAccess.getDependencyAccess().getDepConditionalDependencyParserRuleCall_0_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getDependencyAccess().getDepPredefinedDependencyParserRuleCall_0_0_3()); }
		rulePredefinedDependency
		{ after(grammarAccess.getDependencyAccess().getDepPredefinedDependencyParserRuleCall_0_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArithmeticOperatorAccess().getLessThanSignKeyword_0()); }
		'<'
		{ after(grammarAccess.getArithmeticOperatorAccess().getLessThanSignKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getArithmeticOperatorAccess().getGreaterThanSignKeyword_1()); }
		'>'
		{ after(grammarAccess.getArithmeticOperatorAccess().getGreaterThanSignKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getArithmeticOperatorAccess().getLessThanSignEqualsSignKeyword_2()); }
		'<='
		{ after(grammarAccess.getArithmeticOperatorAccess().getLessThanSignEqualsSignKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getArithmeticOperatorAccess().getGreaterThanSignEqualsSignKeyword_3()); }
		'>='
		{ after(grammarAccess.getArithmeticOperatorAccess().getGreaterThanSignEqualsSignKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getArithmeticOperatorAccess().getEqualsSignEqualsSignKeyword_4()); }
		'=='
		{ after(grammarAccess.getArithmeticOperatorAccess().getEqualsSignEqualsSignKeyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getArithmeticOperatorAccess().getExclamationMarkEqualsSignKeyword_5()); }
		'!='
		{ after(grammarAccess.getArithmeticOperatorAccess().getExclamationMarkEqualsSignKeyword_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MathOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMathOperatorAccess().getPlusSignKeyword_0()); }
		'+'
		{ after(grammarAccess.getMathOperatorAccess().getPlusSignKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getMathOperatorAccess().getHyphenMinusKeyword_1()); }
		'-'
		{ after(grammarAccess.getMathOperatorAccess().getHyphenMinusKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getMathOperatorAccess().getAsteriskKeyword_2()); }
		'*'
		{ after(grammarAccess.getMathOperatorAccess().getAsteriskKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getMathOperatorAccess().getSolidusKeyword_3()); }
		'/'
		{ after(grammarAccess.getMathOperatorAccess().getSolidusKeyword_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicalOperatorAccess().getANDKeyword_0()); }
		'AND'
		{ after(grammarAccess.getLogicalOperatorAccess().getANDKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getLogicalOperatorAccess().getORKeyword_1()); }
		'OR'
		{ after(grammarAccess.getLogicalOperatorAccess().getORKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationAccess().getGroup_0()); }
		(rule__Operation__Group_0__0)
		{ after(grammarAccess.getOperationAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getOperationAccess().getGroup_1()); }
		(rule__Operation__Group_1__0)
		{ after(grammarAccess.getOperationAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationContinuation__AdditionalParamsAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationContinuationAccess().getAdditionalParamsParamParserRuleCall_1_0_0()); }
		ruleParam
		{ after(grammarAccess.getOperationContinuationAccess().getAdditionalParamsParamParserRuleCall_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getOperationContinuationAccess().getAdditionalParamsOperationParserRuleCall_1_0_1()); }
		ruleOperation
		{ after(grammarAccess.getOperationContinuationAccess().getAdditionalParamsOperationParserRuleCall_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__ConditionAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalDependencyAccess().getConditionAtomicParserRuleCall_1_0_0()); }
		ruleAtomic
		{ after(grammarAccess.getConditionalDependencyAccess().getConditionAtomicParserRuleCall_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getConditionalDependencyAccess().getConditionClauseParserRuleCall_1_0_1()); }
		ruleClause
		{ after(grammarAccess.getConditionalDependencyAccess().getConditionClauseParserRuleCall_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__ConsequenceAlternatives_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalDependencyAccess().getConsequenceAtomicParserRuleCall_3_0_0()); }
		ruleAtomic
		{ after(grammarAccess.getConditionalDependencyAccess().getConsequenceAtomicParserRuleCall_3_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getConditionalDependencyAccess().getConsequenceClauseParserRuleCall_3_0_1()); }
		ruleClause
		{ after(grammarAccess.getConditionalDependencyAccess().getConsequenceClauseParserRuleCall_3_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicAccess().getGroup_0()); }
		(rule__Atomic__Group_0__0)
		{ after(grammarAccess.getAtomicAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicAccess().getGroup_1()); }
		(rule__Atomic__Group_1__0)
		{ after(grammarAccess.getAtomicAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicAccess().getComparisonDependencyParserRuleCall_2()); }
		ruleComparisonDependency
		{ after(grammarAccess.getAtomicAccess().getComparisonDependencyParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamAssignment__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParamAssignmentAccess().getGroup_0()); }
		(rule__ParamAssignment__Group_0__0)
		{ after(grammarAccess.getParamAssignmentAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getParamAssignmentAccess().getGroup_1()); }
		(rule__ParamAssignment__Group_1__0)
		{ after(grammarAccess.getParamAssignmentAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getParamAssignmentAccess().getGroup_2()); }
		(rule__ParamAssignment__Group_2__0)
		{ after(grammarAccess.getParamAssignmentAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClauseAccess().getGroup_0()); }
		(rule__Clause__Group_0__0)
		{ after(grammarAccess.getClauseAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getClauseAccess().getGroup_1()); }
		(rule__Clause__Group_1__0)
		{ after(grammarAccess.getClauseAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getClauseAccess().getGroup_2()); }
		(rule__Clause__Group_2__0)
		{ after(grammarAccess.getClauseAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__FirsElementAlternatives_1_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClauseAccess().getFirsElementPredefinedDependencyParserRuleCall_1_0_0_0()); }
		rulePredefinedDependency
		{ after(grammarAccess.getClauseAccess().getFirsElementPredefinedDependencyParserRuleCall_1_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getClauseAccess().getFirsElementArithmeticDependencyParserRuleCall_1_0_0_1()); }
		ruleArithmeticDependency
		{ after(grammarAccess.getClauseAccess().getFirsElementArithmeticDependencyParserRuleCall_1_0_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClauseContinuation__AdditionalElementsAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClauseContinuationAccess().getAdditionalElementsAtomicParserRuleCall_1_0_0()); }
		ruleAtomic
		{ after(grammarAccess.getClauseContinuationAccess().getAdditionalElementsAtomicParserRuleCall_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getClauseContinuationAccess().getAdditionalElementsClauseParserRuleCall_1_0_1()); }
		ruleClause
		{ after(grammarAccess.getClauseContinuationAccess().getAdditionalElementsClauseParserRuleCall_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__PredefDepTypeAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredefinedDependencyAccess().getPredefDepTypeOrKeyword_1_0_0()); }
		'Or'
		{ after(grammarAccess.getPredefinedDependencyAccess().getPredefDepTypeOrKeyword_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getPredefinedDependencyAccess().getPredefDepTypeOnlyOneKeyword_1_0_1()); }
		'OnlyOne'
		{ after(grammarAccess.getPredefinedDependencyAccess().getPredefDepTypeOnlyOneKeyword_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getPredefinedDependencyAccess().getPredefDepTypeAllOrNoneKeyword_1_0_2()); }
		'AllOrNone'
		{ after(grammarAccess.getPredefinedDependencyAccess().getPredefDepTypeAllOrNoneKeyword_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getPredefinedDependencyAccess().getPredefDepTypeZeroOrOneKeyword_1_0_3()); }
		'ZeroOrOne'
		{ after(grammarAccess.getPredefinedDependencyAccess().getPredefDepTypeZeroOrOneKeyword_1_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__PredefDepClausesAlternatives_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredefinedDependencyAccess().getPredefDepClausesPositiveAtomicParserRuleCall_3_0_0()); }
		rulePositiveAtomic
		{ after(grammarAccess.getPredefinedDependencyAccess().getPredefDepClausesPositiveAtomicParserRuleCall_3_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getPredefinedDependencyAccess().getPredefDepClausesPositiveClauseParserRuleCall_3_0_1()); }
		rulePositiveClause
		{ after(grammarAccess.getPredefinedDependencyAccess().getPredefDepClausesPositiveClauseParserRuleCall_3_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__PredefDepClausesAlternatives_4_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredefinedDependencyAccess().getPredefDepClausesPositiveAtomicParserRuleCall_4_1_0_0()); }
		rulePositiveAtomic
		{ after(grammarAccess.getPredefinedDependencyAccess().getPredefDepClausesPositiveAtomicParserRuleCall_4_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getPredefinedDependencyAccess().getPredefDepClausesPositiveClauseParserRuleCall_4_1_0_1()); }
		rulePositiveClause
		{ after(grammarAccess.getPredefinedDependencyAccess().getPredefDepClausesPositiveClauseParserRuleCall_4_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveAtomic__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveAtomicAccess().getParamAssignment_0()); }
		(rule__PositiveAtomic__ParamAssignment_0)
		{ after(grammarAccess.getPositiveAtomicAccess().getParamAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getPositiveAtomicAccess().getParamAssignment_1()); }
		(rule__PositiveAtomic__ParamAssignment_1)
		{ after(grammarAccess.getPositiveAtomicAccess().getParamAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getPositiveAtomicAccess().getComparisonDependencyParserRuleCall_2()); }
		ruleComparisonDependency
		{ after(grammarAccess.getPositiveAtomicAccess().getComparisonDependencyParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveClauseAccess().getGroup_0()); }
		(rule__PositiveClause__Group_0__0)
		{ after(grammarAccess.getPositiveClauseAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getPositiveClauseAccess().getGroup_1()); }
		(rule__PositiveClause__Group_1__0)
		{ after(grammarAccess.getPositiveClauseAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getPositiveClauseAccess().getGroup_2()); }
		(rule__PositiveClause__Group_2__0)
		{ after(grammarAccess.getPositiveClauseAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause__FirsElementAlternatives_1_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveClauseAccess().getFirsElementPositivePredefinedDependencyParserRuleCall_1_0_0_0()); }
		rulePositivePredefinedDependency
		{ after(grammarAccess.getPositiveClauseAccess().getFirsElementPositivePredefinedDependencyParserRuleCall_1_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getPositiveClauseAccess().getFirsElementArithmeticDependencyParserRuleCall_1_0_0_1()); }
		ruleArithmeticDependency
		{ after(grammarAccess.getPositiveClauseAccess().getFirsElementArithmeticDependencyParserRuleCall_1_0_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClauseContinuation__AdditionalElementsAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveClauseContinuationAccess().getAdditionalElementsPositiveAtomicParserRuleCall_1_0_0()); }
		rulePositiveAtomic
		{ after(grammarAccess.getPositiveClauseContinuationAccess().getAdditionalElementsPositiveAtomicParserRuleCall_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getPositiveClauseContinuationAccess().getAdditionalElementsPositiveClauseParserRuleCall_1_0_1()); }
		rulePositiveClause
		{ after(grammarAccess.getPositiveClauseContinuationAccess().getAdditionalElementsPositiveClauseParserRuleCall_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositivePredefinedDependency__PredefDepTypeAlternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepTypeOrKeyword_0_0_0()); }
		'Or'
		{ after(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepTypeOrKeyword_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepTypeOnlyOneKeyword_0_0_1()); }
		'OnlyOne'
		{ after(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepTypeOnlyOneKeyword_0_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepTypeAllOrNoneKeyword_0_0_2()); }
		'AllOrNone'
		{ after(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepTypeAllOrNoneKeyword_0_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepTypeZeroOrOneKeyword_0_0_3()); }
		'ZeroOrOne'
		{ after(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepTypeZeroOrOneKeyword_0_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositivePredefinedDependency__PredefDepClausesAlternatives_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepClausesPositiveAtomicParserRuleCall_2_0_0()); }
		rulePositiveAtomic
		{ after(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepClausesPositiveAtomicParserRuleCall_2_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepClausesPositiveClauseParserRuleCall_2_0_1()); }
		rulePositiveClause
		{ after(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepClausesPositiveClauseParserRuleCall_2_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositivePredefinedDependency__PredefDepClausesAlternatives_3_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepClausesPositiveAtomicParserRuleCall_3_1_0_0()); }
		rulePositiveAtomic
		{ after(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepClausesPositiveAtomicParserRuleCall_3_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepClausesPositiveClauseParserRuleCall_3_1_0_1()); }
		rulePositiveClause
		{ after(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepClausesPositiveClauseParserRuleCall_3_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dependency__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dependency__Group__0__Impl
	rule__Dependency__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Dependency__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDependencyAccess().getDepAssignment_0()); }
	(rule__Dependency__DepAssignment_0)
	{ after(grammarAccess.getDependencyAccess().getDepAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dependency__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dependency__Group__1__Impl
	rule__Dependency__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Dependency__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDependencyAccess().getSemicolonKeyword_1()); }
	';'
	{ after(grammarAccess.getDependencyAccess().getSemicolonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dependency__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dependency__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Dependency__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDependencyAccess().getNLTerminalRuleCall_2()); }
	(RULE_NL)?
	{ after(grammarAccess.getDependencyAccess().getNLTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonDependency__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparisonDependency__Group__0__Impl
	rule__ComparisonDependency__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonDependency__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonDependencyAccess().getParam1Assignment_0()); }
	(rule__ComparisonDependency__Param1Assignment_0)
	{ after(grammarAccess.getComparisonDependencyAccess().getParam1Assignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonDependency__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparisonDependency__Group__1__Impl
	rule__ComparisonDependency__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonDependency__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonDependencyAccess().getArithOpAssignment_1()); }
	(rule__ComparisonDependency__ArithOpAssignment_1)
	{ after(grammarAccess.getComparisonDependencyAccess().getArithOpAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonDependency__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparisonDependency__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonDependency__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonDependencyAccess().getParam2Assignment_2()); }
	(rule__ComparisonDependency__Param2Assignment_2)
	{ after(grammarAccess.getComparisonDependencyAccess().getParam2Assignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArithmeticDependency__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithmeticDependency__Group__0__Impl
	rule__ArithmeticDependency__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticDependency__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithmeticDependencyAccess().getOperationAssignment_0()); }
	(rule__ArithmeticDependency__OperationAssignment_0)
	{ after(grammarAccess.getArithmeticDependencyAccess().getOperationAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticDependency__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithmeticDependency__Group__1__Impl
	rule__ArithmeticDependency__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticDependency__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithmeticDependencyAccess().getArithOpAssignment_1()); }
	(rule__ArithmeticDependency__ArithOpAssignment_1)
	{ after(grammarAccess.getArithmeticDependencyAccess().getArithOpAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticDependency__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithmeticDependency__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticDependency__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithmeticDependencyAccess().getResultAssignment_2()); }
	(rule__ArithmeticDependency__ResultAssignment_2)
	{ after(grammarAccess.getArithmeticDependencyAccess().getResultAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group_0__0__Impl
	rule__Operation__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getFirstParamAssignment_0_0()); }
	(rule__Operation__FirstParamAssignment_0_0)
	{ after(grammarAccess.getOperationAccess().getFirstParamAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getOperationContinuationAssignment_0_1()); }
	(rule__Operation__OperationContinuationAssignment_0_1)
	{ after(grammarAccess.getOperationAccess().getOperationContinuationAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group_1__0__Impl
	rule__Operation__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getOpeningParenthesisAssignment_1_0()); }
	(rule__Operation__OpeningParenthesisAssignment_1_0)
	{ after(grammarAccess.getOperationAccess().getOpeningParenthesisAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group_1__1__Impl
	rule__Operation__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getOperationAssignment_1_1()); }
	(rule__Operation__OperationAssignment_1_1)
	{ after(grammarAccess.getOperationAccess().getOperationAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group_1__2__Impl
	rule__Operation__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getClosingParenthesisAssignment_1_2()); }
	(rule__Operation__ClosingParenthesisAssignment_1_2)
	{ after(grammarAccess.getOperationAccess().getClosingParenthesisAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getOperationContinuationAssignment_1_3()); }
	(rule__Operation__OperationContinuationAssignment_1_3)?
	{ after(grammarAccess.getOperationAccess().getOperationContinuationAssignment_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OperationContinuation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationContinuation__Group__0__Impl
	rule__OperationContinuation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationContinuation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationContinuationAccess().getMathOpAssignment_0()); }
	(rule__OperationContinuation__MathOpAssignment_0)
	{ after(grammarAccess.getOperationContinuationAccess().getMathOpAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationContinuation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationContinuation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationContinuation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationContinuationAccess().getAdditionalParamsAssignment_1()); }
	(rule__OperationContinuation__AdditionalParamsAssignment_1)
	{ after(grammarAccess.getOperationContinuationAccess().getAdditionalParamsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalDependency__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalDependency__Group__0__Impl
	rule__ConditionalDependency__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalDependencyAccess().getIFKeyword_0()); }
	'IF'
	{ after(grammarAccess.getConditionalDependencyAccess().getIFKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalDependency__Group__1__Impl
	rule__ConditionalDependency__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalDependencyAccess().getConditionAssignment_1()); }
	(rule__ConditionalDependency__ConditionAssignment_1)
	{ after(grammarAccess.getConditionalDependencyAccess().getConditionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalDependency__Group__2__Impl
	rule__ConditionalDependency__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalDependencyAccess().getTHENKeyword_2()); }
	'THEN'
	{ after(grammarAccess.getConditionalDependencyAccess().getTHENKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalDependency__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalDependencyAccess().getConsequenceAssignment_3()); }
	(rule__ConditionalDependency__ConsequenceAssignment_3)
	{ after(grammarAccess.getConditionalDependencyAccess().getConsequenceAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_0__0__Impl
	rule__Atomic__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getNotAssignment_0_0()); }
	(rule__Atomic__NotAssignment_0_0)?
	{ after(grammarAccess.getAtomicAccess().getNotAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getParamAssignment_0_1()); }
	(rule__Atomic__ParamAssignment_0_1)
	{ after(grammarAccess.getAtomicAccess().getParamAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_1__0__Impl
	rule__Atomic__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getNotAssignment_1_0()); }
	(rule__Atomic__NotAssignment_1_0)?
	{ after(grammarAccess.getAtomicAccess().getNotAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getParamAssignment_1_1()); }
	(rule__Atomic__ParamAssignment_1_1)
	{ after(grammarAccess.getAtomicAccess().getParamAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParamAssignment__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParamAssignment__Group_0__0__Impl
	rule__ParamAssignment__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamAssignment__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamAssignmentAccess().getParamParserRuleCall_0_0()); }
	ruleParam
	{ after(grammarAccess.getParamAssignmentAccess().getParamParserRuleCall_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamAssignment__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParamAssignment__Group_0__1__Impl
	rule__ParamAssignment__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamAssignment__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamAssignmentAccess().getEqualsSignEqualsSignKeyword_0_1()); }
	'=='
	{ after(grammarAccess.getParamAssignmentAccess().getEqualsSignEqualsSignKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamAssignment__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParamAssignment__Group_0__2__Impl
	rule__ParamAssignment__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamAssignment__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamAssignmentAccess().getStringValuesAssignment_0_2()); }
	(rule__ParamAssignment__StringValuesAssignment_0_2)
	{ after(grammarAccess.getParamAssignmentAccess().getStringValuesAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamAssignment__Group_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParamAssignment__Group_0__3__Impl
	rule__ParamAssignment__Group_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamAssignment__Group_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamAssignmentAccess().getGroup_0_3()); }
	(rule__ParamAssignment__Group_0_3__0)*
	{ after(grammarAccess.getParamAssignmentAccess().getGroup_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamAssignment__Group_0__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParamAssignment__Group_0__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamAssignment__Group_0__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamAssignmentAccess().getAdditionalValuesAssignment_0_4()); }
	(rule__ParamAssignment__AdditionalValuesAssignment_0_4)?
	{ after(grammarAccess.getParamAssignmentAccess().getAdditionalValuesAssignment_0_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParamAssignment__Group_0_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParamAssignment__Group_0_3__0__Impl
	rule__ParamAssignment__Group_0_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamAssignment__Group_0_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamAssignmentAccess().getVerticalLineKeyword_0_3_0()); }
	'|'
	{ after(grammarAccess.getParamAssignmentAccess().getVerticalLineKeyword_0_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamAssignment__Group_0_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParamAssignment__Group_0_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamAssignment__Group_0_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamAssignmentAccess().getStringValuesAssignment_0_3_1()); }
	(rule__ParamAssignment__StringValuesAssignment_0_3_1)
	{ after(grammarAccess.getParamAssignmentAccess().getStringValuesAssignment_0_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParamAssignment__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParamAssignment__Group_1__0__Impl
	rule__ParamAssignment__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamAssignment__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamAssignmentAccess().getParamParserRuleCall_1_0()); }
	ruleParam
	{ after(grammarAccess.getParamAssignmentAccess().getParamParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamAssignment__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParamAssignment__Group_1__1__Impl
	rule__ParamAssignment__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamAssignment__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamAssignmentAccess().getEqualsSignEqualsSignKeyword_1_1()); }
	'=='
	{ after(grammarAccess.getParamAssignmentAccess().getEqualsSignEqualsSignKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamAssignment__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParamAssignment__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamAssignment__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamAssignmentAccess().getBooleanValueAssignment_1_2()); }
	(rule__ParamAssignment__BooleanValueAssignment_1_2)
	{ after(grammarAccess.getParamAssignmentAccess().getBooleanValueAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParamAssignment__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParamAssignment__Group_2__0__Impl
	rule__ParamAssignment__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamAssignment__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamAssignmentAccess().getParamParserRuleCall_2_0()); }
	ruleParam
	{ after(grammarAccess.getParamAssignmentAccess().getParamParserRuleCall_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamAssignment__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParamAssignment__Group_2__1__Impl
	rule__ParamAssignment__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamAssignment__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamAssignmentAccess().getArithOpAssignment_2_1()); }
	(rule__ParamAssignment__ArithOpAssignment_2_1)
	{ after(grammarAccess.getParamAssignmentAccess().getArithOpAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamAssignment__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParamAssignment__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamAssignment__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamAssignmentAccess().getDoubleValueAssignment_2_2()); }
	(rule__ParamAssignment__DoubleValueAssignment_2_2)
	{ after(grammarAccess.getParamAssignmentAccess().getDoubleValueAssignment_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Clause__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause__Group_0__0__Impl
	rule__Clause__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClauseAccess().getFirsElementAssignment_0_0()); }
	(rule__Clause__FirsElementAssignment_0_0)
	{ after(grammarAccess.getClauseAccess().getFirsElementAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClauseAccess().getClauseContinuationAssignment_0_1()); }
	(rule__Clause__ClauseContinuationAssignment_0_1)
	{ after(grammarAccess.getClauseAccess().getClauseContinuationAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Clause__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause__Group_1__0__Impl
	rule__Clause__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClauseAccess().getFirsElementAssignment_1_0()); }
	(rule__Clause__FirsElementAssignment_1_0)
	{ after(grammarAccess.getClauseAccess().getFirsElementAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClauseAccess().getClauseContinuationAssignment_1_1()); }
	(rule__Clause__ClauseContinuationAssignment_1_1)?
	{ after(grammarAccess.getClauseAccess().getClauseContinuationAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Clause__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause__Group_2__0__Impl
	rule__Clause__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClauseAccess().getNotAssignment_2_0()); }
	(rule__Clause__NotAssignment_2_0)?
	{ after(grammarAccess.getClauseAccess().getNotAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause__Group_2__1__Impl
	rule__Clause__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClauseAccess().getOpeningParenthesisAssignment_2_1()); }
	(rule__Clause__OpeningParenthesisAssignment_2_1)
	{ after(grammarAccess.getClauseAccess().getOpeningParenthesisAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause__Group_2__2__Impl
	rule__Clause__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClauseAccess().getClauseAssignment_2_2()); }
	(rule__Clause__ClauseAssignment_2_2)
	{ after(grammarAccess.getClauseAccess().getClauseAssignment_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group_2__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause__Group_2__3__Impl
	rule__Clause__Group_2__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group_2__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClauseAccess().getClosingParenthesisAssignment_2_3()); }
	(rule__Clause__ClosingParenthesisAssignment_2_3)
	{ after(grammarAccess.getClauseAccess().getClosingParenthesisAssignment_2_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group_2__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause__Group_2__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group_2__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClauseAccess().getClauseContinuationAssignment_2_4()); }
	(rule__Clause__ClauseContinuationAssignment_2_4)?
	{ after(grammarAccess.getClauseAccess().getClauseContinuationAssignment_2_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ClauseContinuation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClauseContinuation__Group__0__Impl
	rule__ClauseContinuation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClauseContinuation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClauseContinuationAccess().getLogicalOpAssignment_0()); }
	(rule__ClauseContinuation__LogicalOpAssignment_0)
	{ after(grammarAccess.getClauseContinuationAccess().getLogicalOpAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClauseContinuation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClauseContinuation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClauseContinuation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClauseContinuationAccess().getAdditionalElementsAssignment_1()); }
	(rule__ClauseContinuation__AdditionalElementsAssignment_1)
	{ after(grammarAccess.getClauseContinuationAccess().getAdditionalElementsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PredefinedDependency__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredefinedDependency__Group__0__Impl
	rule__PredefinedDependency__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredefinedDependencyAccess().getNotAssignment_0()); }
	(rule__PredefinedDependency__NotAssignment_0)?
	{ after(grammarAccess.getPredefinedDependencyAccess().getNotAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredefinedDependency__Group__1__Impl
	rule__PredefinedDependency__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredefinedDependencyAccess().getPredefDepTypeAssignment_1()); }
	(rule__PredefinedDependency__PredefDepTypeAssignment_1)
	{ after(grammarAccess.getPredefinedDependencyAccess().getPredefDepTypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredefinedDependency__Group__2__Impl
	rule__PredefinedDependency__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredefinedDependencyAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getPredefinedDependencyAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredefinedDependency__Group__3__Impl
	rule__PredefinedDependency__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredefinedDependencyAccess().getPredefDepClausesAssignment_3()); }
	(rule__PredefinedDependency__PredefDepClausesAssignment_3)
	{ after(grammarAccess.getPredefinedDependencyAccess().getPredefDepClausesAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredefinedDependency__Group__4__Impl
	rule__PredefinedDependency__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getPredefinedDependencyAccess().getGroup_4()); }
		(rule__PredefinedDependency__Group_4__0)
		{ after(grammarAccess.getPredefinedDependencyAccess().getGroup_4()); }
	)
	(
		{ before(grammarAccess.getPredefinedDependencyAccess().getGroup_4()); }
		(rule__PredefinedDependency__Group_4__0)*
		{ after(grammarAccess.getPredefinedDependencyAccess().getGroup_4()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredefinedDependency__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredefinedDependencyAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getPredefinedDependencyAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PredefinedDependency__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredefinedDependency__Group_4__0__Impl
	rule__PredefinedDependency__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredefinedDependencyAccess().getCommaKeyword_4_0()); }
	','
	{ after(grammarAccess.getPredefinedDependencyAccess().getCommaKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredefinedDependency__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredefinedDependencyAccess().getPredefDepClausesAssignment_4_1()); }
	(rule__PredefinedDependency__PredefDepClausesAssignment_4_1)
	{ after(grammarAccess.getPredefinedDependencyAccess().getPredefDepClausesAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PositiveClause__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositiveClause__Group_0__0__Impl
	rule__PositiveClause__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositiveClauseAccess().getFirsElementAssignment_0_0()); }
	(rule__PositiveClause__FirsElementAssignment_0_0)
	{ after(grammarAccess.getPositiveClauseAccess().getFirsElementAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositiveClause__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositiveClauseAccess().getClauseContinuationAssignment_0_1()); }
	(rule__PositiveClause__ClauseContinuationAssignment_0_1)
	{ after(grammarAccess.getPositiveClauseAccess().getClauseContinuationAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PositiveClause__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositiveClause__Group_1__0__Impl
	rule__PositiveClause__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositiveClauseAccess().getFirsElementAssignment_1_0()); }
	(rule__PositiveClause__FirsElementAssignment_1_0)
	{ after(grammarAccess.getPositiveClauseAccess().getFirsElementAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositiveClause__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositiveClauseAccess().getClauseContinuationAssignment_1_1()); }
	(rule__PositiveClause__ClauseContinuationAssignment_1_1)?
	{ after(grammarAccess.getPositiveClauseAccess().getClauseContinuationAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PositiveClause__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositiveClause__Group_2__0__Impl
	rule__PositiveClause__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositiveClauseAccess().getOpeningParenthesisAssignment_2_0()); }
	(rule__PositiveClause__OpeningParenthesisAssignment_2_0)
	{ after(grammarAccess.getPositiveClauseAccess().getOpeningParenthesisAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositiveClause__Group_2__1__Impl
	rule__PositiveClause__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositiveClauseAccess().getClauseAssignment_2_1()); }
	(rule__PositiveClause__ClauseAssignment_2_1)
	{ after(grammarAccess.getPositiveClauseAccess().getClauseAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositiveClause__Group_2__2__Impl
	rule__PositiveClause__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositiveClauseAccess().getClosingParenthesisAssignment_2_2()); }
	(rule__PositiveClause__ClosingParenthesisAssignment_2_2)
	{ after(grammarAccess.getPositiveClauseAccess().getClosingParenthesisAssignment_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause__Group_2__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositiveClause__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause__Group_2__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositiveClauseAccess().getClauseContinuationAssignment_2_3()); }
	(rule__PositiveClause__ClauseContinuationAssignment_2_3)?
	{ after(grammarAccess.getPositiveClauseAccess().getClauseContinuationAssignment_2_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PositiveClauseContinuation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositiveClauseContinuation__Group__0__Impl
	rule__PositiveClauseContinuation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClauseContinuation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositiveClauseContinuationAccess().getLogicalOpAssignment_0()); }
	(rule__PositiveClauseContinuation__LogicalOpAssignment_0)
	{ after(grammarAccess.getPositiveClauseContinuationAccess().getLogicalOpAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClauseContinuation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositiveClauseContinuation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClauseContinuation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositiveClauseContinuationAccess().getAdditionalElementsAssignment_1()); }
	(rule__PositiveClauseContinuation__AdditionalElementsAssignment_1)
	{ after(grammarAccess.getPositiveClauseContinuationAccess().getAdditionalElementsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PositivePredefinedDependency__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositivePredefinedDependency__Group__0__Impl
	rule__PositivePredefinedDependency__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PositivePredefinedDependency__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepTypeAssignment_0()); }
	(rule__PositivePredefinedDependency__PredefDepTypeAssignment_0)
	{ after(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositivePredefinedDependency__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositivePredefinedDependency__Group__1__Impl
	rule__PositivePredefinedDependency__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PositivePredefinedDependency__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositivePredefinedDependencyAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getPositivePredefinedDependencyAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositivePredefinedDependency__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositivePredefinedDependency__Group__2__Impl
	rule__PositivePredefinedDependency__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PositivePredefinedDependency__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepClausesAssignment_2()); }
	(rule__PositivePredefinedDependency__PredefDepClausesAssignment_2)
	{ after(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepClausesAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositivePredefinedDependency__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositivePredefinedDependency__Group__3__Impl
	rule__PositivePredefinedDependency__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PositivePredefinedDependency__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getPositivePredefinedDependencyAccess().getGroup_3()); }
		(rule__PositivePredefinedDependency__Group_3__0)
		{ after(grammarAccess.getPositivePredefinedDependencyAccess().getGroup_3()); }
	)
	(
		{ before(grammarAccess.getPositivePredefinedDependencyAccess().getGroup_3()); }
		(rule__PositivePredefinedDependency__Group_3__0)*
		{ after(grammarAccess.getPositivePredefinedDependencyAccess().getGroup_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositivePredefinedDependency__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositivePredefinedDependency__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PositivePredefinedDependency__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositivePredefinedDependencyAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getPositivePredefinedDependencyAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PositivePredefinedDependency__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositivePredefinedDependency__Group_3__0__Impl
	rule__PositivePredefinedDependency__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PositivePredefinedDependency__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositivePredefinedDependencyAccess().getCommaKeyword_3_0()); }
	','
	{ after(grammarAccess.getPositivePredefinedDependencyAccess().getCommaKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositivePredefinedDependency__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositivePredefinedDependency__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PositivePredefinedDependency__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepClausesAssignment_3_1()); }
	(rule__PositivePredefinedDependency__PredefDepClausesAssignment_3_1)
	{ after(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepClausesAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__DependenciesAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getDependenciesDependencyParserRuleCall_0()); }
		ruleDependency
		{ after(grammarAccess.getModelAccess().getDependenciesDependencyParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dependency__DepAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDependencyAccess().getDepAlternatives_0_0()); }
		(rule__Dependency__DepAlternatives_0_0)
		{ after(grammarAccess.getDependencyAccess().getDepAlternatives_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonDependency__Param1Assignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonDependencyAccess().getParam1IDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getComparisonDependencyAccess().getParam1IDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonDependency__ArithOpAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonDependencyAccess().getArithOpArithmeticOperatorParserRuleCall_1_0()); }
		ruleArithmeticOperator
		{ after(grammarAccess.getComparisonDependencyAccess().getArithOpArithmeticOperatorParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonDependency__Param2Assignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonDependencyAccess().getParam2IDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getComparisonDependencyAccess().getParam2IDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticDependency__OperationAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArithmeticDependencyAccess().getOperationOperationParserRuleCall_0_0()); }
		ruleOperation
		{ after(grammarAccess.getArithmeticDependencyAccess().getOperationOperationParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticDependency__ArithOpAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArithmeticDependencyAccess().getArithOpArithmeticOperatorParserRuleCall_1_0()); }
		ruleArithmeticOperator
		{ after(grammarAccess.getArithmeticDependencyAccess().getArithOpArithmeticOperatorParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticDependency__ResultAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArithmeticDependencyAccess().getResultDOUBLETerminalRuleCall_2_0()); }
		RULE_DOUBLE
		{ after(grammarAccess.getArithmeticDependencyAccess().getResultDOUBLETerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__FirstParamAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationAccess().getFirstParamParamParserRuleCall_0_0_0()); }
		ruleParam
		{ after(grammarAccess.getOperationAccess().getFirstParamParamParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__OperationContinuationAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationAccess().getOperationContinuationOperationContinuationParserRuleCall_0_1_0()); }
		ruleOperationContinuation
		{ after(grammarAccess.getOperationAccess().getOperationContinuationOperationContinuationParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__OpeningParenthesisAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationAccess().getOpeningParenthesisLeftParenthesisKeyword_1_0_0()); }
		(
			{ before(grammarAccess.getOperationAccess().getOpeningParenthesisLeftParenthesisKeyword_1_0_0()); }
			'('
			{ after(grammarAccess.getOperationAccess().getOpeningParenthesisLeftParenthesisKeyword_1_0_0()); }
		)
		{ after(grammarAccess.getOperationAccess().getOpeningParenthesisLeftParenthesisKeyword_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__OperationAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationAccess().getOperationOperationParserRuleCall_1_1_0()); }
		ruleOperation
		{ after(grammarAccess.getOperationAccess().getOperationOperationParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__ClosingParenthesisAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationAccess().getClosingParenthesisRightParenthesisKeyword_1_2_0()); }
		(
			{ before(grammarAccess.getOperationAccess().getClosingParenthesisRightParenthesisKeyword_1_2_0()); }
			')'
			{ after(grammarAccess.getOperationAccess().getClosingParenthesisRightParenthesisKeyword_1_2_0()); }
		)
		{ after(grammarAccess.getOperationAccess().getClosingParenthesisRightParenthesisKeyword_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__OperationContinuationAssignment_1_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationAccess().getOperationContinuationOperationContinuationParserRuleCall_1_3_0()); }
		ruleOperationContinuation
		{ after(grammarAccess.getOperationAccess().getOperationContinuationOperationContinuationParserRuleCall_1_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationContinuation__MathOpAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationContinuationAccess().getMathOpMathOperatorParserRuleCall_0_0()); }
		ruleMathOperator
		{ after(grammarAccess.getOperationContinuationAccess().getMathOpMathOperatorParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationContinuation__AdditionalParamsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationContinuationAccess().getAdditionalParamsAlternatives_1_0()); }
		(rule__OperationContinuation__AdditionalParamsAlternatives_1_0)
		{ after(grammarAccess.getOperationContinuationAccess().getAdditionalParamsAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__ConditionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalDependencyAccess().getConditionAlternatives_1_0()); }
		(rule__ConditionalDependency__ConditionAlternatives_1_0)
		{ after(grammarAccess.getConditionalDependencyAccess().getConditionAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__ConsequenceAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalDependencyAccess().getConsequenceAlternatives_3_0()); }
		(rule__ConditionalDependency__ConsequenceAlternatives_3_0)
		{ after(grammarAccess.getConditionalDependencyAccess().getConsequenceAlternatives_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__NotAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicAccess().getNotNotParserRuleCall_0_0_0()); }
		ruleNot
		{ after(grammarAccess.getAtomicAccess().getNotNotParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__ParamAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicAccess().getParamParamParserRuleCall_0_1_0()); }
		ruleParam
		{ after(grammarAccess.getAtomicAccess().getParamParamParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__NotAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicAccess().getNotNotParserRuleCall_1_0_0()); }
		ruleNot
		{ after(grammarAccess.getAtomicAccess().getNotNotParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__ParamAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicAccess().getParamParamAssignmentParserRuleCall_1_1_0()); }
		ruleParamAssignment
		{ after(grammarAccess.getAtomicAccess().getParamParamAssignmentParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Param__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParamAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getParamAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamAssignment__StringValuesAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParamAssignmentAccess().getStringValuesSTRINGTerminalRuleCall_0_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getParamAssignmentAccess().getStringValuesSTRINGTerminalRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamAssignment__StringValuesAssignment_0_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParamAssignmentAccess().getStringValuesSTRINGTerminalRuleCall_0_3_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getParamAssignmentAccess().getStringValuesSTRINGTerminalRuleCall_0_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamAssignment__AdditionalValuesAssignment_0_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParamAssignmentAccess().getAdditionalValuesVerticalLineAsteriskKeyword_0_4_0()); }
		(
			{ before(grammarAccess.getParamAssignmentAccess().getAdditionalValuesVerticalLineAsteriskKeyword_0_4_0()); }
			'|*'
			{ after(grammarAccess.getParamAssignmentAccess().getAdditionalValuesVerticalLineAsteriskKeyword_0_4_0()); }
		)
		{ after(grammarAccess.getParamAssignmentAccess().getAdditionalValuesVerticalLineAsteriskKeyword_0_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamAssignment__BooleanValueAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParamAssignmentAccess().getBooleanValueBOOLEANTerminalRuleCall_1_2_0()); }
		RULE_BOOLEAN
		{ after(grammarAccess.getParamAssignmentAccess().getBooleanValueBOOLEANTerminalRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamAssignment__ArithOpAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParamAssignmentAccess().getArithOpArithmeticOperatorParserRuleCall_2_1_0()); }
		ruleArithmeticOperator
		{ after(grammarAccess.getParamAssignmentAccess().getArithOpArithmeticOperatorParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamAssignment__DoubleValueAssignment_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParamAssignmentAccess().getDoubleValueDOUBLETerminalRuleCall_2_2_0()); }
		RULE_DOUBLE
		{ after(grammarAccess.getParamAssignmentAccess().getDoubleValueDOUBLETerminalRuleCall_2_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__FirsElementAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClauseAccess().getFirsElementAtomicParserRuleCall_0_0_0()); }
		ruleAtomic
		{ after(grammarAccess.getClauseAccess().getFirsElementAtomicParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__ClauseContinuationAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClauseAccess().getClauseContinuationClauseContinuationParserRuleCall_0_1_0()); }
		ruleClauseContinuation
		{ after(grammarAccess.getClauseAccess().getClauseContinuationClauseContinuationParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__FirsElementAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClauseAccess().getFirsElementAlternatives_1_0_0()); }
		(rule__Clause__FirsElementAlternatives_1_0_0)
		{ after(grammarAccess.getClauseAccess().getFirsElementAlternatives_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__ClauseContinuationAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClauseAccess().getClauseContinuationClauseContinuationParserRuleCall_1_1_0()); }
		ruleClauseContinuation
		{ after(grammarAccess.getClauseAccess().getClauseContinuationClauseContinuationParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__NotAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClauseAccess().getNotNotParserRuleCall_2_0_0()); }
		ruleNot
		{ after(grammarAccess.getClauseAccess().getNotNotParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__OpeningParenthesisAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClauseAccess().getOpeningParenthesisLeftParenthesisKeyword_2_1_0()); }
		(
			{ before(grammarAccess.getClauseAccess().getOpeningParenthesisLeftParenthesisKeyword_2_1_0()); }
			'('
			{ after(grammarAccess.getClauseAccess().getOpeningParenthesisLeftParenthesisKeyword_2_1_0()); }
		)
		{ after(grammarAccess.getClauseAccess().getOpeningParenthesisLeftParenthesisKeyword_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__ClauseAssignment_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClauseAccess().getClauseClauseParserRuleCall_2_2_0()); }
		ruleClause
		{ after(grammarAccess.getClauseAccess().getClauseClauseParserRuleCall_2_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__ClosingParenthesisAssignment_2_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClauseAccess().getClosingParenthesisRightParenthesisKeyword_2_3_0()); }
		(
			{ before(grammarAccess.getClauseAccess().getClosingParenthesisRightParenthesisKeyword_2_3_0()); }
			')'
			{ after(grammarAccess.getClauseAccess().getClosingParenthesisRightParenthesisKeyword_2_3_0()); }
		)
		{ after(grammarAccess.getClauseAccess().getClosingParenthesisRightParenthesisKeyword_2_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__ClauseContinuationAssignment_2_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClauseAccess().getClauseContinuationClauseContinuationParserRuleCall_2_4_0()); }
		ruleClauseContinuation
		{ after(grammarAccess.getClauseAccess().getClauseContinuationClauseContinuationParserRuleCall_2_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClauseContinuation__LogicalOpAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClauseContinuationAccess().getLogicalOpLogicalOperatorParserRuleCall_0_0()); }
		ruleLogicalOperator
		{ after(grammarAccess.getClauseContinuationAccess().getLogicalOpLogicalOperatorParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClauseContinuation__AdditionalElementsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClauseContinuationAccess().getAdditionalElementsAlternatives_1_0()); }
		(rule__ClauseContinuation__AdditionalElementsAlternatives_1_0)
		{ after(grammarAccess.getClauseContinuationAccess().getAdditionalElementsAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__NotAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredefinedDependencyAccess().getNotNotParserRuleCall_0_0()); }
		ruleNot
		{ after(grammarAccess.getPredefinedDependencyAccess().getNotNotParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__PredefDepTypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredefinedDependencyAccess().getPredefDepTypeAlternatives_1_0()); }
		(rule__PredefinedDependency__PredefDepTypeAlternatives_1_0)
		{ after(grammarAccess.getPredefinedDependencyAccess().getPredefDepTypeAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__PredefDepClausesAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredefinedDependencyAccess().getPredefDepClausesAlternatives_3_0()); }
		(rule__PredefinedDependency__PredefDepClausesAlternatives_3_0)
		{ after(grammarAccess.getPredefinedDependencyAccess().getPredefDepClausesAlternatives_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__PredefDepClausesAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredefinedDependencyAccess().getPredefDepClausesAlternatives_4_1_0()); }
		(rule__PredefinedDependency__PredefDepClausesAlternatives_4_1_0)
		{ after(grammarAccess.getPredefinedDependencyAccess().getPredefDepClausesAlternatives_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveAtomic__ParamAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveAtomicAccess().getParamParamParserRuleCall_0_0()); }
		ruleParam
		{ after(grammarAccess.getPositiveAtomicAccess().getParamParamParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveAtomic__ParamAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveAtomicAccess().getParamParamAssignmentParserRuleCall_1_0()); }
		ruleParamAssignment
		{ after(grammarAccess.getPositiveAtomicAccess().getParamParamAssignmentParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause__FirsElementAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveClauseAccess().getFirsElementPositiveAtomicParserRuleCall_0_0_0()); }
		rulePositiveAtomic
		{ after(grammarAccess.getPositiveClauseAccess().getFirsElementPositiveAtomicParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause__ClauseContinuationAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveClauseAccess().getClauseContinuationPositiveClauseContinuationParserRuleCall_0_1_0()); }
		rulePositiveClauseContinuation
		{ after(grammarAccess.getPositiveClauseAccess().getClauseContinuationPositiveClauseContinuationParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause__FirsElementAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveClauseAccess().getFirsElementAlternatives_1_0_0()); }
		(rule__PositiveClause__FirsElementAlternatives_1_0_0)
		{ after(grammarAccess.getPositiveClauseAccess().getFirsElementAlternatives_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause__ClauseContinuationAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveClauseAccess().getClauseContinuationPositiveClauseContinuationParserRuleCall_1_1_0()); }
		rulePositiveClauseContinuation
		{ after(grammarAccess.getPositiveClauseAccess().getClauseContinuationPositiveClauseContinuationParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause__OpeningParenthesisAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveClauseAccess().getOpeningParenthesisLeftParenthesisKeyword_2_0_0()); }
		(
			{ before(grammarAccess.getPositiveClauseAccess().getOpeningParenthesisLeftParenthesisKeyword_2_0_0()); }
			'('
			{ after(grammarAccess.getPositiveClauseAccess().getOpeningParenthesisLeftParenthesisKeyword_2_0_0()); }
		)
		{ after(grammarAccess.getPositiveClauseAccess().getOpeningParenthesisLeftParenthesisKeyword_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause__ClauseAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveClauseAccess().getClausePositiveClauseParserRuleCall_2_1_0()); }
		rulePositiveClause
		{ after(grammarAccess.getPositiveClauseAccess().getClausePositiveClauseParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause__ClosingParenthesisAssignment_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveClauseAccess().getClosingParenthesisRightParenthesisKeyword_2_2_0()); }
		(
			{ before(grammarAccess.getPositiveClauseAccess().getClosingParenthesisRightParenthesisKeyword_2_2_0()); }
			')'
			{ after(grammarAccess.getPositiveClauseAccess().getClosingParenthesisRightParenthesisKeyword_2_2_0()); }
		)
		{ after(grammarAccess.getPositiveClauseAccess().getClosingParenthesisRightParenthesisKeyword_2_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause__ClauseContinuationAssignment_2_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveClauseAccess().getClauseContinuationPositiveClauseContinuationParserRuleCall_2_3_0()); }
		rulePositiveClauseContinuation
		{ after(grammarAccess.getPositiveClauseAccess().getClauseContinuationPositiveClauseContinuationParserRuleCall_2_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClauseContinuation__LogicalOpAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveClauseContinuationAccess().getLogicalOpLogicalOperatorParserRuleCall_0_0()); }
		ruleLogicalOperator
		{ after(grammarAccess.getPositiveClauseContinuationAccess().getLogicalOpLogicalOperatorParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClauseContinuation__AdditionalElementsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveClauseContinuationAccess().getAdditionalElementsAlternatives_1_0()); }
		(rule__PositiveClauseContinuation__AdditionalElementsAlternatives_1_0)
		{ after(grammarAccess.getPositiveClauseContinuationAccess().getAdditionalElementsAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositivePredefinedDependency__PredefDepTypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepTypeAlternatives_0_0()); }
		(rule__PositivePredefinedDependency__PredefDepTypeAlternatives_0_0)
		{ after(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepTypeAlternatives_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositivePredefinedDependency__PredefDepClausesAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepClausesAlternatives_2_0()); }
		(rule__PositivePredefinedDependency__PredefDepClausesAlternatives_2_0)
		{ after(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepClausesAlternatives_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositivePredefinedDependency__PredefDepClausesAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepClausesAlternatives_3_1_0()); }
		(rule__PositivePredefinedDependency__PredefDepClausesAlternatives_3_1_0)
		{ after(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepClausesAlternatives_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_NL : ('\r'? '\n')+;

RULE_BOOLEAN : ('true'|'false');

RULE_DOUBLE : RULE_INT ('.' RULE_INT)?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_'|'.') ('a'..'z'|'A'..'Z'|'_'|'.'|'0'..'9')*;

fragment RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
