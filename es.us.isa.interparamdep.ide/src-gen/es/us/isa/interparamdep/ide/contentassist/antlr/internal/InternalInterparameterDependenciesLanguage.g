/*
 * generated by Xtext 2.19.0
 */
grammar InternalInterparameterDependenciesLanguage;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
}

@lexer::header {
package es.us.isa.interparamdep.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package es.us.isa.interparamdep.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import es.us.isa.interparamdep.services.InterparameterDependenciesLanguageGrammarAccess;

}
@parser::members {
	private InterparameterDependenciesLanguageGrammarAccess grammarAccess;

	public void setGrammarAccess(InterparameterDependenciesLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getDependenciesAssignment()); }
		(rule__Model__DependenciesAssignment)*
		{ after(grammarAccess.getModelAccess().getDependenciesAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDependency
entryRuleDependency
:
{ before(grammarAccess.getDependencyRule()); }
	 ruleDependency
{ after(grammarAccess.getDependencyRule()); } 
	 EOF 
;

// Rule Dependency
ruleDependency 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDependencyAccess().getGroup()); }
		(rule__Dependency__Group__0)
		{ after(grammarAccess.getDependencyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRelationalOperator
entryRuleRelationalOperator
:
{ before(grammarAccess.getRelationalOperatorRule()); }
	 ruleRelationalOperator
{ after(grammarAccess.getRelationalOperatorRule()); } 
	 EOF 
;

// Rule RelationalOperator
ruleRelationalOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRelationalOperatorAccess().getAlternatives()); }
		(rule__RelationalOperator__Alternatives)
		{ after(grammarAccess.getRelationalOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArithmeticOperator
entryRuleArithmeticOperator
:
{ before(grammarAccess.getArithmeticOperatorRule()); }
	 ruleArithmeticOperator
{ after(grammarAccess.getArithmeticOperatorRule()); } 
	 EOF 
;

// Rule ArithmeticOperator
ruleArithmeticOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArithmeticOperatorAccess().getAlternatives()); }
		(rule__ArithmeticOperator__Alternatives)
		{ after(grammarAccess.getArithmeticOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNot
entryRuleNot
:
{ before(grammarAccess.getNotRule()); }
	 ruleNot
{ after(grammarAccess.getNotRule()); } 
	 EOF 
;

// Rule Not
ruleNot 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNotAccess().getNOTKeyword()); }
		'NOT'
		{ after(grammarAccess.getNotAccess().getNOTKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLogicalOperator
entryRuleLogicalOperator
:
{ before(grammarAccess.getLogicalOperatorRule()); }
	 ruleLogicalOperator
{ after(grammarAccess.getLogicalOperatorRule()); } 
	 EOF 
;

// Rule LogicalOperator
ruleLogicalOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLogicalOperatorAccess().getAlternatives()); }
		(rule__LogicalOperator__Alternatives)
		{ after(grammarAccess.getLogicalOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRelationalDependency
entryRuleRelationalDependency
:
{ before(grammarAccess.getRelationalDependencyRule()); }
	 ruleRelationalDependency
{ after(grammarAccess.getRelationalDependencyRule()); } 
	 EOF 
;

// Rule RelationalDependency
ruleRelationalDependency 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRelationalDependencyAccess().getGroup()); }
		(rule__RelationalDependency__Group__0)
		{ after(grammarAccess.getRelationalDependencyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArithmeticDependency
entryRuleArithmeticDependency
:
{ before(grammarAccess.getArithmeticDependencyRule()); }
	 ruleArithmeticDependency
{ after(grammarAccess.getArithmeticDependencyRule()); } 
	 EOF 
;

// Rule ArithmeticDependency
ruleArithmeticDependency 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArithmeticDependencyAccess().getGroup()); }
		(rule__ArithmeticDependency__Group__0)
		{ after(grammarAccess.getArithmeticDependencyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOperation
entryRuleOperation
:
{ before(grammarAccess.getOperationRule()); }
	 ruleOperation
{ after(grammarAccess.getOperationRule()); } 
	 EOF 
;

// Rule Operation
ruleOperation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOperationAccess().getAlternatives()); }
		(rule__Operation__Alternatives)
		{ after(grammarAccess.getOperationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOperationContinuation
entryRuleOperationContinuation
:
{ before(grammarAccess.getOperationContinuationRule()); }
	 ruleOperationContinuation
{ after(grammarAccess.getOperationContinuationRule()); } 
	 EOF 
;

// Rule OperationContinuation
ruleOperationContinuation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOperationContinuationAccess().getGroup()); }
		(rule__OperationContinuation__Group__0)
		{ after(grammarAccess.getOperationContinuationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConditionalDependency
entryRuleConditionalDependency
:
{ before(grammarAccess.getConditionalDependencyRule()); }
	 ruleConditionalDependency
{ after(grammarAccess.getConditionalDependencyRule()); } 
	 EOF 
;

// Rule ConditionalDependency
ruleConditionalDependency 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionalDependencyAccess().getGroup()); }
		(rule__ConditionalDependency__Group__0)
		{ after(grammarAccess.getConditionalDependencyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePredicate
entryRulePredicate
:
{ before(grammarAccess.getPredicateRule()); }
	 rulePredicate
{ after(grammarAccess.getPredicateRule()); } 
	 EOF 
;

// Rule Predicate
rulePredicate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPredicateAccess().getGroup()); }
		(rule__Predicate__Group__0)
		{ after(grammarAccess.getPredicateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClause
entryRuleClause
:
{ before(grammarAccess.getClauseRule()); }
	 ruleClause
{ after(grammarAccess.getClauseRule()); } 
	 EOF 
;

// Rule Clause
ruleClause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClauseAccess().getAlternatives()); }
		(rule__Clause__Alternatives)
		{ after(grammarAccess.getClauseAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTerm
entryRuleTerm
:
{ before(grammarAccess.getTermRule()); }
	 ruleTerm
{ after(grammarAccess.getTermRule()); } 
	 EOF 
;

// Rule Term
ruleTerm 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTermAccess().getAlternatives()); }
		(rule__Term__Alternatives)
		{ after(grammarAccess.getTermAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParam
entryRuleParam
:
{ before(grammarAccess.getParamRule()); }
	 ruleParam
{ after(grammarAccess.getParamRule()); } 
	 EOF 
;

// Rule Param
ruleParam 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParamAccess().getNameAssignment()); }
		(rule__Param__NameAssignment)
		{ after(grammarAccess.getParamAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParamValueRelation
entryRuleParamValueRelation
:
{ before(grammarAccess.getParamValueRelationRule()); }
	 ruleParamValueRelation
{ after(grammarAccess.getParamValueRelationRule()); } 
	 EOF 
;

// Rule ParamValueRelation
ruleParamValueRelation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParamValueRelationAccess().getAlternatives()); }
		(rule__ParamValueRelation__Alternatives)
		{ after(grammarAccess.getParamValueRelationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClauseContinuation
entryRuleClauseContinuation
:
{ before(grammarAccess.getClauseContinuationRule()); }
	 ruleClauseContinuation
{ after(grammarAccess.getClauseContinuationRule()); } 
	 EOF 
;

// Rule ClauseContinuation
ruleClauseContinuation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClauseContinuationAccess().getGroup()); }
		(rule__ClauseContinuation__Group__0)
		{ after(grammarAccess.getClauseContinuationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePredefinedDependency
entryRulePredefinedDependency
:
{ before(grammarAccess.getPredefinedDependencyRule()); }
	 rulePredefinedDependency
{ after(grammarAccess.getPredefinedDependencyRule()); } 
	 EOF 
;

// Rule PredefinedDependency
rulePredefinedDependency 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPredefinedDependencyAccess().getGroup()); }
		(rule__PredefinedDependency__Group__0)
		{ after(grammarAccess.getPredefinedDependencyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePositivePredicate
entryRulePositivePredicate
:
{ before(grammarAccess.getPositivePredicateRule()); }
	 rulePositivePredicate
{ after(grammarAccess.getPositivePredicateRule()); } 
	 EOF 
;

// Rule PositivePredicate
rulePositivePredicate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPositivePredicateAccess().getGroup()); }
		(rule__PositivePredicate__Group__0)
		{ after(grammarAccess.getPositivePredicateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePositiveTerm
entryRulePositiveTerm
:
{ before(grammarAccess.getPositiveTermRule()); }
	 rulePositiveTerm
{ after(grammarAccess.getPositiveTermRule()); } 
	 EOF 
;

// Rule PositiveTerm
rulePositiveTerm 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPositiveTermAccess().getAlternatives()); }
		(rule__PositiveTerm__Alternatives)
		{ after(grammarAccess.getPositiveTermAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePositiveClause
entryRulePositiveClause
:
{ before(grammarAccess.getPositiveClauseRule()); }
	 rulePositiveClause
{ after(grammarAccess.getPositiveClauseRule()); } 
	 EOF 
;

// Rule PositiveClause
rulePositiveClause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPositiveClauseAccess().getAlternatives()); }
		(rule__PositiveClause__Alternatives)
		{ after(grammarAccess.getPositiveClauseAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePositiveClauseContinuation
entryRulePositiveClauseContinuation
:
{ before(grammarAccess.getPositiveClauseContinuationRule()); }
	 rulePositiveClauseContinuation
{ after(grammarAccess.getPositiveClauseContinuationRule()); } 
	 EOF 
;

// Rule PositiveClauseContinuation
rulePositiveClauseContinuation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPositiveClauseContinuationAccess().getGroup()); }
		(rule__PositiveClauseContinuation__Group__0)
		{ after(grammarAccess.getPositiveClauseContinuationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePositivePredefinedDependency
entryRulePositivePredefinedDependency
:
{ before(grammarAccess.getPositivePredefinedDependencyRule()); }
	 rulePositivePredefinedDependency
{ after(grammarAccess.getPositivePredefinedDependencyRule()); } 
	 EOF 
;

// Rule PositivePredefinedDependency
rulePositivePredefinedDependency 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPositivePredefinedDependencyAccess().getGroup()); }
		(rule__PositivePredefinedDependency__Group__0)
		{ after(grammarAccess.getPositivePredefinedDependencyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dependency__DepAlternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDependencyAccess().getDepRelationalDependencyParserRuleCall_0_0_0()); }
		ruleRelationalDependency
		{ after(grammarAccess.getDependencyAccess().getDepRelationalDependencyParserRuleCall_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getDependencyAccess().getDepArithmeticDependencyParserRuleCall_0_0_1()); }
		ruleArithmeticDependency
		{ after(grammarAccess.getDependencyAccess().getDepArithmeticDependencyParserRuleCall_0_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getDependencyAccess().getDepConditionalDependencyParserRuleCall_0_0_2()); }
		ruleConditionalDependency
		{ after(grammarAccess.getDependencyAccess().getDepConditionalDependencyParserRuleCall_0_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getDependencyAccess().getDepPredefinedDependencyParserRuleCall_0_0_3()); }
		rulePredefinedDependency
		{ after(grammarAccess.getDependencyAccess().getDepPredefinedDependencyParserRuleCall_0_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationalOperatorAccess().getLessThanSignKeyword_0()); }
		'<'
		{ after(grammarAccess.getRelationalOperatorAccess().getLessThanSignKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalOperatorAccess().getGreaterThanSignKeyword_1()); }
		'>'
		{ after(grammarAccess.getRelationalOperatorAccess().getGreaterThanSignKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalOperatorAccess().getLessThanSignEqualsSignKeyword_2()); }
		'<='
		{ after(grammarAccess.getRelationalOperatorAccess().getLessThanSignEqualsSignKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalOperatorAccess().getGreaterThanSignEqualsSignKeyword_3()); }
		'>='
		{ after(grammarAccess.getRelationalOperatorAccess().getGreaterThanSignEqualsSignKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalOperatorAccess().getEqualsSignEqualsSignKeyword_4()); }
		'=='
		{ after(grammarAccess.getRelationalOperatorAccess().getEqualsSignEqualsSignKeyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalOperatorAccess().getExclamationMarkEqualsSignKeyword_5()); }
		'!='
		{ after(grammarAccess.getRelationalOperatorAccess().getExclamationMarkEqualsSignKeyword_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArithmeticOperatorAccess().getPlusSignKeyword_0()); }
		'+'
		{ after(grammarAccess.getArithmeticOperatorAccess().getPlusSignKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getArithmeticOperatorAccess().getHyphenMinusKeyword_1()); }
		'-'
		{ after(grammarAccess.getArithmeticOperatorAccess().getHyphenMinusKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getArithmeticOperatorAccess().getAsteriskKeyword_2()); }
		'*'
		{ after(grammarAccess.getArithmeticOperatorAccess().getAsteriskKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getArithmeticOperatorAccess().getSolidusKeyword_3()); }
		'/'
		{ after(grammarAccess.getArithmeticOperatorAccess().getSolidusKeyword_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicalOperatorAccess().getANDKeyword_0()); }
		'AND'
		{ after(grammarAccess.getLogicalOperatorAccess().getANDKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getLogicalOperatorAccess().getORKeyword_1()); }
		'OR'
		{ after(grammarAccess.getLogicalOperatorAccess().getORKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationAccess().getGroup_0()); }
		(rule__Operation__Group_0__0)
		{ after(grammarAccess.getOperationAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getOperationAccess().getGroup_1()); }
		(rule__Operation__Group_1__0)
		{ after(grammarAccess.getOperationAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationContinuation__AdditionalParamsAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationContinuationAccess().getAdditionalParamsParamParserRuleCall_1_0_0()); }
		ruleParam
		{ after(grammarAccess.getOperationContinuationAccess().getAdditionalParamsParamParserRuleCall_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getOperationContinuationAccess().getAdditionalParamsOperationParserRuleCall_1_0_1()); }
		ruleOperation
		{ after(grammarAccess.getOperationContinuationAccess().getAdditionalParamsOperationParserRuleCall_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClauseAccess().getFirstElementAssignment_0()); }
		(rule__Clause__FirstElementAssignment_0)
		{ after(grammarAccess.getClauseAccess().getFirstElementAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getClauseAccess().getGroup_1()); }
		(rule__Clause__Group_1__0)
		{ after(grammarAccess.getClauseAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__FirstElementAlternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClauseAccess().getFirstElementTermParserRuleCall_0_0_0()); }
		ruleTerm
		{ after(grammarAccess.getClauseAccess().getFirstElementTermParserRuleCall_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getClauseAccess().getFirstElementRelationalDependencyParserRuleCall_0_0_1()); }
		ruleRelationalDependency
		{ after(grammarAccess.getClauseAccess().getFirstElementRelationalDependencyParserRuleCall_0_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getClauseAccess().getFirstElementArithmeticDependencyParserRuleCall_0_0_2()); }
		ruleArithmeticDependency
		{ after(grammarAccess.getClauseAccess().getFirstElementArithmeticDependencyParserRuleCall_0_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getClauseAccess().getFirstElementPredefinedDependencyParserRuleCall_0_0_3()); }
		rulePredefinedDependency
		{ after(grammarAccess.getClauseAccess().getFirstElementPredefinedDependencyParserRuleCall_0_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTermAccess().getGroup_0()); }
		(rule__Term__Group_0__0)
		{ after(grammarAccess.getTermAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getTermAccess().getGroup_1()); }
		(rule__Term__Group_1__0)
		{ after(grammarAccess.getTermAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Param__NameAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParamAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getParamAccess().getNameIDTerminalRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getParamAccess().getNameID_SPECIAL_CHARSTerminalRuleCall_0_1()); }
		RULE_ID_SPECIAL_CHARS
		{ after(grammarAccess.getParamAccess().getNameID_SPECIAL_CHARSTerminalRuleCall_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamValueRelation__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParamValueRelationAccess().getGroup_0()); }
		(rule__ParamValueRelation__Group_0__0)
		{ after(grammarAccess.getParamValueRelationAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getParamValueRelationAccess().getGroup_1()); }
		(rule__ParamValueRelation__Group_1__0)
		{ after(grammarAccess.getParamValueRelationAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getParamValueRelationAccess().getGroup_2()); }
		(rule__ParamValueRelation__Group_2__0)
		{ after(grammarAccess.getParamValueRelationAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getParamValueRelationAccess().getGroup_3()); }
		(rule__ParamValueRelation__Group_3__0)
		{ after(grammarAccess.getParamValueRelationAccess().getGroup_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__PredefDepTypeAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredefinedDependencyAccess().getPredefDepTypeOrKeyword_1_0_0()); }
		'Or'
		{ after(grammarAccess.getPredefinedDependencyAccess().getPredefDepTypeOrKeyword_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getPredefinedDependencyAccess().getPredefDepTypeOnlyOneKeyword_1_0_1()); }
		'OnlyOne'
		{ after(grammarAccess.getPredefinedDependencyAccess().getPredefDepTypeOnlyOneKeyword_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getPredefinedDependencyAccess().getPredefDepTypeAllOrNoneKeyword_1_0_2()); }
		'AllOrNone'
		{ after(grammarAccess.getPredefinedDependencyAccess().getPredefDepTypeAllOrNoneKeyword_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getPredefinedDependencyAccess().getPredefDepTypeZeroOrOneKeyword_1_0_3()); }
		'ZeroOrOne'
		{ after(grammarAccess.getPredefinedDependencyAccess().getPredefDepTypeZeroOrOneKeyword_1_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveTerm__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveTermAccess().getParamAssignment_0()); }
		(rule__PositiveTerm__ParamAssignment_0)
		{ after(grammarAccess.getPositiveTermAccess().getParamAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getPositiveTermAccess().getParamAssignment_1()); }
		(rule__PositiveTerm__ParamAssignment_1)
		{ after(grammarAccess.getPositiveTermAccess().getParamAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getPositiveTermAccess().getRelationalDependencyParserRuleCall_2()); }
		ruleRelationalDependency
		{ after(grammarAccess.getPositiveTermAccess().getRelationalDependencyParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveClauseAccess().getFirstElementAssignment_0()); }
		(rule__PositiveClause__FirstElementAssignment_0)
		{ after(grammarAccess.getPositiveClauseAccess().getFirstElementAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getPositiveClauseAccess().getGroup_1()); }
		(rule__PositiveClause__Group_1__0)
		{ after(grammarAccess.getPositiveClauseAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause__FirstElementAlternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveClauseAccess().getFirstElementPositiveTermParserRuleCall_0_0_0()); }
		rulePositiveTerm
		{ after(grammarAccess.getPositiveClauseAccess().getFirstElementPositiveTermParserRuleCall_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getPositiveClauseAccess().getFirstElementRelationalDependencyParserRuleCall_0_0_1()); }
		ruleRelationalDependency
		{ after(grammarAccess.getPositiveClauseAccess().getFirstElementRelationalDependencyParserRuleCall_0_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getPositiveClauseAccess().getFirstElementArithmeticDependencyParserRuleCall_0_0_2()); }
		ruleArithmeticDependency
		{ after(grammarAccess.getPositiveClauseAccess().getFirstElementArithmeticDependencyParserRuleCall_0_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getPositiveClauseAccess().getFirstElementPositivePredefinedDependencyParserRuleCall_0_0_3()); }
		rulePositivePredefinedDependency
		{ after(grammarAccess.getPositiveClauseAccess().getFirstElementPositivePredefinedDependencyParserRuleCall_0_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositivePredefinedDependency__PredefDepTypeAlternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepTypeOrKeyword_0_0_0()); }
		'Or'
		{ after(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepTypeOrKeyword_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepTypeOnlyOneKeyword_0_0_1()); }
		'OnlyOne'
		{ after(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepTypeOnlyOneKeyword_0_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepTypeAllOrNoneKeyword_0_0_2()); }
		'AllOrNone'
		{ after(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepTypeAllOrNoneKeyword_0_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepTypeZeroOrOneKeyword_0_0_3()); }
		'ZeroOrOne'
		{ after(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepTypeZeroOrOneKeyword_0_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dependency__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dependency__Group__0__Impl
	rule__Dependency__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Dependency__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDependencyAccess().getDepAssignment_0()); }
	(rule__Dependency__DepAssignment_0)
	{ after(grammarAccess.getDependencyAccess().getDepAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dependency__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dependency__Group__1__Impl
	rule__Dependency__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Dependency__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDependencyAccess().getSemicolonKeyword_1()); }
	';'
	{ after(grammarAccess.getDependencyAccess().getSemicolonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dependency__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Dependency__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Dependency__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDependencyAccess().getNLTerminalRuleCall_2()); }
	(RULE_NL)?
	{ after(grammarAccess.getDependencyAccess().getNLTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalDependency__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationalDependency__Group__0__Impl
	rule__RelationalDependency__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalDependency__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalDependencyAccess().getParam1Assignment_0()); }
	(rule__RelationalDependency__Param1Assignment_0)
	{ after(grammarAccess.getRelationalDependencyAccess().getParam1Assignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalDependency__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationalDependency__Group__1__Impl
	rule__RelationalDependency__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalDependency__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalDependencyAccess().getRelationalOpAssignment_1()); }
	(rule__RelationalDependency__RelationalOpAssignment_1)
	{ after(grammarAccess.getRelationalDependencyAccess().getRelationalOpAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalDependency__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationalDependency__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalDependency__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalDependencyAccess().getParam2Assignment_2()); }
	(rule__RelationalDependency__Param2Assignment_2)
	{ after(grammarAccess.getRelationalDependencyAccess().getParam2Assignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArithmeticDependency__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithmeticDependency__Group__0__Impl
	rule__ArithmeticDependency__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticDependency__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithmeticDependencyAccess().getOperationAssignment_0()); }
	(rule__ArithmeticDependency__OperationAssignment_0)
	{ after(grammarAccess.getArithmeticDependencyAccess().getOperationAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticDependency__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithmeticDependency__Group__1__Impl
	rule__ArithmeticDependency__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticDependency__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithmeticDependencyAccess().getRelationalOpAssignment_1()); }
	(rule__ArithmeticDependency__RelationalOpAssignment_1)
	{ after(grammarAccess.getArithmeticDependencyAccess().getRelationalOpAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticDependency__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithmeticDependency__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticDependency__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithmeticDependencyAccess().getResultAssignment_2()); }
	(rule__ArithmeticDependency__ResultAssignment_2)
	{ after(grammarAccess.getArithmeticDependencyAccess().getResultAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group_0__0__Impl
	rule__Operation__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getFirstParamAssignment_0_0()); }
	(rule__Operation__FirstParamAssignment_0_0)
	{ after(grammarAccess.getOperationAccess().getFirstParamAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getOperationContinuationAssignment_0_1()); }
	(rule__Operation__OperationContinuationAssignment_0_1)
	{ after(grammarAccess.getOperationAccess().getOperationContinuationAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group_1__0__Impl
	rule__Operation__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getOpeningParenthesisAssignment_1_0()); }
	(rule__Operation__OpeningParenthesisAssignment_1_0)
	{ after(grammarAccess.getOperationAccess().getOpeningParenthesisAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group_1__1__Impl
	rule__Operation__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getOperationAssignment_1_1()); }
	(rule__Operation__OperationAssignment_1_1)
	{ after(grammarAccess.getOperationAccess().getOperationAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group_1__2__Impl
	rule__Operation__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getClosingParenthesisAssignment_1_2()); }
	(rule__Operation__ClosingParenthesisAssignment_1_2)
	{ after(grammarAccess.getOperationAccess().getClosingParenthesisAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getOperationContinuationAssignment_1_3()); }
	(rule__Operation__OperationContinuationAssignment_1_3)?
	{ after(grammarAccess.getOperationAccess().getOperationContinuationAssignment_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OperationContinuation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationContinuation__Group__0__Impl
	rule__OperationContinuation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationContinuation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationContinuationAccess().getArithOpAssignment_0()); }
	(rule__OperationContinuation__ArithOpAssignment_0)
	{ after(grammarAccess.getOperationContinuationAccess().getArithOpAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationContinuation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OperationContinuation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationContinuation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationContinuationAccess().getAdditionalParamsAssignment_1()); }
	(rule__OperationContinuation__AdditionalParamsAssignment_1)
	{ after(grammarAccess.getOperationContinuationAccess().getAdditionalParamsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalDependency__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalDependency__Group__0__Impl
	rule__ConditionalDependency__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalDependencyAccess().getIFKeyword_0()); }
	'IF'
	{ after(grammarAccess.getConditionalDependencyAccess().getIFKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalDependency__Group__1__Impl
	rule__ConditionalDependency__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalDependencyAccess().getConditionAssignment_1()); }
	(rule__ConditionalDependency__ConditionAssignment_1)
	{ after(grammarAccess.getConditionalDependencyAccess().getConditionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalDependency__Group__2__Impl
	rule__ConditionalDependency__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalDependencyAccess().getTHENKeyword_2()); }
	'THEN'
	{ after(grammarAccess.getConditionalDependencyAccess().getTHENKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalDependency__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalDependencyAccess().getConsequenceAssignment_3()); }
	(rule__ConditionalDependency__ConsequenceAssignment_3)
	{ after(grammarAccess.getConditionalDependencyAccess().getConsequenceAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Predicate__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Predicate__Group__0__Impl
	rule__Predicate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateAccess().getFirstClauseAssignment_0()); }
	(rule__Predicate__FirstClauseAssignment_0)
	{ after(grammarAccess.getPredicateAccess().getFirstClauseAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Predicate__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredicateAccess().getClauseContinuationAssignment_1()); }
	(rule__Predicate__ClauseContinuationAssignment_1)?
	{ after(grammarAccess.getPredicateAccess().getClauseContinuationAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Clause__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause__Group_1__0__Impl
	rule__Clause__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClauseAccess().getNotAssignment_1_0()); }
	(rule__Clause__NotAssignment_1_0)?
	{ after(grammarAccess.getClauseAccess().getNotAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause__Group_1__1__Impl
	rule__Clause__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClauseAccess().getOpeningParenthesisAssignment_1_1()); }
	(rule__Clause__OpeningParenthesisAssignment_1_1)
	{ after(grammarAccess.getClauseAccess().getOpeningParenthesisAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause__Group_1__2__Impl
	rule__Clause__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClauseAccess().getPredicateAssignment_1_2()); }
	(rule__Clause__PredicateAssignment_1_2)
	{ after(grammarAccess.getClauseAccess().getPredicateAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clause__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClauseAccess().getClosingParenthesisAssignment_1_3()); }
	(rule__Clause__ClosingParenthesisAssignment_1_3)
	{ after(grammarAccess.getClauseAccess().getClosingParenthesisAssignment_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term__Group_0__0__Impl
	rule__Term__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTermAccess().getNotAssignment_0_0()); }
	(rule__Term__NotAssignment_0_0)?
	{ after(grammarAccess.getTermAccess().getNotAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTermAccess().getParamAssignment_0_1()); }
	(rule__Term__ParamAssignment_0_1)
	{ after(grammarAccess.getTermAccess().getParamAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term__Group_1__0__Impl
	rule__Term__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTermAccess().getNotAssignment_1_0()); }
	(rule__Term__NotAssignment_1_0)?
	{ after(grammarAccess.getTermAccess().getNotAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTermAccess().getParamAssignment_1_1()); }
	(rule__Term__ParamAssignment_1_1)
	{ after(grammarAccess.getTermAccess().getParamAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParamValueRelation__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParamValueRelation__Group_0__0__Impl
	rule__ParamValueRelation__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamValueRelation__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamValueRelationAccess().getParamParserRuleCall_0_0()); }
	ruleParam
	{ after(grammarAccess.getParamValueRelationAccess().getParamParserRuleCall_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamValueRelation__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParamValueRelation__Group_0__1__Impl
	rule__ParamValueRelation__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamValueRelation__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamValueRelationAccess().getEqualsSignEqualsSignKeyword_0_1()); }
	'=='
	{ after(grammarAccess.getParamValueRelationAccess().getEqualsSignEqualsSignKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamValueRelation__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParamValueRelation__Group_0__2__Impl
	rule__ParamValueRelation__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamValueRelation__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamValueRelationAccess().getStringValuesAssignment_0_2()); }
	(rule__ParamValueRelation__StringValuesAssignment_0_2)
	{ after(grammarAccess.getParamValueRelationAccess().getStringValuesAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamValueRelation__Group_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParamValueRelation__Group_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamValueRelation__Group_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamValueRelationAccess().getGroup_0_3()); }
	(rule__ParamValueRelation__Group_0_3__0)*
	{ after(grammarAccess.getParamValueRelationAccess().getGroup_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParamValueRelation__Group_0_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParamValueRelation__Group_0_3__0__Impl
	rule__ParamValueRelation__Group_0_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamValueRelation__Group_0_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamValueRelationAccess().getVerticalLineKeyword_0_3_0()); }
	'|'
	{ after(grammarAccess.getParamValueRelationAccess().getVerticalLineKeyword_0_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamValueRelation__Group_0_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParamValueRelation__Group_0_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamValueRelation__Group_0_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamValueRelationAccess().getStringValuesAssignment_0_3_1()); }
	(rule__ParamValueRelation__StringValuesAssignment_0_3_1)
	{ after(grammarAccess.getParamValueRelationAccess().getStringValuesAssignment_0_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParamValueRelation__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParamValueRelation__Group_1__0__Impl
	rule__ParamValueRelation__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamValueRelation__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamValueRelationAccess().getParamParserRuleCall_1_0()); }
	ruleParam
	{ after(grammarAccess.getParamValueRelationAccess().getParamParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamValueRelation__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParamValueRelation__Group_1__1__Impl
	rule__ParamValueRelation__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamValueRelation__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamValueRelationAccess().getLIKEKeyword_1_1()); }
	'LIKE'
	{ after(grammarAccess.getParamValueRelationAccess().getLIKEKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamValueRelation__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParamValueRelation__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamValueRelation__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamValueRelationAccess().getPatternStringAssignment_1_2()); }
	(rule__ParamValueRelation__PatternStringAssignment_1_2)
	{ after(grammarAccess.getParamValueRelationAccess().getPatternStringAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParamValueRelation__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParamValueRelation__Group_2__0__Impl
	rule__ParamValueRelation__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamValueRelation__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamValueRelationAccess().getParamParserRuleCall_2_0()); }
	ruleParam
	{ after(grammarAccess.getParamValueRelationAccess().getParamParserRuleCall_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamValueRelation__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParamValueRelation__Group_2__1__Impl
	rule__ParamValueRelation__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamValueRelation__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamValueRelationAccess().getEqualsSignEqualsSignKeyword_2_1()); }
	'=='
	{ after(grammarAccess.getParamValueRelationAccess().getEqualsSignEqualsSignKeyword_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamValueRelation__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParamValueRelation__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamValueRelation__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamValueRelationAccess().getBooleanValueAssignment_2_2()); }
	(rule__ParamValueRelation__BooleanValueAssignment_2_2)
	{ after(grammarAccess.getParamValueRelationAccess().getBooleanValueAssignment_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParamValueRelation__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParamValueRelation__Group_3__0__Impl
	rule__ParamValueRelation__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamValueRelation__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamValueRelationAccess().getParamParserRuleCall_3_0()); }
	ruleParam
	{ after(grammarAccess.getParamValueRelationAccess().getParamParserRuleCall_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamValueRelation__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParamValueRelation__Group_3__1__Impl
	rule__ParamValueRelation__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamValueRelation__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamValueRelationAccess().getRelationalOpAssignment_3_1()); }
	(rule__ParamValueRelation__RelationalOpAssignment_3_1)
	{ after(grammarAccess.getParamValueRelationAccess().getRelationalOpAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamValueRelation__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParamValueRelation__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamValueRelation__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamValueRelationAccess().getDoubleValueAssignment_3_2()); }
	(rule__ParamValueRelation__DoubleValueAssignment_3_2)
	{ after(grammarAccess.getParamValueRelationAccess().getDoubleValueAssignment_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ClauseContinuation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClauseContinuation__Group__0__Impl
	rule__ClauseContinuation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClauseContinuation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClauseContinuationAccess().getLogicalOpAssignment_0()); }
	(rule__ClauseContinuation__LogicalOpAssignment_0)
	{ after(grammarAccess.getClauseContinuationAccess().getLogicalOpAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClauseContinuation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClauseContinuation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClauseContinuation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClauseContinuationAccess().getAdditionalElementsAssignment_1()); }
	(rule__ClauseContinuation__AdditionalElementsAssignment_1)
	{ after(grammarAccess.getClauseContinuationAccess().getAdditionalElementsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PredefinedDependency__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredefinedDependency__Group__0__Impl
	rule__PredefinedDependency__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredefinedDependencyAccess().getNotAssignment_0()); }
	(rule__PredefinedDependency__NotAssignment_0)?
	{ after(grammarAccess.getPredefinedDependencyAccess().getNotAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredefinedDependency__Group__1__Impl
	rule__PredefinedDependency__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredefinedDependencyAccess().getPredefDepTypeAssignment_1()); }
	(rule__PredefinedDependency__PredefDepTypeAssignment_1)
	{ after(grammarAccess.getPredefinedDependencyAccess().getPredefDepTypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredefinedDependency__Group__2__Impl
	rule__PredefinedDependency__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredefinedDependencyAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getPredefinedDependencyAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredefinedDependency__Group__3__Impl
	rule__PredefinedDependency__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredefinedDependencyAccess().getPredefDepElementsAssignment_3()); }
	(rule__PredefinedDependency__PredefDepElementsAssignment_3)
	{ after(grammarAccess.getPredefinedDependencyAccess().getPredefDepElementsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredefinedDependency__Group__4__Impl
	rule__PredefinedDependency__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getPredefinedDependencyAccess().getGroup_4()); }
		(rule__PredefinedDependency__Group_4__0)
		{ after(grammarAccess.getPredefinedDependencyAccess().getGroup_4()); }
	)
	(
		{ before(grammarAccess.getPredefinedDependencyAccess().getGroup_4()); }
		(rule__PredefinedDependency__Group_4__0)*
		{ after(grammarAccess.getPredefinedDependencyAccess().getGroup_4()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredefinedDependency__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredefinedDependencyAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getPredefinedDependencyAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PredefinedDependency__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredefinedDependency__Group_4__0__Impl
	rule__PredefinedDependency__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredefinedDependencyAccess().getCommaKeyword_4_0()); }
	','
	{ after(grammarAccess.getPredefinedDependencyAccess().getCommaKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredefinedDependency__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredefinedDependencyAccess().getPredefDepElementsAssignment_4_1()); }
	(rule__PredefinedDependency__PredefDepElementsAssignment_4_1)
	{ after(grammarAccess.getPredefinedDependencyAccess().getPredefDepElementsAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PositivePredicate__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositivePredicate__Group__0__Impl
	rule__PositivePredicate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PositivePredicate__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositivePredicateAccess().getFirstClauseAssignment_0()); }
	(rule__PositivePredicate__FirstClauseAssignment_0)
	{ after(grammarAccess.getPositivePredicateAccess().getFirstClauseAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositivePredicate__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositivePredicate__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PositivePredicate__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositivePredicateAccess().getClauseContinuationAssignment_1()); }
	(rule__PositivePredicate__ClauseContinuationAssignment_1)?
	{ after(grammarAccess.getPositivePredicateAccess().getClauseContinuationAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PositiveClause__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositiveClause__Group_1__0__Impl
	rule__PositiveClause__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositiveClauseAccess().getOpeningParenthesisAssignment_1_0()); }
	(rule__PositiveClause__OpeningParenthesisAssignment_1_0)
	{ after(grammarAccess.getPositiveClauseAccess().getOpeningParenthesisAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositiveClause__Group_1__1__Impl
	rule__PositiveClause__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositiveClauseAccess().getPredicateAssignment_1_1()); }
	(rule__PositiveClause__PredicateAssignment_1_1)
	{ after(grammarAccess.getPositiveClauseAccess().getPredicateAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositiveClause__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositiveClauseAccess().getClosingParenthesisAssignment_1_2()); }
	(rule__PositiveClause__ClosingParenthesisAssignment_1_2)
	{ after(grammarAccess.getPositiveClauseAccess().getClosingParenthesisAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PositiveClauseContinuation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositiveClauseContinuation__Group__0__Impl
	rule__PositiveClauseContinuation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClauseContinuation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositiveClauseContinuationAccess().getLogicalOpAssignment_0()); }
	(rule__PositiveClauseContinuation__LogicalOpAssignment_0)
	{ after(grammarAccess.getPositiveClauseContinuationAccess().getLogicalOpAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClauseContinuation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositiveClauseContinuation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClauseContinuation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositiveClauseContinuationAccess().getAdditionalElementsAssignment_1()); }
	(rule__PositiveClauseContinuation__AdditionalElementsAssignment_1)
	{ after(grammarAccess.getPositiveClauseContinuationAccess().getAdditionalElementsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PositivePredefinedDependency__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositivePredefinedDependency__Group__0__Impl
	rule__PositivePredefinedDependency__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PositivePredefinedDependency__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepTypeAssignment_0()); }
	(rule__PositivePredefinedDependency__PredefDepTypeAssignment_0)
	{ after(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositivePredefinedDependency__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositivePredefinedDependency__Group__1__Impl
	rule__PositivePredefinedDependency__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PositivePredefinedDependency__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositivePredefinedDependencyAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getPositivePredefinedDependencyAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositivePredefinedDependency__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositivePredefinedDependency__Group__2__Impl
	rule__PositivePredefinedDependency__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PositivePredefinedDependency__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepElementsAssignment_2()); }
	(rule__PositivePredefinedDependency__PredefDepElementsAssignment_2)
	{ after(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepElementsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositivePredefinedDependency__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositivePredefinedDependency__Group__3__Impl
	rule__PositivePredefinedDependency__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PositivePredefinedDependency__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getPositivePredefinedDependencyAccess().getGroup_3()); }
		(rule__PositivePredefinedDependency__Group_3__0)
		{ after(grammarAccess.getPositivePredefinedDependencyAccess().getGroup_3()); }
	)
	(
		{ before(grammarAccess.getPositivePredefinedDependencyAccess().getGroup_3()); }
		(rule__PositivePredefinedDependency__Group_3__0)*
		{ after(grammarAccess.getPositivePredefinedDependencyAccess().getGroup_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositivePredefinedDependency__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositivePredefinedDependency__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PositivePredefinedDependency__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositivePredefinedDependencyAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getPositivePredefinedDependencyAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PositivePredefinedDependency__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositivePredefinedDependency__Group_3__0__Impl
	rule__PositivePredefinedDependency__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PositivePredefinedDependency__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositivePredefinedDependencyAccess().getCommaKeyword_3_0()); }
	','
	{ after(grammarAccess.getPositivePredefinedDependencyAccess().getCommaKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositivePredefinedDependency__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositivePredefinedDependency__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PositivePredefinedDependency__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepElementsAssignment_3_1()); }
	(rule__PositivePredefinedDependency__PredefDepElementsAssignment_3_1)
	{ after(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepElementsAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__DependenciesAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getDependenciesDependencyParserRuleCall_0()); }
		ruleDependency
		{ after(grammarAccess.getModelAccess().getDependenciesDependencyParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Dependency__DepAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDependencyAccess().getDepAlternatives_0_0()); }
		(rule__Dependency__DepAlternatives_0_0)
		{ after(grammarAccess.getDependencyAccess().getDepAlternatives_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalDependency__Param1Assignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationalDependencyAccess().getParam1ParamParserRuleCall_0_0()); }
		ruleParam
		{ after(grammarAccess.getRelationalDependencyAccess().getParam1ParamParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalDependency__RelationalOpAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationalDependencyAccess().getRelationalOpRelationalOperatorParserRuleCall_1_0()); }
		ruleRelationalOperator
		{ after(grammarAccess.getRelationalDependencyAccess().getRelationalOpRelationalOperatorParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalDependency__Param2Assignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationalDependencyAccess().getParam2ParamParserRuleCall_2_0()); }
		ruleParam
		{ after(grammarAccess.getRelationalDependencyAccess().getParam2ParamParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticDependency__OperationAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArithmeticDependencyAccess().getOperationOperationParserRuleCall_0_0()); }
		ruleOperation
		{ after(grammarAccess.getArithmeticDependencyAccess().getOperationOperationParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticDependency__RelationalOpAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArithmeticDependencyAccess().getRelationalOpRelationalOperatorParserRuleCall_1_0()); }
		ruleRelationalOperator
		{ after(grammarAccess.getArithmeticDependencyAccess().getRelationalOpRelationalOperatorParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticDependency__ResultAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArithmeticDependencyAccess().getResultDOUBLETerminalRuleCall_2_0()); }
		RULE_DOUBLE
		{ after(grammarAccess.getArithmeticDependencyAccess().getResultDOUBLETerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__FirstParamAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationAccess().getFirstParamParamParserRuleCall_0_0_0()); }
		ruleParam
		{ after(grammarAccess.getOperationAccess().getFirstParamParamParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__OperationContinuationAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationAccess().getOperationContinuationOperationContinuationParserRuleCall_0_1_0()); }
		ruleOperationContinuation
		{ after(grammarAccess.getOperationAccess().getOperationContinuationOperationContinuationParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__OpeningParenthesisAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationAccess().getOpeningParenthesisLeftParenthesisKeyword_1_0_0()); }
		(
			{ before(grammarAccess.getOperationAccess().getOpeningParenthesisLeftParenthesisKeyword_1_0_0()); }
			'('
			{ after(grammarAccess.getOperationAccess().getOpeningParenthesisLeftParenthesisKeyword_1_0_0()); }
		)
		{ after(grammarAccess.getOperationAccess().getOpeningParenthesisLeftParenthesisKeyword_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__OperationAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationAccess().getOperationOperationParserRuleCall_1_1_0()); }
		ruleOperation
		{ after(grammarAccess.getOperationAccess().getOperationOperationParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__ClosingParenthesisAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationAccess().getClosingParenthesisRightParenthesisKeyword_1_2_0()); }
		(
			{ before(grammarAccess.getOperationAccess().getClosingParenthesisRightParenthesisKeyword_1_2_0()); }
			')'
			{ after(grammarAccess.getOperationAccess().getClosingParenthesisRightParenthesisKeyword_1_2_0()); }
		)
		{ after(grammarAccess.getOperationAccess().getClosingParenthesisRightParenthesisKeyword_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__OperationContinuationAssignment_1_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationAccess().getOperationContinuationOperationContinuationParserRuleCall_1_3_0()); }
		ruleOperationContinuation
		{ after(grammarAccess.getOperationAccess().getOperationContinuationOperationContinuationParserRuleCall_1_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationContinuation__ArithOpAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationContinuationAccess().getArithOpArithmeticOperatorParserRuleCall_0_0()); }
		ruleArithmeticOperator
		{ after(grammarAccess.getOperationContinuationAccess().getArithOpArithmeticOperatorParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationContinuation__AdditionalParamsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationContinuationAccess().getAdditionalParamsAlternatives_1_0()); }
		(rule__OperationContinuation__AdditionalParamsAlternatives_1_0)
		{ after(grammarAccess.getOperationContinuationAccess().getAdditionalParamsAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__ConditionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalDependencyAccess().getConditionPredicateParserRuleCall_1_0()); }
		rulePredicate
		{ after(grammarAccess.getConditionalDependencyAccess().getConditionPredicateParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__ConsequenceAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalDependencyAccess().getConsequencePredicateParserRuleCall_3_0()); }
		rulePredicate
		{ after(grammarAccess.getConditionalDependencyAccess().getConsequencePredicateParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__FirstClauseAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredicateAccess().getFirstClauseClauseParserRuleCall_0_0()); }
		ruleClause
		{ after(grammarAccess.getPredicateAccess().getFirstClauseClauseParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__ClauseContinuationAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredicateAccess().getClauseContinuationClauseContinuationParserRuleCall_1_0()); }
		ruleClauseContinuation
		{ after(grammarAccess.getPredicateAccess().getClauseContinuationClauseContinuationParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__FirstElementAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClauseAccess().getFirstElementAlternatives_0_0()); }
		(rule__Clause__FirstElementAlternatives_0_0)
		{ after(grammarAccess.getClauseAccess().getFirstElementAlternatives_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__NotAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClauseAccess().getNotNotParserRuleCall_1_0_0()); }
		ruleNot
		{ after(grammarAccess.getClauseAccess().getNotNotParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__OpeningParenthesisAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClauseAccess().getOpeningParenthesisLeftParenthesisKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getClauseAccess().getOpeningParenthesisLeftParenthesisKeyword_1_1_0()); }
			'('
			{ after(grammarAccess.getClauseAccess().getOpeningParenthesisLeftParenthesisKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getClauseAccess().getOpeningParenthesisLeftParenthesisKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__PredicateAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClauseAccess().getPredicatePredicateParserRuleCall_1_2_0()); }
		rulePredicate
		{ after(grammarAccess.getClauseAccess().getPredicatePredicateParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__ClosingParenthesisAssignment_1_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClauseAccess().getClosingParenthesisRightParenthesisKeyword_1_3_0()); }
		(
			{ before(grammarAccess.getClauseAccess().getClosingParenthesisRightParenthesisKeyword_1_3_0()); }
			')'
			{ after(grammarAccess.getClauseAccess().getClosingParenthesisRightParenthesisKeyword_1_3_0()); }
		)
		{ after(grammarAccess.getClauseAccess().getClosingParenthesisRightParenthesisKeyword_1_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__NotAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTermAccess().getNotNotParserRuleCall_0_0_0()); }
		ruleNot
		{ after(grammarAccess.getTermAccess().getNotNotParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__ParamAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTermAccess().getParamParamParserRuleCall_0_1_0()); }
		ruleParam
		{ after(grammarAccess.getTermAccess().getParamParamParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__NotAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTermAccess().getNotNotParserRuleCall_1_0_0()); }
		ruleNot
		{ after(grammarAccess.getTermAccess().getNotNotParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__ParamAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTermAccess().getParamParamValueRelationParserRuleCall_1_1_0()); }
		ruleParamValueRelation
		{ after(grammarAccess.getTermAccess().getParamParamValueRelationParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Param__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParamAccess().getNameAlternatives_0()); }
		(rule__Param__NameAlternatives_0)
		{ after(grammarAccess.getParamAccess().getNameAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamValueRelation__StringValuesAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParamValueRelationAccess().getStringValuesSTRINGTerminalRuleCall_0_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getParamValueRelationAccess().getStringValuesSTRINGTerminalRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamValueRelation__StringValuesAssignment_0_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParamValueRelationAccess().getStringValuesSTRINGTerminalRuleCall_0_3_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getParamValueRelationAccess().getStringValuesSTRINGTerminalRuleCall_0_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamValueRelation__PatternStringAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParamValueRelationAccess().getPatternStringSTRINGTerminalRuleCall_1_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getParamValueRelationAccess().getPatternStringSTRINGTerminalRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamValueRelation__BooleanValueAssignment_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParamValueRelationAccess().getBooleanValueBOOLEANTerminalRuleCall_2_2_0()); }
		RULE_BOOLEAN
		{ after(grammarAccess.getParamValueRelationAccess().getBooleanValueBOOLEANTerminalRuleCall_2_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamValueRelation__RelationalOpAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParamValueRelationAccess().getRelationalOpRelationalOperatorParserRuleCall_3_1_0()); }
		ruleRelationalOperator
		{ after(grammarAccess.getParamValueRelationAccess().getRelationalOpRelationalOperatorParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamValueRelation__DoubleValueAssignment_3_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParamValueRelationAccess().getDoubleValueDOUBLETerminalRuleCall_3_2_0()); }
		RULE_DOUBLE
		{ after(grammarAccess.getParamValueRelationAccess().getDoubleValueDOUBLETerminalRuleCall_3_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClauseContinuation__LogicalOpAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClauseContinuationAccess().getLogicalOpLogicalOperatorParserRuleCall_0_0()); }
		ruleLogicalOperator
		{ after(grammarAccess.getClauseContinuationAccess().getLogicalOpLogicalOperatorParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClauseContinuation__AdditionalElementsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClauseContinuationAccess().getAdditionalElementsPredicateParserRuleCall_1_0()); }
		rulePredicate
		{ after(grammarAccess.getClauseContinuationAccess().getAdditionalElementsPredicateParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__NotAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredefinedDependencyAccess().getNotNotParserRuleCall_0_0()); }
		ruleNot
		{ after(grammarAccess.getPredefinedDependencyAccess().getNotNotParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__PredefDepTypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredefinedDependencyAccess().getPredefDepTypeAlternatives_1_0()); }
		(rule__PredefinedDependency__PredefDepTypeAlternatives_1_0)
		{ after(grammarAccess.getPredefinedDependencyAccess().getPredefDepTypeAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__PredefDepElementsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredefinedDependencyAccess().getPredefDepElementsPositivePredicateParserRuleCall_3_0()); }
		rulePositivePredicate
		{ after(grammarAccess.getPredefinedDependencyAccess().getPredefDepElementsPositivePredicateParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefinedDependency__PredefDepElementsAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredefinedDependencyAccess().getPredefDepElementsPositivePredicateParserRuleCall_4_1_0()); }
		rulePositivePredicate
		{ after(grammarAccess.getPredefinedDependencyAccess().getPredefDepElementsPositivePredicateParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositivePredicate__FirstClauseAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositivePredicateAccess().getFirstClausePositiveClauseParserRuleCall_0_0()); }
		rulePositiveClause
		{ after(grammarAccess.getPositivePredicateAccess().getFirstClausePositiveClauseParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositivePredicate__ClauseContinuationAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositivePredicateAccess().getClauseContinuationPositiveClauseContinuationParserRuleCall_1_0()); }
		rulePositiveClauseContinuation
		{ after(grammarAccess.getPositivePredicateAccess().getClauseContinuationPositiveClauseContinuationParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveTerm__ParamAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveTermAccess().getParamParamParserRuleCall_0_0()); }
		ruleParam
		{ after(grammarAccess.getPositiveTermAccess().getParamParamParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveTerm__ParamAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveTermAccess().getParamParamValueRelationParserRuleCall_1_0()); }
		ruleParamValueRelation
		{ after(grammarAccess.getPositiveTermAccess().getParamParamValueRelationParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause__FirstElementAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveClauseAccess().getFirstElementAlternatives_0_0()); }
		(rule__PositiveClause__FirstElementAlternatives_0_0)
		{ after(grammarAccess.getPositiveClauseAccess().getFirstElementAlternatives_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause__OpeningParenthesisAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveClauseAccess().getOpeningParenthesisLeftParenthesisKeyword_1_0_0()); }
		(
			{ before(grammarAccess.getPositiveClauseAccess().getOpeningParenthesisLeftParenthesisKeyword_1_0_0()); }
			'('
			{ after(grammarAccess.getPositiveClauseAccess().getOpeningParenthesisLeftParenthesisKeyword_1_0_0()); }
		)
		{ after(grammarAccess.getPositiveClauseAccess().getOpeningParenthesisLeftParenthesisKeyword_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause__PredicateAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveClauseAccess().getPredicatePositivePredicateParserRuleCall_1_1_0()); }
		rulePositivePredicate
		{ after(grammarAccess.getPositiveClauseAccess().getPredicatePositivePredicateParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClause__ClosingParenthesisAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveClauseAccess().getClosingParenthesisRightParenthesisKeyword_1_2_0()); }
		(
			{ before(grammarAccess.getPositiveClauseAccess().getClosingParenthesisRightParenthesisKeyword_1_2_0()); }
			')'
			{ after(grammarAccess.getPositiveClauseAccess().getClosingParenthesisRightParenthesisKeyword_1_2_0()); }
		)
		{ after(grammarAccess.getPositiveClauseAccess().getClosingParenthesisRightParenthesisKeyword_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClauseContinuation__LogicalOpAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveClauseContinuationAccess().getLogicalOpLogicalOperatorParserRuleCall_0_0()); }
		ruleLogicalOperator
		{ after(grammarAccess.getPositiveClauseContinuationAccess().getLogicalOpLogicalOperatorParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveClauseContinuation__AdditionalElementsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveClauseContinuationAccess().getAdditionalElementsPositivePredicateParserRuleCall_1_0()); }
		rulePositivePredicate
		{ after(grammarAccess.getPositiveClauseContinuationAccess().getAdditionalElementsPositivePredicateParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositivePredefinedDependency__PredefDepTypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepTypeAlternatives_0_0()); }
		(rule__PositivePredefinedDependency__PredefDepTypeAlternatives_0_0)
		{ after(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepTypeAlternatives_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositivePredefinedDependency__PredefDepElementsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepElementsPositivePredicateParserRuleCall_2_0()); }
		rulePositivePredicate
		{ after(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepElementsPositivePredicateParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositivePredefinedDependency__PredefDepElementsAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepElementsPositivePredicateParserRuleCall_3_1_0()); }
		rulePositivePredicate
		{ after(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepElementsPositivePredicateParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_NL : ('\r'? '\n')+;

RULE_BOOLEAN : ('true'|'false');

RULE_DOUBLE : ('-' ' '*)? RULE_INT ('.' RULE_INT)?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_'|'.') ('a'..'z'|'A'..'Z'|'_'|'.'|'0'..'9')*;

RULE_ID_SPECIAL_CHARS : '[' '^'? ('a'..'z'|'A'..'Z'|'_'|'.'|'-'|'/'|':'|'['|']') ('a'..'z'|'A'..'Z'|'_'|'.'|'-'|'/'|':'|'['|']'|'0'..'9')* ']';

fragment RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
