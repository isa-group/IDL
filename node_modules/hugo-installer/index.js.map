{"version":3,"file":"index.js","sources":["../src/install-hugo.ts"],"sourcesContent":["import { spawn } from 'child_process';\nimport * as crypto from 'crypto';\nimport decompress from 'decompress';\nimport del from 'del';\nimport * as fs from 'fs';\nimport got, { OptionsOfTextResponseBody } from 'got';\nimport { HttpProxyAgent, HttpsProxyAgent } from 'hpagent';\nimport * as path from 'path';\nimport semver from 'semver';\n\nimport hugoReleasesMeta from './../generated/hugo-releases-meta.json';\nimport { InstallHugoOptions } from './install-hugo.interfaces';\n\n/**\n * Create fetch options\n */\nconst createFetchOptions = ({\n  httpProxy,\n  httpsProxy,\n}: Pick<InstallHugoOptions, 'httpProxy' | 'httpsProxy'>): OptionsOfTextResponseBody | undefined => {\n  return {\n    agent: {\n      ...(httpProxy === null\n        ? {}\n        : {\n            http: new HttpProxyAgent({\n              proxy: httpProxy,\n            }),\n          }),\n      ...(httpsProxy === null\n        ? {}\n        : {\n            https: new HttpsProxyAgent({\n              proxy: httpsProxy,\n            }),\n          }),\n    },\n  };\n};\n\n/**\n * Clenaup and prepare destination\n */\nconst cleanupAndPrepareDestination = async ({ destination }: Pick<InstallHugoOptions, 'destination'>): Promise<void> => {\n  // Delete destination folder with all its content\n  await del(path.join(destination, '**'));\n\n  // Prepare destination directory (does nothing if it already exists)\n  await fs.promises.mkdir(destination, { recursive: true });\n};\n\n/**\n * Fetch binary\n */\nconst fetchBinary = async ({\n  arch,\n  downloadUrl,\n  extended,\n  httpProxy,\n  httpsProxy,\n  os,\n  version,\n}: Pick<InstallHugoOptions, 'arch' | 'downloadUrl' | 'extended' | 'httpProxy' | 'httpsProxy' | 'os' | 'version'>): Promise<{\n  binaryAsBuffer: Buffer;\n  binaryFileName: string;\n}> => {\n  // Find hugo binary release meta for the given os-arch combination\n  const binaryMeta =\n    hugoReleasesMeta.binaries.find((binary): boolean => {\n      return binary.arch === arch && binary.os === os;\n    }) || null;\n  if (binaryMeta === null) {\n    throw new Error(\n      `A hugo release for os=\"${os}\" and arch=\"${arch}\" is not known to \"hugo-installer\". If you think this is a bug, feel free to open a GitHub issue here: https://github.com/dominique-mueller/hugo-installer/issues/new.`,\n    );\n  }\n\n  // Find binary file pattern for the given version\n  const binaryFileNamePattern = binaryMeta.fileNamePatternHistory.reverse().reduce((fileNamePattern, fileNamePatternHistoryItem) => {\n    return semver.gte(semver.coerce(version), semver.coerce(fileNamePatternHistoryItem.version))\n      ? fileNamePatternHistoryItem\n      : fileNamePattern;\n  }, null);\n  if (binaryFileNamePattern === null || binaryFileNamePattern.fileNamePattern === null) {\n    throw new Error(\n      `A Hugo binary file for version=\"${version}\"${\n        extended ? ' (extended)' : ''\n      }, os=\"${os}\" and arch=\"${arch}\" is not known to \"hugo-installer\". If you think this is a bug, feel free to open a GitHub issue here: https://github.com/dominique-mueller/hugo-installer/issues/new.`,\n    );\n  }\n\n  // Construct binary file name and URL\n  const binaryFileName = binaryFileNamePattern.fileNamePattern\n    .replace('{{variant}}', extended ? 'hugo_extended' : 'hugo')\n    .replace('{{version}}', version);\n  const binaryUrl = new URL(`v${version}/${binaryFileName}`, downloadUrl).toString();\n\n  // Download binary\n  console.log(`> Downloading binary from \"${binaryUrl}\"`);\n  let binaryAsBuffer: Buffer;\n  try {\n    const binaryResponse = await got(binaryUrl, createFetchOptions({ httpProxy, httpsProxy }));\n    binaryAsBuffer = binaryResponse.rawBody;\n  } catch (error) {\n    throw new Error(`An error occured while trying to download the binary from \"${binaryUrl}\". Details: ${error.message}`);\n  }\n\n  // Done\n  return {\n    binaryAsBuffer,\n    binaryFileName,\n  };\n};\n\n/**\n * Verify binary checksum\n */\nconst verifyBinaryChecksum = async (\n  binaryAsBuffer: Buffer,\n  binaryFileName: string,\n  {\n    downloadUrl,\n    extended,\n    httpProxy,\n    httpsProxy,\n    version,\n  }: Pick<InstallHugoOptions, 'downloadUrl' | 'extended' | 'httpProxy' | 'httpsProxy' | 'version'>,\n): Promise<void> => {\n  // Find checksum file pattern\n  const checksumFileNamePattern = hugoReleasesMeta.checksumFilePatternHistory\n    .reverse()\n    .reduce((fileNamePattern, fileNamePatternHistoryItem) => {\n      return semver.gte(semver.coerce(version), semver.coerce(fileNamePatternHistoryItem.version))\n        ? fileNamePatternHistoryItem\n        : fileNamePattern;\n    }, null);\n  if (checksumFileNamePattern == null || checksumFileNamePattern.fileNamePattern === null) {\n    throw new Error(\n      `A Hugo checksum file for version=\"${version}\"${\n        extended ? ' (extended)' : ''\n      } is not known to \"hugo-installer\". If you think this is a bug, feel free to open a GitHub issue here: https://github.com/dominique-mueller/hugo-installer/issues/new.`,\n    );\n  }\n\n  // Construct checksum file name and url\n  const checksumFileName = checksumFileNamePattern.fileNamePattern\n    .replace('{{variant}}', extended && checksumFileNamePattern.useSpecificVariant ? 'hugo_extended' : 'hugo')\n    .replace('{{version}}', version);\n  const checksumUrl = new URL(`v${version}/${checksumFileName}`, downloadUrl).toString();\n\n  console.log(`> Downloading checksum from \"${checksumUrl}\"`);\n\n  // Download checksum\n  let rawChecksums: string;\n  try {\n    const checksumResponse = await got(checksumUrl, createFetchOptions({ httpProxy, httpsProxy }));\n    rawChecksums = checksumResponse.body;\n  } catch (error) {\n    throw new Error(`An error occured while trying to download the checksum. Details: ${error.message}`);\n  }\n\n  // Find expected checksum\n  const rawChecksumLine =\n    rawChecksums.split('\\n').find((rawChecksumLine) => {\n      return rawChecksumLine.endsWith(binaryFileName);\n    }) || null;\n  if (rawChecksumLine === null) {\n    throw new Error(`An error occured while trying to find the checksum for version \"${version}\" the checksum.`);\n  }\n  const expectedChecksum = rawChecksumLine.split(' ')[0];\n\n  // Generate actual checksum from downloaded binary\n  const actualChecksum = crypto.createHash('sha256').update(binaryAsBuffer).digest('hex');\n\n  console.log(`> Verifying binary checksum`);\n\n  // Verify checksum\n  if (actualChecksum !== expectedChecksum) {\n    throw new Error(`The binary file could not be verified by its checksum. Expected: \"${expectedChecksum}\". Actual: \"${actualChecksum}\"`);\n  }\n};\n\n/**\n * Write binary to disk\n */\nconst writeBinaryToDisk = async (binaryAsBuffer, { destination }: Pick<InstallHugoOptions, 'destination'>): Promise<void> => {\n  console.log(`> Extracting binary to disk`);\n\n  // Decompress and write package to disk\n  const decompressedFiles = await decompress(binaryAsBuffer, destination);\n\n  // Apply file permissions\n  await Promise.all(\n    decompressedFiles.map((decompressedFile) => {\n      return fs.promises.chmod(path.join(destination, decompressedFile.path), 0o755);\n    }),\n  );\n};\n\n/**\n * Verify binary health\n */\nconst verifyBinaryHealth = async ({ destination }: Pick<InstallHugoOptions, 'destination'>): Promise<string> => {\n  console.log(`> Verifying binary health`);\n\n  return new Promise<string>((resolve, reject): void => {\n    let hugoVersionConsoleOutput = null;\n    const childProcess = spawn(path.join(destination, 'hugo'), ['version']);\n    childProcess.stdout.on('data', (data) => {\n      hugoVersionConsoleOutput = data.toString().replace(/\\r?\\n|\\r/g, '');\n    });\n    childProcess.on('close', () => {\n      resolve(hugoVersionConsoleOutput);\n    });\n    childProcess.on('error', (error) => {\n      reject(`An error occured while verifiy the binary health. Details: ${error.message}`);\n    });\n  });\n};\n\n/**\n * Generate and write version to disk\n */\nconst generateAndWriteVersionToDisk = async ({\n  arch,\n  destination,\n  extended,\n  os,\n  version,\n}: Pick<InstallHugoOptions, 'arch' | 'destination' | 'extended' | 'os' | 'version'>): Promise<void> => {\n  const versionFileContent = {\n    arch,\n    extended,\n    os,\n    version,\n  };\n  await fs.promises.writeFile(path.join(destination, 'version.json'), JSON.stringify(versionFileContent, null, '  '));\n};\n\n/**\n * Check for existing binary\n */\nconst checkForExistingBinary = async ({\n  arch,\n  destination,\n  extended,\n  os,\n  version,\n}: Pick<InstallHugoOptions, 'arch' | 'destination' | 'extended' | 'os' | 'version'>): Promise<boolean> => {\n  console.log('> Checking for existing binary');\n\n  try {\n    // Try to read and parse version file\n    const versionFileContentRaw = await fs.promises.readFile(path.join(destination, 'version.json'), { encoding: 'utf-8' });\n    const versionFileContent = JSON.parse(versionFileContentRaw);\n\n    // Check if the existing binary is the one we need anyways\n    const doesBinaryAlreadyExist =\n      versionFileContent.arch === arch &&\n      versionFileContent.extended === extended &&\n      versionFileContent.os === os &&\n      versionFileContent.version === version;\n\n    if (doesBinaryAlreadyExist) {\n      console.log('  Binary already exists!');\n    }\n\n    return doesBinaryAlreadyExist;\n  } catch (error) {\n    return false;\n  }\n};\n\n/**\n * Install hugo binary\n */\nexport async function installHugo({\n  arch,\n  downloadUrl,\n  destination,\n  extended,\n  force,\n  httpProxy,\n  httpsProxy,\n  os,\n  skipChecksumCheck,\n  skipHealthCheck,\n  version,\n}: InstallHugoOptions): Promise<void> {\n  // Start log\n  console.log('');\n  console.log('Hugo Installer');\n  console.log('');\n\n  // Check for existing binary\n  const doesBinaryAlreadyExist = force\n    ? false\n    : await checkForExistingBinary({\n        arch,\n        destination,\n        extended,\n        os,\n        version,\n      });\n\n  // Cleanup and download binary\n  if (!doesBinaryAlreadyExist) {\n    await cleanupAndPrepareDestination({ destination });\n    const { binaryAsBuffer, binaryFileName } = await fetchBinary({ arch, downloadUrl, extended, httpProxy, httpsProxy, os, version });\n    if (!skipChecksumCheck) {\n      await verifyBinaryChecksum(binaryAsBuffer, binaryFileName, { downloadUrl, extended, httpProxy, httpsProxy, version });\n    }\n    await writeBinaryToDisk(binaryAsBuffer, { destination });\n  }\n\n  // Run health check (even if it already existed)\n  let versionOutput = null;\n  if (!skipHealthCheck) {\n    versionOutput = await verifyBinaryHealth({ destination });\n  }\n\n  // Write version info to disk\n  await generateAndWriteVersionToDisk({\n    arch,\n    destination,\n    extended,\n    os,\n    version,\n  });\n\n  // End log\n  console.log('');\n  console.log(`Hugo is now available in \"${destination}\".`);\n  console.log('');\n  console.log(`- Version       ${version}`);\n  console.log(`- Extended      ${extended ? 'Yes' : 'No'}`);\n  console.log(`- OS            ${os}`);\n  console.log(`- Architecture  ${arch}`);\n  if (versionOutput) {\n    console.log('');\n    console.log(versionOutput);\n  }\n  console.log('');\n}\n"],"names":[],"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"}