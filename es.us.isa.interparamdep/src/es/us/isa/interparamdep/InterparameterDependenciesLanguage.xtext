grammar es.us.isa.interparamdep.InterparameterDependenciesLanguage with org.eclipse.xtext.common.Terminals

generate interparameterDependenciesLanguage "http://www.isa.us.es/interparamdep/InterparameterDependenciesLanguage"

Model:
	dependencies+=Dependency*
;

Dependency:
	dep=(ArithmeticDependency | ConditionalDependency | PredefinedDependency) ';' NL?
;

terminal NL:
	('\r'? '\n')+
;

ArithmeticDependency:
	param1=ID arithOp=ArithmeticOperator param2=ID
;

ArithmeticOperator:
	'<' | '>' | '<=' | '>=' | '=' | '!='
;

ConditionalDependency:
	'IF' condition=Predicate 'THEN' consequence=Predicate
;

Predicate returns GeneralPredicate:
	Atomic |
	Clause
;

Atomic returns GeneralAtomic:
	not=Not? param=Param |
	not=Not? param=ParamAssignment |
	ArithmeticDependency
;

Param:
	name=ID
;

ParamAssignment:
	Param '=' paramValues+=STRING('|'paramValues+=STRING)*
;

Clause returns GeneralClause:
	firstElement=Atomic clauseContinuation=ClauseContinuation |
	not=Not? '(' firstElement=(Atomic|PredefinedDependency) clauseContinuation=ClauseContinuation ')' (clauseContinuation2=ClauseContinuation)? |
	firstElement=PredefinedDependency (clauseContinuation=ClauseContinuation)?
;

ClauseContinuation returns GeneralClauseContinuation:
	logicalOp=LogicalOperator additionalElements=Predicate
;

PredefinedDependency returns GeneralPredefinedDependency:
	not=Not? predefDepType=('Or' | 'OnlyOne' | 'AllOrNone' | 'ZeroOrOne') '(' predefDepClauses+=PositivePredicate (',' predefDepClauses+=PositivePredicate)+ ')'
;

PositivePredicate returns GeneralPredicate:
	PositiveAtomic |
	PositiveClause
;

PositiveAtomic returns GeneralAtomic:
	param=Param |
	param=ParamAssignment |
	ArithmeticDependency
;

PositiveClause returns GeneralClause:
	firstElement=PositiveAtomic clauseContinuation=PositiveClauseContinuation |
	'(' firstElement=(PositiveAtomic|PositivePredefinedDependency) clauseContinuation=PositiveClauseContinuation ')' (clauseContinuation2=PositiveClauseContinuation)? |
	firstElement=PositivePredefinedDependency (clauseContinuation=PositiveClauseContinuation)?
;

PositiveClauseContinuation returns GeneralClauseContinuation:
	logicalOp=LogicalOperator additionalElements=PositivePredicate
;

PositivePredefinedDependency returns GeneralPredefinedDependency:
	predefDepType=('Or' | 'OnlyOne' | 'AllOrNone' | 'ZeroOrOne') '(' predefDepClauses+=PositivePredicate (',' predefDepClauses+=PositivePredicate)+ ')'
;

Not:
	'NOT'
;

LogicalOperator:
	'AND' | 'OR'
;


