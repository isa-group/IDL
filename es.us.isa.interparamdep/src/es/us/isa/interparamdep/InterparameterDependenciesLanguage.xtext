grammar es.us.isa.interparamdep.InterparameterDependenciesLanguage with org.eclipse.xtext.common.Terminals

generate interparameterDependenciesLanguage "http://www.isa.us.es/interparamdep/InterparameterDependenciesLanguage"

Model:
	dependencies+=Dependency*
;

Dependency:
	dep=(RelationalDependency | ArithmeticDependency | ConditionalDependency | PredefinedDependency) ';' NL?
;

terminal NL:
	('\r'? '\n')+
;

terminal BOOLEAN:
	'true'|'false'
;

terminal DOUBLE:
	INT ('.' INT)?
;

@Override 
terminal ID: 
    ('^')?('a'..'z'|'A'..'Z'|'_'|'.') ('a'..'z'|'A'..'Z'|'_'|'.'|'0'..'9')*
;

terminal ID_SPECIAL_CHARS: 
    '['('^')?('a'..'z'|'A'..'Z'|'_'|'.'|'-'|'/'|':') ('a'..'z'|'A'..'Z'|'_'|'.'|'-'|'/'|':'|'0'..'9')*']'
;

RelationalOperator:
	'<' | '>' | '<=' | '>=' | '==' | '!='
;

ArithmeticOperator:
	'+' | '-' | '*' | '/'
;

Not:
	'NOT'
;

LogicalOperator:
	'AND' | 'OR'
;

RelationalDependency:
	param1=Param relationalOp=RelationalOperator param2=Param
;

ArithmeticDependency:
	operation=Operation relationalOp=RelationalOperator result=DOUBLE
;

Operation:
	firstParam=Param operationContinuation=OperationContinuation |
	openingParenthesis='(' operation=Operation closingParenthesis=')' (operationContinuation=OperationContinuation)?
;

OperationContinuation:
	arithOp=ArithmeticOperator additionalParams=(Param|Operation)
;

ConditionalDependency:
	'IF' condition=Predicate 'THEN' consequence=Predicate
;

Predicate returns GeneralPredicate:
	firstClause=Clause (clauseContinuation=ClauseContinuation)?
;

Clause returns GeneralClause:
	firstElement=(Term|RelationalDependency|ArithmeticDependency|PredefinedDependency) |
	not=Not? openingParenthesis='(' predicate=Predicate closingParenthesis=')'
;

Term returns GeneralTerm:
	not=Not? param=Param |
	not=Not? param=ParamValueRelation
;

Param:
	name=(ID|ID_SPECIAL_CHARS)
;

ParamValueRelation:
	Param '==' stringValues+=STRING('|'stringValues+=STRING)* |
	Param 'LIKE' patternString=STRING |
	Param '==' booleanValue=BOOLEAN |
	Param relationalOp=RelationalOperator doubleValue=DOUBLE
;

ClauseContinuation returns GeneralClauseContinuation:
	logicalOp=LogicalOperator additionalElements=Predicate
;

PredefinedDependency returns GeneralPredefinedDependency:
	not=Not? predefDepType=('Or' | 'OnlyOne' | 'AllOrNone' | 'ZeroOrOne') '(' predefDepElements+=PositivePredicate (',' predefDepElements+=PositivePredicate)+ ')'
;

PositivePredicate returns GeneralPredicate:
	firstClause=PositiveClause (clauseContinuation=PositiveClauseContinuation)?
;

PositiveTerm returns GeneralTerm:
	param=Param |
	param=ParamValueRelation |
	RelationalDependency
;

PositiveClause returns GeneralClause:
	firstElement=(PositiveTerm|RelationalDependency|ArithmeticDependency|PositivePredefinedDependency) |
	openingParenthesis='(' predicate=PositivePredicate closingParenthesis=')'
;

PositiveClauseContinuation returns GeneralClauseContinuation:
	logicalOp=LogicalOperator additionalElements=PositivePredicate
;

PositivePredefinedDependency returns GeneralPredefinedDependency:
	predefDepType=('Or' | 'OnlyOne' | 'AllOrNone' | 'ZeroOrOne') '(' predefDepElements+=PositivePredicate (',' predefDepElements+=PositivePredicate)+ ')'
;

