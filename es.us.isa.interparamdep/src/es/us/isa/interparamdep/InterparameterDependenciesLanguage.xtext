grammar es.us.isa.interparamdep.InterparameterDependenciesLanguage with org.eclipse.xtext.common.Terminals

generate interparameterDependenciesLanguage "http://www.isa.us.es/interparamdep/InterparameterDependenciesLanguage"

Model:
	dependencies+=Dependency*
;

Dependency:
	dep=(ComparisonDependency | ArithmeticDependency | ConditionalDependency | PredefinedDependency) ';' NL?
;

terminal NL:
	('\r'? '\n')+
;

terminal BOOLEAN:
	'true'|'false'
;

terminal DOUBLE:
	INT ('.' INT)?
;

@Override 
terminal ID: 
    ('^')?('a'..'z'|'A'..'Z'|'_'|'.') ('a'..'z'|'A'..'Z'|'_'|'.'|'0'..'9')*
; 

ArithmeticOperator:
	'<' | '>' | '<=' | '>=' | '=' | '!='
;

MathOperator:
	'+' | '-' | '*' | '/'
;

Not:
	'NOT'
;

LogicalOperator:
	'AND' | 'OR'
;


ComparisonDependency:
	param1=ID arithOp=ArithmeticOperator param2=ID
;

ArithmeticDependency:
	operation=Operation arithOp=ArithmeticOperator result=DOUBLE
;

Operation:
	firstParam=Param (operationContinuation=OperationContinuation)? |
	'(' firstParam=Param operationContinuation=OperationContinuation ')' (operationContinuation2=OperationContinuation)?
;

OperationContinuation:
	mathOp=MathOperator additionalParams=Operation
;

ConditionalDependency:
	'IF' condition=Clause 'THEN' consequence=Clause
;

Atomic returns GeneralAtomic:
	not=Not? param=Param |
	not=Not? param=ParamAssignment |
	ComparisonDependency
;

Param:
	name=ID //| preName+=ID('.'preName+=ID)* '.' name=ID
;

ParamAssignment:
	Param '=' paramValues+=STRING('|'paramValues+=STRING)* additionalValues='|*'? |
	Param '=' paramValues+=BOOLEAN |
	Param arithOp=ArithmeticOperator paramValues+=DOUBLE
;

Clause returns GeneralClause:
	firstElement=Atomic (clauseContinuation=ClauseContinuation)? |
	not=Not? '(' firstElement=(Atomic|PredefinedDependency|ArithmeticDependency) clauseContinuation=ClauseContinuation ')' (clauseContinuation2=ClauseContinuation)? |
	firstElement=(PredefinedDependency|ArithmeticDependency) (clauseContinuation=ClauseContinuation)?
;

ClauseContinuation returns GeneralClauseContinuation:
	logicalOp=LogicalOperator additionalElements=Clause
;

PredefinedDependency returns GeneralPredefinedDependency:
	not=Not? predefDepType=('Or' | 'OnlyOne' | 'AllOrNone' | 'ZeroOrOne') '(' predefDepClauses+=PositiveClause (',' predefDepClauses+=PositiveClause)+ ')'
;

PositiveAtomic returns GeneralAtomic:
	param=Param |
	param=ParamAssignment |
	ComparisonDependency
;

PositiveClause returns GeneralClause:
	firstElement=PositiveAtomic (clauseContinuation=PositiveClauseContinuation)? |
	'(' firstElement=(PositiveAtomic|PositivePredefinedDependency|ArithmeticDependency) clauseContinuation=PositiveClauseContinuation ')' (clauseContinuation2=PositiveClauseContinuation)? |
	firstElement=(PositivePredefinedDependency|ArithmeticDependency) (clauseContinuation=PositiveClauseContinuation)?
;

PositiveClauseContinuation returns GeneralClauseContinuation:
	logicalOp=LogicalOperator additionalElements=PositiveClause
;

PositivePredefinedDependency returns GeneralPredefinedDependency:
	predefDepType=('Or' | 'OnlyOne' | 'AllOrNone' | 'ZeroOrOne') '(' predefDepClauses+=PositiveClause (',' predefDepClauses+=PositiveClause)+ ')'
;

