grammar es.us.isa.interparamdep.InterparameterDependenciesLanguage with org.eclipse.xtext.common.Terminals

generate interparameterDependenciesLanguage "http://www.isa.us.es/interparamdep/InterparameterDependenciesLanguage"

Model:
	dependencies+=Dependency*
;

Dependency:
	dep=(ArithmeticDependency | ConditionalDependency | PredefinedDependency) ';' NL?
;

terminal NL:
	('\r'? '\n')+
;

ArithmeticDependency:
	param1=ID arithOp=ArithmeticOperator param2=ID
;

ArithmeticOperator:
	'<' | '>' | '<=' | '>=' | '=' | '!='
;

ConditionalDependency:
	'IF' condition=Predicate 'THEN' consequence=Predicate
;

Predicate:
	Clause |
	Atomic
;

Atomic:
	not=Not? param=Param |
	not=Not? paramAssignment=ParamAssignment |
	ArithmeticDependency
;

Param:
	name=ID
;

ParamAssignment:
	Param '=' paramValues+=STRING('|'paramValues+=STRING)*
;

Clause:
	firstElement=Atomic clauseContinuation=ClauseContinuation |
	not=Not? '(' firstElement=(Atomic|PredefinedDependency) clauseContinuation=ClauseContinuation ')' (clauseContinuation2=ClauseContinuation)? |
	firstElement=PredefinedDependency (clauseContinuation=ClauseContinuation)?
;

ClauseContinuation:
	logicalOp=LogicalOperator additionalElements=(Atomic|Clause)
;

PredefinedDependency:
	not=Not? predefDepType=('Or' | 'OnlyOne' | 'AllOrNone' | 'ZeroOrOne') '(' predefDepClauses+=(PositiveAtomic|PositiveClause) (',' predefDepClauses+=(PositiveAtomic|PositiveClause))+ ')'
;

PositiveAtomic:
	Param |
	ParamAssignment |
	ArithmeticDependency
;

PositiveClauseContinuation:
	logicalOp=LogicalOperator additionalElements=(PositiveAtomic|PositiveClause)
;

PositiveClause:
	positiveFirstElement=PositiveAtomic positiveClauseContinuation=PositiveClauseContinuation |
	'(' positiveFirstElement=(PositiveAtomic|PositivePredefinedDependency) positiveClauseContinuation=PositiveClauseContinuation ')' (positiveClauseContinuation2=PositiveClauseContinuation)? |
	PositivePredefinedDependency (positiveClauseContinuation=PositiveClauseContinuation)?
;

PositivePredefinedDependency:
	predefDepType=('Or' | 'OnlyOne' | 'AllOrNone' | 'ZeroOrOne') '(' predefDepClauses+=(PositiveAtomic|PositiveClause) (',' predefDepClauses+=(PositiveAtomic|PositiveClause))+ ')'
;

Not:
	'NOT'
;

LogicalOperator:
	'AND' | 'OR'
;


