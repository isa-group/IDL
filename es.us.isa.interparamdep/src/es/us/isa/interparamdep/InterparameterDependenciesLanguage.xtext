grammar es.us.isa.interparamdep.InterparameterDependenciesLanguage with org.eclipse.xtext.common.Terminals

generate interparameterDependenciesLanguage "http://www.isa.us.es/interparamdep/InterparameterDependenciesLanguage"

Model:
	dependencies+=Dependency*
;

Dependency:
	dep=(ComparisonDependency | ArithmeticDependency | ConditionalDependency | PredefinedDependency) ';' NL?
;

terminal NL:
	('\r'? '\n')+
;

terminal BOOLEAN:
	'true'|'false'
;

terminal DOUBLE:
	INT ('.' INT)?
;

@Override 
terminal ID: 
    ('^')?('a'..'z'|'A'..'Z'|'_'|'.') ('a'..'z'|'A'..'Z'|'_'|'.'|'0'..'9')*
;

terminal ID_SPECIAL_CHARS: 
    '['('^')?('a'..'z'|'A'..'Z'|'_'|'.'|'-'|'/'|':') ('a'..'z'|'A'..'Z'|'_'|'.'|'-'|'/'|':'|'0'..'9')*']'
;

ArithmeticOperator:
	'<' | '>' | '<=' | '>=' | '==' | '!='
;

MathOperator:
	'+' | '-' | '*' | '/'
;

Not:
	'NOT'
;

LogicalOperator:
	'AND' | 'OR'
;

ComparisonDependency:
	param1=Param arithOp=ArithmeticOperator param2=Param
;

ArithmeticDependency:
	operation=Operation arithOp=ArithmeticOperator result=DOUBLE
;

Operation:
	firstParam=Param operationContinuation=OperationContinuation |
	openingParenthesis='(' operation=Operation closingParenthesis=')' (operationContinuation=OperationContinuation)?
;

OperationContinuation:
	mathOp=MathOperator additionalParams=(Param|Operation)
;

ConditionalDependency:
	'IF' condition=(Atomic|Clause) 'THEN' consequence=(Atomic|Clause)
;

Atomic returns GeneralAtomic:
	not=Not? param=Param |
	not=Not? param=ParamAssignment |
	ComparisonDependency
;

Param:
	name=(ID|ID_SPECIAL_CHARS)
;

ParamAssignment:
	Param '==' stringValues+=STRING('|'stringValues+=STRING)* |
	Param 'LIKE' patternString=STRING |
	Param '==' booleanValue=BOOLEAN |
	Param arithOp=ArithmeticOperator doubleValue=DOUBLE
;

Clause returns GeneralClause:
	firstElement=Atomic clauseContinuation=ClauseContinuation |
	firstElement=(PredefinedDependency|ArithmeticDependency) (clauseContinuation=ClauseContinuation)? |
	not=Not? openingParenthesis='(' clause=Clause closingParenthesis=')' (clauseContinuation=ClauseContinuation)?
;

ClauseContinuation returns GeneralClauseContinuation:
	logicalOp=LogicalOperator additionalElements=(Atomic|Clause)
;

PredefinedDependency returns GeneralPredefinedDependency:
	not=Not? predefDepType=('Or' | 'OnlyOne' | 'AllOrNone' | 'ZeroOrOne') '(' predefDepElements+=(PositiveAtomic|PositiveClause) (',' predefDepElements+=(PositiveAtomic|PositiveClause))+ ')'
;

PositiveAtomic returns GeneralAtomic:
	param=Param |
	param=ParamAssignment |
	ComparisonDependency
;

PositiveClause returns GeneralClause:
	firstElement=PositiveAtomic clauseContinuation=PositiveClauseContinuation |
	firstElement=(PositivePredefinedDependency|ArithmeticDependency) (clauseContinuation=PositiveClauseContinuation)? |
	openingParenthesis='(' clause=PositiveClause closingParenthesis=')' (clauseContinuation=PositiveClauseContinuation)?
;

PositiveClauseContinuation returns GeneralClauseContinuation:
	logicalOp=LogicalOperator additionalElements=(PositiveAtomic|PositiveClause)
;

PositivePredefinedDependency returns GeneralPredefinedDependency:
	predefDepType=('Or' | 'OnlyOne' | 'AllOrNone' | 'ZeroOrOne') '(' predefDepElements+=(PositiveAtomic|PositiveClause) (',' predefDepElements+=(PositiveAtomic|PositiveClause))+ ')'
;

