/*
 * generated by Xtext 2.19.0
 */
package es.us.isa.interparamdep.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.emf.ecore.EObject

import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

import java.nio.file.Files
import java.nio.file.Paths
import java.util.Arrays
import java.nio.charset.StandardCharsets
import java.nio.file.StandardOpenOption
import java.io.File
import java.nio.file.Path

import es.us.isa.interparamdep.interparameterDependenciesLanguage.GeneralClauseContinuation
import es.us.isa.interparamdep.interparameterDependenciesLanguage.ComparisonDependency
import es.us.isa.interparamdep.interparameterDependenciesLanguage.impl.GeneralClauseImpl
import es.us.isa.interparamdep.interparameterDependenciesLanguage.GeneralClause
import es.us.isa.interparamdep.interparameterDependenciesLanguage.impl.GeneralAtomicImpl
import es.us.isa.interparamdep.interparameterDependenciesLanguage.GeneralPredefinedDependency
import es.us.isa.interparamdep.interparameterDependenciesLanguage.Dependency;
import es.us.isa.interparamdep.interparameterDependenciesLanguage.ConditionalDependency;
import es.us.isa.interparamdep.interparameterDependenciesLanguage.impl.ComparisonDependencyImpl
import es.us.isa.interparamdep.interparameterDependenciesLanguage.impl.ConditionalDependencyImpl
import es.us.isa.interparamdep.interparameterDependenciesLanguage.impl.GeneralPredefinedDependencyImpl
import es.us.isa.interparamdep.interparameterDependenciesLanguage.impl.ArithmeticDependencyImpl
import es.us.isa.interparamdep.interparameterDependenciesLanguage.ArithmeticDependency
import es.us.isa.interparamdep.interparameterDependenciesLanguage.Operation
import es.us.isa.interparamdep.interparameterDependenciesLanguage.Param
import es.us.isa.interparamdep.interparameterDependenciesLanguage.impl.ParamImpl
import es.us.isa.interparamdep.interparameterDependenciesLanguage.OperationContinuation
import es.us.isa.interparamdep.interparameterDependenciesLanguage.GeneralAtomic
import es.us.isa.interparamdep.interparameterDependenciesLanguage.ParamAssignment

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class InterparameterDependenciesLanguageGenerator extends AbstractGenerator {
	
	val String path = System.getProperty("user.home") + "/constraints.mzn"
	val File file = new File(path)
	val Path writePath = Paths.get(path)
	var String csp

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {

		file.delete
		file.createNewFile
		
		for (dependency: resource.allContents.filter(Dependency).toIterable) {
			csp = "constraint "
//			writeDependencyAndOrIterate(dependency.dep, 0, 0)
//	    	Files.write(writePath, Arrays.asList("....................."),
//		    	StandardCharsets.UTF_8, StandardOpenOption.APPEND)

			if (dependency.dep.class == typeof(ConditionalDependencyImpl)) {
				writeConditionalDependency(dependency.dep as ConditionalDependency)
			} else if (dependency.dep.class == typeof(ComparisonDependencyImpl)) {
				writeComparisonDependency(dependency.dep as ComparisonDependency)
			} else if (dependency.dep.class == typeof(ArithmeticDependencyImpl)) {
				writeArithmeticDependency(dependency.dep as ArithmeticDependency)
			} else if (dependency.dep.class == typeof(GeneralPredefinedDependencyImpl)) {
				writePredefinedDependency(dependency.dep as GeneralPredefinedDependency)
			} else {
				throw new Exception("The dependency must be a conditional, an " + 
					"arithmetic, a comparison or a predefined one")
			}
			
			csp += ";"
			
		    Files.write(writePath, Arrays.asList(csp),
		    	StandardCharsets.UTF_8, StandardOpenOption.APPEND)
		    Files.write(writePath, Arrays.asList("%---------------------"),
		    	StandardCharsets.UTF_8, StandardOpenOption.APPEND)

//		    for (subElement: dependency.eAllContents.toIterable) {
//		    	Files.write(writePath, Arrays.asList(subElement.toString),
//		    		StandardCharsets.UTF_8, StandardOpenOption.APPEND)
//		    }
//		    Files.write(writePath, Arrays.asList("---------------------"),
//		    	StandardCharsets.UTF_8, StandardOpenOption.APPEND)
		}
	}
	
	
	
	
	
	
	
//	def void writeDependencyAndOrIterate(EObject object, int depthLevel, int objectDepthLevel) {
//		if (object.class == typeof(ConditionalDependencyImpl)) {
//			Files.write(writePath, Arrays.asList("("+ depthLevel + ", " + objectDepthLevel + ") - Conditional dependency: " + object),
//	    		StandardCharsets.UTF_8, StandardOpenOption.APPEND)
//	    	Files.write(writePath, Arrays.asList("("+ depthLevel + ", " + objectDepthLevel + ") - Condition"),
//	    		StandardCharsets.UTF_8, StandardOpenOption.APPEND)
//    		writeDependencyAndOrIterate((object as ConditionalDependency).condition, depthLevel+1, objectDepthLevel+1)
//	    	Files.write(writePath, Arrays.asList("("+ depthLevel + ", " + objectDepthLevel + ") - Consequence"),
//	    		StandardCharsets.UTF_8, StandardOpenOption.APPEND)
//    		writeDependencyAndOrIterate((object as ConditionalDependency).consequence, depthLevel+1, objectDepthLevel+1)
//		} else if (object.class == typeof(ComparisonDependencyImpl)) {
//			Files.write(writePath, Arrays.asList("("+ depthLevel + ", " + objectDepthLevel + ") - Arithmetic dependency: " + object),
//    			StandardCharsets.UTF_8, StandardOpenOption.APPEND)
//		} else if (object.class == typeof(GeneralPredefinedDependencyImpl)) {
//			Files.write(writePath, Arrays.asList("("+ depthLevel + ", " + objectDepthLevel + ") - Predefined dependency: " + object),
//	    		StandardCharsets.UTF_8, StandardOpenOption.APPEND)
//	    	for (element: object.eContents) {
//	    		writeDependencyAndOrIterate(element, depthLevel+1, objectDepthLevel+1)
//	    	}
//		} else {
//			Files.write(writePath, Arrays.asList("("+ depthLevel + ", " + objectDepthLevel + ") - Object: " + object),
//	    			StandardCharsets.UTF_8, StandardOpenOption.APPEND)
//			for (subElement: object.eContents) {
////				if (subElement.class == typeof(GeneralClauseImpl)) {
////					writeLogicalClause((subElement as GeneralClause).firstElement, (subElement as GeneralClause).clauseContinuation)
////				}
//				writeDependencyAndOrIterate(subElement, depthLevel, objectDepthLevel+1)
//			}
//		}
//	}




	/**
	 * Auxiliar function to process sub elements of dependencies, specifically
	 * predicates (an atomic or a clause).
	 */
	def void writePredicate(EObject predicate) {
		if (predicate.class == typeof(GeneralAtomicImpl)) {
			// TODO
			val GeneralAtomic atomic = (predicate as GeneralAtomic)
			val Param param = (atomic.param as Param)
			System.out.println(param.stringValues)
			System.out.println(param.booleanValue)
			System.out.println(param.doubleValue)
			if (param.stringValues.size === 0 && param.booleanValue === null && param.doubleValue === null) {
				if (atomic.not === null) {
					csp += param.name + "Set==1 "
				} else {
					csp += param.name + "Set==0 "
				}
			}
		} else if(predicate.class == typeof(ComparisonDependencyImpl)) {
			writeComparisonDependency(predicate as ComparisonDependency)
		} else if(predicate.class == typeof(GeneralClauseImpl)) {
//			return writeLogicalClause(
//				(predicate as GeneralClause).firstElement,
//				(predicate as GeneralClause).clauseContinuation,
//				(predicate as GeneralClause).clauseContinuation2
//			)
		} else {
			throw new Exception("The element must be a param, an arithmetic" + 
				"dependency or a clause")
		}
	}

	def void writeComparisonDependency(ComparisonDependency dep) {
		csp += dep.param1 + dep.arithOp + dep.param2
	}
	
	def void writeArithmeticDependency(ArithmeticDependency dep) {
		// TODO: Implement CSP mapping
		writeOperation(dep.operation)
		csp += dep.arithOp
		csp += dep.result
	}
	
	def void writeOperation(Operation operation) {
		if (operation.openingParenthesis === null) { // Alternative 1 of Operation
			csp += operation.firstParam.name
			writeOperationContinuation(operation.operationContinuation)
			
		} else { // Alternative 2 of Operation
			csp += "("
			writeOperation(operation.operation)
			csp += ")"
			if (operation.operationContinuation !== null) {
				writeOperationContinuation(operation.operationContinuation)
			}
			
		}
	}
	
	def void writeOperationContinuation(OperationContinuation opCont) {
		csp += opCont.mathOp
		if (opCont.additionalParams.class == typeof(ParamImpl)) {
			csp += (opCont.additionalParams as Param).name
		} else {
			writeOperation(opCont.additionalParams as Operation)
		}
	}
	
	def void writePredefinedDependency(GeneralPredefinedDependency dep) {
		// TODO: Implement CSP mapping
		
		var elementOutputs = newArrayList
		for (depElement: dep.predefDepClauses) {
			elementOutputs.add(depElement)
		}
		
//		switch dep.predefDepType {
//			case "Or":
//
//			case "OnlyOne":
//
//			case "AllOrNone":
//
//			case "ZeroOrOne":
//
//			default:
//				throw new Exception("The predefined dependency can only be 'Or', " + 
//					"'OnlyOne', 'AllOrNone' or 'ZeroOrOne'")
//		}
		
	}
	
	def void writeConditionalDependency(ConditionalDependency dep) {
		// TODO: Implement CSP mapping
		
		writePredicate(dep.condition)
		csp += " -> "
		writePredicate(dep.consequence)
	}
	
	def void writeLogicalClause(EObject firstElement, GeneralClauseContinuation clauseCont, GeneralClauseContinuation clauseCont2) {
		// TODO: Implement CSP mapping
		
		// Solve first element, which can only be a param, arithmetic dep or predefined dep
		if (firstElement.class == typeof(GeneralAtomicImpl)) { // param or param assignment
			// TODO
			
		} else if(firstElement.class == typeof(ComparisonDependencyImpl)) {
			writeComparisonDependency(firstElement as ComparisonDependency)
		} else if(firstElement.class == typeof(ArithmeticDependencyImpl)) {
			writeArithmeticDependency(firstElement as ArithmeticDependency)
		} else if(firstElement.class == typeof(GeneralPredefinedDependencyImpl)) {
			writePredefinedDependency(firstElement as GeneralPredefinedDependency)
		} else {
			throw new Exception("The first element of a clause must be a param, an " + 
				"arithmetic dependency or a predefined dependency")
		}
				
		// Solve second element, which is a clause continuation containing either
		// a GeneralAtomic or another clause
		if (clauseCont !== null) {
			writePredicate(clauseCont.additionalElements)
			if (clauseCont.logicalOp == "AND") {

			} else if (clauseCont.logicalOp == "OR") {

			} else {
				throw new Exception("The logical operator can only be AND or OR")
			}
		}
		
		// Solve third element, which is a clause continuation containing either
		// a GeneralAtomic or another clause
		if (clauseCont2 !== null) {
			writePredicate(clauseCont2.additionalElements)
			if (clauseCont2.logicalOp == "AND") {

			} else if (clauseCont2.logicalOp == "OR") {

			} else {
				throw new Exception("The logical operator can only be AND or OR")
			}
		}
	}
	
}






