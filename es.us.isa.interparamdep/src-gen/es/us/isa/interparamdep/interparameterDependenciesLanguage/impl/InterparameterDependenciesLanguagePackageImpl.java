/**
 * generated by Xtext 2.19.0
 */
package es.us.isa.interparamdep.interparameterDependenciesLanguage.impl;

import es.us.isa.interparamdep.interparameterDependenciesLanguage.ArithmeticDependency;
import es.us.isa.interparamdep.interparameterDependenciesLanguage.Atomic;
import es.us.isa.interparamdep.interparameterDependenciesLanguage.Clause;
import es.us.isa.interparamdep.interparameterDependenciesLanguage.ClauseContinuation;
import es.us.isa.interparamdep.interparameterDependenciesLanguage.ConditionalDependency;
import es.us.isa.interparamdep.interparameterDependenciesLanguage.Dependency;
import es.us.isa.interparamdep.interparameterDependenciesLanguage.InterparameterDependenciesLanguageFactory;
import es.us.isa.interparamdep.interparameterDependenciesLanguage.InterparameterDependenciesLanguagePackage;
import es.us.isa.interparamdep.interparameterDependenciesLanguage.Model;
import es.us.isa.interparamdep.interparameterDependenciesLanguage.Param;
import es.us.isa.interparamdep.interparameterDependenciesLanguage.ParamAssignment;
import es.us.isa.interparamdep.interparameterDependenciesLanguage.PositiveAtomic;
import es.us.isa.interparamdep.interparameterDependenciesLanguage.PositiveClause;
import es.us.isa.interparamdep.interparameterDependenciesLanguage.PositiveClauseContinuation;
import es.us.isa.interparamdep.interparameterDependenciesLanguage.PositivePredefinedDependency;
import es.us.isa.interparamdep.interparameterDependenciesLanguage.PredefinedDependency;
import es.us.isa.interparamdep.interparameterDependenciesLanguage.Predicate;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class InterparameterDependenciesLanguagePackageImpl extends EPackageImpl implements InterparameterDependenciesLanguagePackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass modelEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dependencyEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass arithmeticDependencyEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass conditionalDependencyEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass predicateEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass atomicEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass paramEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass paramAssignmentEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass clauseEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass clauseContinuationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass predefinedDependencyEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass positiveAtomicEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass positiveClauseContinuationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass positiveClauseEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass positivePredefinedDependencyEClass = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see es.us.isa.interparamdep.interparameterDependenciesLanguage.InterparameterDependenciesLanguagePackage#eNS_URI
   * @see #init()
   * @generated
   */
  private InterparameterDependenciesLanguagePackageImpl()
  {
    super(eNS_URI, InterparameterDependenciesLanguageFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link InterparameterDependenciesLanguagePackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static InterparameterDependenciesLanguagePackage init()
  {
    if (isInited) return (InterparameterDependenciesLanguagePackage)EPackage.Registry.INSTANCE.getEPackage(InterparameterDependenciesLanguagePackage.eNS_URI);

    // Obtain or create and register package
    Object registeredInterparameterDependenciesLanguagePackage = EPackage.Registry.INSTANCE.get(eNS_URI);
    InterparameterDependenciesLanguagePackageImpl theInterparameterDependenciesLanguagePackage = registeredInterparameterDependenciesLanguagePackage instanceof InterparameterDependenciesLanguagePackageImpl ? (InterparameterDependenciesLanguagePackageImpl)registeredInterparameterDependenciesLanguagePackage : new InterparameterDependenciesLanguagePackageImpl();

    isInited = true;

    // Create package meta-data objects
    theInterparameterDependenciesLanguagePackage.createPackageContents();

    // Initialize created meta-data
    theInterparameterDependenciesLanguagePackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theInterparameterDependenciesLanguagePackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(InterparameterDependenciesLanguagePackage.eNS_URI, theInterparameterDependenciesLanguagePackage);
    return theInterparameterDependenciesLanguagePackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getModel()
  {
    return modelEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getModel_Dependencies()
  {
    return (EReference)modelEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDependency()
  {
    return dependencyEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDependency_Dep()
  {
    return (EReference)dependencyEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getArithmeticDependency()
  {
    return arithmeticDependencyEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getArithmeticDependency_Param1()
  {
    return (EAttribute)arithmeticDependencyEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getArithmeticDependency_ArithOp()
  {
    return (EAttribute)arithmeticDependencyEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getArithmeticDependency_Param2()
  {
    return (EAttribute)arithmeticDependencyEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getConditionalDependency()
  {
    return conditionalDependencyEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getConditionalDependency_Condition()
  {
    return (EReference)conditionalDependencyEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getConditionalDependency_Consequence()
  {
    return (EReference)conditionalDependencyEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getPredicate()
  {
    return predicateEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPredicate_Not()
  {
    return (EAttribute)predicateEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAtomic()
  {
    return atomicEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAtomic_Param()
  {
    return (EReference)atomicEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAtomic_ParamAssignment()
  {
    return (EReference)atomicEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getParam()
  {
    return paramEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getParam_Name()
  {
    return (EAttribute)paramEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getParam_ParamValues()
  {
    return (EAttribute)paramEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getParamAssignment()
  {
    return paramAssignmentEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getClause()
  {
    return clauseEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getClause_FirstElement()
  {
    return (EReference)clauseEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getClause_ClauseContinuation()
  {
    return (EReference)clauseEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getClause_ClauseContinuation2()
  {
    return (EReference)clauseEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getClauseContinuation()
  {
    return clauseContinuationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getClauseContinuation_LogicalOp()
  {
    return (EAttribute)clauseContinuationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getClauseContinuation_AdditionalElements()
  {
    return (EReference)clauseContinuationEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getPredefinedDependency()
  {
    return predefinedDependencyEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPredefinedDependency_Not()
  {
    return (EAttribute)predefinedDependencyEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPredefinedDependency_PredefDepType()
  {
    return (EAttribute)predefinedDependencyEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getPredefinedDependency_PredefDepClauses()
  {
    return (EReference)predefinedDependencyEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getPositiveAtomic()
  {
    return positiveAtomicEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getPositiveClauseContinuation()
  {
    return positiveClauseContinuationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPositiveClauseContinuation_LogicalOp()
  {
    return (EAttribute)positiveClauseContinuationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getPositiveClauseContinuation_AdditionalElements()
  {
    return (EReference)positiveClauseContinuationEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getPositiveClause()
  {
    return positiveClauseEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getPositiveClause_PositiveFirstElement()
  {
    return (EReference)positiveClauseEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getPositiveClause_PositiveClauseContinuation()
  {
    return (EReference)positiveClauseEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getPositiveClause_PositiveClauseContinuation2()
  {
    return (EReference)positiveClauseEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getPositivePredefinedDependency()
  {
    return positivePredefinedDependencyEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPositivePredefinedDependency_PredefDepType()
  {
    return (EAttribute)positivePredefinedDependencyEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getPositivePredefinedDependency_PredefDepClauses()
  {
    return (EReference)positivePredefinedDependencyEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InterparameterDependenciesLanguageFactory getInterparameterDependenciesLanguageFactory()
  {
    return (InterparameterDependenciesLanguageFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    modelEClass = createEClass(MODEL);
    createEReference(modelEClass, MODEL__DEPENDENCIES);

    dependencyEClass = createEClass(DEPENDENCY);
    createEReference(dependencyEClass, DEPENDENCY__DEP);

    arithmeticDependencyEClass = createEClass(ARITHMETIC_DEPENDENCY);
    createEAttribute(arithmeticDependencyEClass, ARITHMETIC_DEPENDENCY__PARAM1);
    createEAttribute(arithmeticDependencyEClass, ARITHMETIC_DEPENDENCY__ARITH_OP);
    createEAttribute(arithmeticDependencyEClass, ARITHMETIC_DEPENDENCY__PARAM2);

    conditionalDependencyEClass = createEClass(CONDITIONAL_DEPENDENCY);
    createEReference(conditionalDependencyEClass, CONDITIONAL_DEPENDENCY__CONDITION);
    createEReference(conditionalDependencyEClass, CONDITIONAL_DEPENDENCY__CONSEQUENCE);

    predicateEClass = createEClass(PREDICATE);
    createEAttribute(predicateEClass, PREDICATE__NOT);

    atomicEClass = createEClass(ATOMIC);
    createEReference(atomicEClass, ATOMIC__PARAM);
    createEReference(atomicEClass, ATOMIC__PARAM_ASSIGNMENT);

    paramEClass = createEClass(PARAM);
    createEAttribute(paramEClass, PARAM__NAME);
    createEAttribute(paramEClass, PARAM__PARAM_VALUES);

    paramAssignmentEClass = createEClass(PARAM_ASSIGNMENT);

    clauseEClass = createEClass(CLAUSE);
    createEReference(clauseEClass, CLAUSE__FIRST_ELEMENT);
    createEReference(clauseEClass, CLAUSE__CLAUSE_CONTINUATION);
    createEReference(clauseEClass, CLAUSE__CLAUSE_CONTINUATION2);

    clauseContinuationEClass = createEClass(CLAUSE_CONTINUATION);
    createEAttribute(clauseContinuationEClass, CLAUSE_CONTINUATION__LOGICAL_OP);
    createEReference(clauseContinuationEClass, CLAUSE_CONTINUATION__ADDITIONAL_ELEMENTS);

    predefinedDependencyEClass = createEClass(PREDEFINED_DEPENDENCY);
    createEAttribute(predefinedDependencyEClass, PREDEFINED_DEPENDENCY__NOT);
    createEAttribute(predefinedDependencyEClass, PREDEFINED_DEPENDENCY__PREDEF_DEP_TYPE);
    createEReference(predefinedDependencyEClass, PREDEFINED_DEPENDENCY__PREDEF_DEP_CLAUSES);

    positiveAtomicEClass = createEClass(POSITIVE_ATOMIC);

    positiveClauseContinuationEClass = createEClass(POSITIVE_CLAUSE_CONTINUATION);
    createEAttribute(positiveClauseContinuationEClass, POSITIVE_CLAUSE_CONTINUATION__LOGICAL_OP);
    createEReference(positiveClauseContinuationEClass, POSITIVE_CLAUSE_CONTINUATION__ADDITIONAL_ELEMENTS);

    positiveClauseEClass = createEClass(POSITIVE_CLAUSE);
    createEReference(positiveClauseEClass, POSITIVE_CLAUSE__POSITIVE_FIRST_ELEMENT);
    createEReference(positiveClauseEClass, POSITIVE_CLAUSE__POSITIVE_CLAUSE_CONTINUATION);
    createEReference(positiveClauseEClass, POSITIVE_CLAUSE__POSITIVE_CLAUSE_CONTINUATION2);

    positivePredefinedDependencyEClass = createEClass(POSITIVE_PREDEFINED_DEPENDENCY);
    createEAttribute(positivePredefinedDependencyEClass, POSITIVE_PREDEFINED_DEPENDENCY__PREDEF_DEP_TYPE);
    createEReference(positivePredefinedDependencyEClass, POSITIVE_PREDEFINED_DEPENDENCY__PREDEF_DEP_CLAUSES);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    arithmeticDependencyEClass.getESuperTypes().add(this.getAtomic());
    arithmeticDependencyEClass.getESuperTypes().add(this.getPositiveAtomic());
    atomicEClass.getESuperTypes().add(this.getPredicate());
    paramEClass.getESuperTypes().add(this.getParamAssignment());
    paramEClass.getESuperTypes().add(this.getPositiveAtomic());
    paramAssignmentEClass.getESuperTypes().add(this.getPositiveAtomic());
    clauseEClass.getESuperTypes().add(this.getPredicate());
    positivePredefinedDependencyEClass.getESuperTypes().add(this.getPositiveClause());

    // Initialize classes and features; add operations and parameters
    initEClass(modelEClass, Model.class, "Model", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getModel_Dependencies(), this.getDependency(), null, "dependencies", null, 0, -1, Model.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(dependencyEClass, Dependency.class, "Dependency", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getDependency_Dep(), ecorePackage.getEObject(), null, "dep", null, 0, 1, Dependency.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(arithmeticDependencyEClass, ArithmeticDependency.class, "ArithmeticDependency", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getArithmeticDependency_Param1(), ecorePackage.getEString(), "param1", null, 0, 1, ArithmeticDependency.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getArithmeticDependency_ArithOp(), ecorePackage.getEString(), "arithOp", null, 0, 1, ArithmeticDependency.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getArithmeticDependency_Param2(), ecorePackage.getEString(), "param2", null, 0, 1, ArithmeticDependency.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(conditionalDependencyEClass, ConditionalDependency.class, "ConditionalDependency", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getConditionalDependency_Condition(), this.getPredicate(), null, "condition", null, 0, 1, ConditionalDependency.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getConditionalDependency_Consequence(), this.getPredicate(), null, "consequence", null, 0, 1, ConditionalDependency.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(predicateEClass, Predicate.class, "Predicate", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getPredicate_Not(), ecorePackage.getEString(), "not", null, 0, 1, Predicate.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(atomicEClass, Atomic.class, "Atomic", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAtomic_Param(), this.getParam(), null, "param", null, 0, 1, Atomic.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAtomic_ParamAssignment(), this.getParamAssignment(), null, "paramAssignment", null, 0, 1, Atomic.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(paramEClass, Param.class, "Param", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getParam_Name(), ecorePackage.getEString(), "name", null, 0, 1, Param.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getParam_ParamValues(), ecorePackage.getEString(), "paramValues", null, 0, -1, Param.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(paramAssignmentEClass, ParamAssignment.class, "ParamAssignment", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(clauseEClass, Clause.class, "Clause", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getClause_FirstElement(), ecorePackage.getEObject(), null, "firstElement", null, 0, 1, Clause.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getClause_ClauseContinuation(), this.getClauseContinuation(), null, "clauseContinuation", null, 0, 1, Clause.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getClause_ClauseContinuation2(), this.getClauseContinuation(), null, "clauseContinuation2", null, 0, 1, Clause.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(clauseContinuationEClass, ClauseContinuation.class, "ClauseContinuation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getClauseContinuation_LogicalOp(), ecorePackage.getEString(), "logicalOp", null, 0, 1, ClauseContinuation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getClauseContinuation_AdditionalElements(), this.getPredicate(), null, "additionalElements", null, 0, 1, ClauseContinuation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(predefinedDependencyEClass, PredefinedDependency.class, "PredefinedDependency", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getPredefinedDependency_Not(), ecorePackage.getEString(), "not", null, 0, 1, PredefinedDependency.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getPredefinedDependency_PredefDepType(), ecorePackage.getEString(), "predefDepType", null, 0, 1, PredefinedDependency.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getPredefinedDependency_PredefDepClauses(), ecorePackage.getEObject(), null, "predefDepClauses", null, 0, -1, PredefinedDependency.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(positiveAtomicEClass, PositiveAtomic.class, "PositiveAtomic", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(positiveClauseContinuationEClass, PositiveClauseContinuation.class, "PositiveClauseContinuation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getPositiveClauseContinuation_LogicalOp(), ecorePackage.getEString(), "logicalOp", null, 0, 1, PositiveClauseContinuation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getPositiveClauseContinuation_AdditionalElements(), ecorePackage.getEObject(), null, "additionalElements", null, 0, 1, PositiveClauseContinuation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(positiveClauseEClass, PositiveClause.class, "PositiveClause", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getPositiveClause_PositiveFirstElement(), ecorePackage.getEObject(), null, "positiveFirstElement", null, 0, 1, PositiveClause.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getPositiveClause_PositiveClauseContinuation(), this.getPositiveClauseContinuation(), null, "positiveClauseContinuation", null, 0, 1, PositiveClause.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getPositiveClause_PositiveClauseContinuation2(), this.getPositiveClauseContinuation(), null, "positiveClauseContinuation2", null, 0, 1, PositiveClause.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(positivePredefinedDependencyEClass, PositivePredefinedDependency.class, "PositivePredefinedDependency", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getPositivePredefinedDependency_PredefDepType(), ecorePackage.getEString(), "predefDepType", null, 0, 1, PositivePredefinedDependency.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getPositivePredefinedDependency_PredefDepClauses(), ecorePackage.getEObject(), null, "predefDepClauses", null, 0, -1, PositivePredefinedDependency.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Create resource
    createResource(eNS_URI);
  }

} //InterparameterDependenciesLanguagePackageImpl
