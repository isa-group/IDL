/**
 * generated by Xtext 2.19.0
 */
package es.us.isa.interparamdep.interparameterDependenciesLanguage.impl;

import es.us.isa.interparamdep.interparameterDependenciesLanguage.InterparameterDependenciesLanguagePackage;
import es.us.isa.interparamdep.interparameterDependenciesLanguage.PositivePredefinedDependency;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Positive Predefined Dependency</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link es.us.isa.interparamdep.interparameterDependenciesLanguage.impl.PositivePredefinedDependencyImpl#getPredefDepType <em>Predef Dep Type</em>}</li>
 *   <li>{@link es.us.isa.interparamdep.interparameterDependenciesLanguage.impl.PositivePredefinedDependencyImpl#getPredefDepClauses <em>Predef Dep Clauses</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PositivePredefinedDependencyImpl extends PositiveClauseImpl implements PositivePredefinedDependency
{
  /**
   * The default value of the '{@link #getPredefDepType() <em>Predef Dep Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPredefDepType()
   * @generated
   * @ordered
   */
  protected static final String PREDEF_DEP_TYPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPredefDepType() <em>Predef Dep Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPredefDepType()
   * @generated
   * @ordered
   */
  protected String predefDepType = PREDEF_DEP_TYPE_EDEFAULT;

  /**
   * The cached value of the '{@link #getPredefDepClauses() <em>Predef Dep Clauses</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPredefDepClauses()
   * @generated
   * @ordered
   */
  protected EList<EObject> predefDepClauses;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PositivePredefinedDependencyImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return InterparameterDependenciesLanguagePackage.Literals.POSITIVE_PREDEFINED_DEPENDENCY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getPredefDepType()
  {
    return predefDepType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPredefDepType(String newPredefDepType)
  {
    String oldPredefDepType = predefDepType;
    predefDepType = newPredefDepType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, InterparameterDependenciesLanguagePackage.POSITIVE_PREDEFINED_DEPENDENCY__PREDEF_DEP_TYPE, oldPredefDepType, predefDepType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<EObject> getPredefDepClauses()
  {
    if (predefDepClauses == null)
    {
      predefDepClauses = new EObjectContainmentEList<EObject>(EObject.class, this, InterparameterDependenciesLanguagePackage.POSITIVE_PREDEFINED_DEPENDENCY__PREDEF_DEP_CLAUSES);
    }
    return predefDepClauses;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case InterparameterDependenciesLanguagePackage.POSITIVE_PREDEFINED_DEPENDENCY__PREDEF_DEP_CLAUSES:
        return ((InternalEList<?>)getPredefDepClauses()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case InterparameterDependenciesLanguagePackage.POSITIVE_PREDEFINED_DEPENDENCY__PREDEF_DEP_TYPE:
        return getPredefDepType();
      case InterparameterDependenciesLanguagePackage.POSITIVE_PREDEFINED_DEPENDENCY__PREDEF_DEP_CLAUSES:
        return getPredefDepClauses();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case InterparameterDependenciesLanguagePackage.POSITIVE_PREDEFINED_DEPENDENCY__PREDEF_DEP_TYPE:
        setPredefDepType((String)newValue);
        return;
      case InterparameterDependenciesLanguagePackage.POSITIVE_PREDEFINED_DEPENDENCY__PREDEF_DEP_CLAUSES:
        getPredefDepClauses().clear();
        getPredefDepClauses().addAll((Collection<? extends EObject>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case InterparameterDependenciesLanguagePackage.POSITIVE_PREDEFINED_DEPENDENCY__PREDEF_DEP_TYPE:
        setPredefDepType(PREDEF_DEP_TYPE_EDEFAULT);
        return;
      case InterparameterDependenciesLanguagePackage.POSITIVE_PREDEFINED_DEPENDENCY__PREDEF_DEP_CLAUSES:
        getPredefDepClauses().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case InterparameterDependenciesLanguagePackage.POSITIVE_PREDEFINED_DEPENDENCY__PREDEF_DEP_TYPE:
        return PREDEF_DEP_TYPE_EDEFAULT == null ? predefDepType != null : !PREDEF_DEP_TYPE_EDEFAULT.equals(predefDepType);
      case InterparameterDependenciesLanguagePackage.POSITIVE_PREDEFINED_DEPENDENCY__PREDEF_DEP_CLAUSES:
        return predefDepClauses != null && !predefDepClauses.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (predefDepType: ");
    result.append(predefDepType);
    result.append(')');
    return result.toString();
  }

} //PositivePredefinedDependencyImpl
