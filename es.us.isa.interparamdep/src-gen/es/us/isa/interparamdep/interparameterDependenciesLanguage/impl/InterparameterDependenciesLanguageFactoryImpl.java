/**
 * generated by Xtext 2.19.0
 */
package es.us.isa.interparamdep.interparameterDependenciesLanguage.impl;

import es.us.isa.interparamdep.interparameterDependenciesLanguage.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class InterparameterDependenciesLanguageFactoryImpl extends EFactoryImpl implements InterparameterDependenciesLanguageFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static InterparameterDependenciesLanguageFactory init()
  {
    try
    {
      InterparameterDependenciesLanguageFactory theInterparameterDependenciesLanguageFactory = (InterparameterDependenciesLanguageFactory)EPackage.Registry.INSTANCE.getEFactory(InterparameterDependenciesLanguagePackage.eNS_URI);
      if (theInterparameterDependenciesLanguageFactory != null)
      {
        return theInterparameterDependenciesLanguageFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new InterparameterDependenciesLanguageFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InterparameterDependenciesLanguageFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case InterparameterDependenciesLanguagePackage.MODEL: return createModel();
      case InterparameterDependenciesLanguagePackage.DEPENDENCY: return createDependency();
      case InterparameterDependenciesLanguagePackage.ARITHMETIC_DEPENDENCY: return createArithmeticDependency();
      case InterparameterDependenciesLanguagePackage.CONDITIONAL_DEPENDENCY: return createConditionalDependency();
      case InterparameterDependenciesLanguagePackage.PREDICATE: return createPredicate();
      case InterparameterDependenciesLanguagePackage.ATOMIC: return createAtomic();
      case InterparameterDependenciesLanguagePackage.PARAM: return createParam();
      case InterparameterDependenciesLanguagePackage.PARAM_ASSIGNMENT: return createParamAssignment();
      case InterparameterDependenciesLanguagePackage.CLAUSE: return createClause();
      case InterparameterDependenciesLanguagePackage.CLAUSE_CONTINUATION: return createClauseContinuation();
      case InterparameterDependenciesLanguagePackage.PREDEFINED_DEPENDENCY: return createPredefinedDependency();
      case InterparameterDependenciesLanguagePackage.POSITIVE_ATOMIC: return createPositiveAtomic();
      case InterparameterDependenciesLanguagePackage.POSITIVE_CLAUSE_CONTINUATION: return createPositiveClauseContinuation();
      case InterparameterDependenciesLanguagePackage.POSITIVE_CLAUSE: return createPositiveClause();
      case InterparameterDependenciesLanguagePackage.POSITIVE_PREDEFINED_DEPENDENCY: return createPositivePredefinedDependency();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Dependency createDependency()
  {
    DependencyImpl dependency = new DependencyImpl();
    return dependency;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArithmeticDependency createArithmeticDependency()
  {
    ArithmeticDependencyImpl arithmeticDependency = new ArithmeticDependencyImpl();
    return arithmeticDependency;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConditionalDependency createConditionalDependency()
  {
    ConditionalDependencyImpl conditionalDependency = new ConditionalDependencyImpl();
    return conditionalDependency;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Predicate createPredicate()
  {
    PredicateImpl predicate = new PredicateImpl();
    return predicate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Atomic createAtomic()
  {
    AtomicImpl atomic = new AtomicImpl();
    return atomic;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Param createParam()
  {
    ParamImpl param = new ParamImpl();
    return param;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParamAssignment createParamAssignment()
  {
    ParamAssignmentImpl paramAssignment = new ParamAssignmentImpl();
    return paramAssignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Clause createClause()
  {
    ClauseImpl clause = new ClauseImpl();
    return clause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ClauseContinuation createClauseContinuation()
  {
    ClauseContinuationImpl clauseContinuation = new ClauseContinuationImpl();
    return clauseContinuation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PredefinedDependency createPredefinedDependency()
  {
    PredefinedDependencyImpl predefinedDependency = new PredefinedDependencyImpl();
    return predefinedDependency;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PositiveAtomic createPositiveAtomic()
  {
    PositiveAtomicImpl positiveAtomic = new PositiveAtomicImpl();
    return positiveAtomic;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PositiveClauseContinuation createPositiveClauseContinuation()
  {
    PositiveClauseContinuationImpl positiveClauseContinuation = new PositiveClauseContinuationImpl();
    return positiveClauseContinuation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PositiveClause createPositiveClause()
  {
    PositiveClauseImpl positiveClause = new PositiveClauseImpl();
    return positiveClause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PositivePredefinedDependency createPositivePredefinedDependency()
  {
    PositivePredefinedDependencyImpl positivePredefinedDependency = new PositivePredefinedDependencyImpl();
    return positivePredefinedDependency;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InterparameterDependenciesLanguagePackage getInterparameterDependenciesLanguagePackage()
  {
    return (InterparameterDependenciesLanguagePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static InterparameterDependenciesLanguagePackage getPackage()
  {
    return InterparameterDependenciesLanguagePackage.eINSTANCE;
  }

} //InterparameterDependenciesLanguageFactoryImpl
