/*
 * generated by Xtext 2.19.0
 */
grammar InternalInterparameterDependenciesLanguage;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
}

@lexer::header {
package es.us.isa.interparamdep.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package es.us.isa.interparamdep.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import es.us.isa.interparamdep.services.InterparameterDependenciesLanguageGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/

 	private InterparameterDependenciesLanguageGrammarAccess grammarAccess;

    public InternalInterparameterDependenciesLanguageParser(TokenStream input, InterparameterDependenciesLanguageGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected InterparameterDependenciesLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getDependenciesDependencyParserRuleCall_0());
			}
			lv_dependencies_0_0=ruleDependency
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"dependencies",
					lv_dependencies_0_0,
					"es.us.isa.interparamdep.InterparameterDependenciesLanguage.Dependency");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleDependency
entryRuleDependency returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDependencyRule()); }
	iv_ruleDependency=ruleDependency
	{ $current=$iv_ruleDependency.current; }
	EOF;

// Rule Dependency
ruleDependency returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getDependencyAccess().getDepRelationalDependencyParserRuleCall_0_0_0());
					}
					lv_dep_0_1=ruleRelationalDependency
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDependencyRule());
						}
						set(
							$current,
							"dep",
							lv_dep_0_1,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.RelationalDependency");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getDependencyAccess().getDepArithmeticDependencyParserRuleCall_0_0_1());
					}
					lv_dep_0_2=ruleArithmeticDependency
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDependencyRule());
						}
						set(
							$current,
							"dep",
							lv_dep_0_2,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.ArithmeticDependency");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getDependencyAccess().getDepConditionalDependencyParserRuleCall_0_0_2());
					}
					lv_dep_0_3=ruleConditionalDependency
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDependencyRule());
						}
						set(
							$current,
							"dep",
							lv_dep_0_3,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.ConditionalDependency");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getDependencyAccess().getDepPredefinedDependencyParserRuleCall_0_0_3());
					}
					lv_dep_0_4=rulePredefinedDependency
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDependencyRule());
						}
						set(
							$current,
							"dep",
							lv_dep_0_4,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.PredefinedDependency");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_1=';'
		{
			newLeafNode(otherlv_1, grammarAccess.getDependencyAccess().getSemicolonKeyword_1());
		}
		(
			this_NL_2=RULE_NL
			{
				newLeafNode(this_NL_2, grammarAccess.getDependencyAccess().getNLTerminalRuleCall_2());
			}
		)?
	)
;

// Entry rule entryRuleRelationalOperator
entryRuleRelationalOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRelationalOperatorRule()); }
	iv_ruleRelationalOperator=ruleRelationalOperator
	{ $current=$iv_ruleRelationalOperator.current.getText(); }
	EOF;

// Rule RelationalOperator
ruleRelationalOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='<'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getLessThanSignKeyword_0());
		}
		    |
		kw='>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignKeyword_1());
		}
		    |
		kw='<='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getLessThanSignEqualsSignKeyword_2());
		}
		    |
		kw='>='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignEqualsSignKeyword_3());
		}
		    |
		kw='=='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getEqualsSignEqualsSignKeyword_4());
		}
		    |
		kw='!='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRelationalOperatorAccess().getExclamationMarkEqualsSignKeyword_5());
		}
	)
;

// Entry rule entryRuleArithmeticOperator
entryRuleArithmeticOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getArithmeticOperatorRule()); }
	iv_ruleArithmeticOperator=ruleArithmeticOperator
	{ $current=$iv_ruleArithmeticOperator.current.getText(); }
	EOF;

// Rule ArithmeticOperator
ruleArithmeticOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='+'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArithmeticOperatorAccess().getPlusSignKeyword_0());
		}
		    |
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArithmeticOperatorAccess().getHyphenMinusKeyword_1());
		}
		    |
		kw='*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArithmeticOperatorAccess().getAsteriskKeyword_2());
		}
		    |
		kw='/'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArithmeticOperatorAccess().getSolidusKeyword_3());
		}
	)
;

// Entry rule entryRuleNot
entryRuleNot returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNotRule()); }
	iv_ruleNot=ruleNot
	{ $current=$iv_ruleNot.current.getText(); }
	EOF;

// Rule Not
ruleNot returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='NOT'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getNotAccess().getNOTKeyword());
	}
;

// Entry rule entryRuleLogicalOperator
entryRuleLogicalOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLogicalOperatorRule()); }
	iv_ruleLogicalOperator=ruleLogicalOperator
	{ $current=$iv_ruleLogicalOperator.current.getText(); }
	EOF;

// Rule LogicalOperator
ruleLogicalOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='AND'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLogicalOperatorAccess().getANDKeyword_0());
		}
		    |
		kw='OR'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLogicalOperatorAccess().getORKeyword_1());
		}
	)
;

// Entry rule entryRuleRelationalDependency
entryRuleRelationalDependency returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationalDependencyRule()); }
	iv_ruleRelationalDependency=ruleRelationalDependency
	{ $current=$iv_ruleRelationalDependency.current; }
	EOF;

// Rule RelationalDependency
ruleRelationalDependency returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRelationalDependencyAccess().getParam1ParamParserRuleCall_0_0());
				}
				lv_param1_0_0=ruleParam
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelationalDependencyRule());
					}
					set(
						$current,
						"param1",
						lv_param1_0_0,
						"es.us.isa.interparamdep.InterparameterDependenciesLanguage.Param");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRelationalDependencyAccess().getRelationalOpRelationalOperatorParserRuleCall_1_0());
				}
				lv_relationalOp_1_0=ruleRelationalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelationalDependencyRule());
					}
					set(
						$current,
						"relationalOp",
						lv_relationalOp_1_0,
						"es.us.isa.interparamdep.InterparameterDependenciesLanguage.RelationalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRelationalDependencyAccess().getParam2ParamParserRuleCall_2_0());
				}
				lv_param2_2_0=ruleParam
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelationalDependencyRule());
					}
					set(
						$current,
						"param2",
						lv_param2_2_0,
						"es.us.isa.interparamdep.InterparameterDependenciesLanguage.Param");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleArithmeticDependency
entryRuleArithmeticDependency returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArithmeticDependencyRule()); }
	iv_ruleArithmeticDependency=ruleArithmeticDependency
	{ $current=$iv_ruleArithmeticDependency.current; }
	EOF;

// Rule ArithmeticDependency
ruleArithmeticDependency returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getArithmeticDependencyAccess().getOperationOperationParserRuleCall_0_0());
				}
				lv_operation_0_0=ruleOperation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArithmeticDependencyRule());
					}
					set(
						$current,
						"operation",
						lv_operation_0_0,
						"es.us.isa.interparamdep.InterparameterDependenciesLanguage.Operation");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getArithmeticDependencyAccess().getRelationalOpRelationalOperatorParserRuleCall_1_0());
				}
				lv_relationalOp_1_0=ruleRelationalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArithmeticDependencyRule());
					}
					set(
						$current,
						"relationalOp",
						lv_relationalOp_1_0,
						"es.us.isa.interparamdep.InterparameterDependenciesLanguage.RelationalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_result_2_0=RULE_DOUBLE
				{
					newLeafNode(lv_result_2_0, grammarAccess.getArithmeticDependencyAccess().getResultDOUBLETerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getArithmeticDependencyRule());
					}
					setWithLastConsumed(
						$current,
						"result",
						lv_result_2_0,
						"es.us.isa.interparamdep.InterparameterDependenciesLanguage.DOUBLE");
				}
			)
		)
	)
;

// Entry rule entryRuleOperation
entryRuleOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperationRule()); }
	iv_ruleOperation=ruleOperation
	{ $current=$iv_ruleOperation.current; }
	EOF;

// Rule Operation
ruleOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getOperationAccess().getFirstParamParamParserRuleCall_0_0_0());
					}
					lv_firstParam_0_0=ruleParam
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOperationRule());
						}
						set(
							$current,
							"firstParam",
							lv_firstParam_0_0,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.Param");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getOperationAccess().getOperationContinuationOperationContinuationParserRuleCall_0_1_0());
					}
					lv_operationContinuation_1_0=ruleOperationContinuation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOperationRule());
						}
						set(
							$current,
							"operationContinuation",
							lv_operationContinuation_1_0,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.OperationContinuation");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_openingParenthesis_2_0='('
					{
						newLeafNode(lv_openingParenthesis_2_0, grammarAccess.getOperationAccess().getOpeningParenthesisLeftParenthesisKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOperationRule());
						}
						setWithLastConsumed($current, "openingParenthesis", lv_openingParenthesis_2_0, "(");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getOperationAccess().getOperationOperationParserRuleCall_1_1_0());
					}
					lv_operation_3_0=ruleOperation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOperationRule());
						}
						set(
							$current,
							"operation",
							lv_operation_3_0,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.Operation");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					lv_closingParenthesis_4_0=')'
					{
						newLeafNode(lv_closingParenthesis_4_0, grammarAccess.getOperationAccess().getClosingParenthesisRightParenthesisKeyword_1_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOperationRule());
						}
						setWithLastConsumed($current, "closingParenthesis", lv_closingParenthesis_4_0, ")");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getOperationAccess().getOperationContinuationOperationContinuationParserRuleCall_1_3_0());
					}
					lv_operationContinuation_5_0=ruleOperationContinuation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOperationRule());
						}
						set(
							$current,
							"operationContinuation",
							lv_operationContinuation_5_0,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.OperationContinuation");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)
	)
;

// Entry rule entryRuleOperationContinuation
entryRuleOperationContinuation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperationContinuationRule()); }
	iv_ruleOperationContinuation=ruleOperationContinuation
	{ $current=$iv_ruleOperationContinuation.current; }
	EOF;

// Rule OperationContinuation
ruleOperationContinuation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getOperationContinuationAccess().getArithOpArithmeticOperatorParserRuleCall_0_0());
				}
				lv_arithOp_0_0=ruleArithmeticOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperationContinuationRule());
					}
					set(
						$current,
						"arithOp",
						lv_arithOp_0_0,
						"es.us.isa.interparamdep.InterparameterDependenciesLanguage.ArithmeticOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getOperationContinuationAccess().getAdditionalParamsParamParserRuleCall_1_0_0());
					}
					lv_additionalParams_1_1=ruleParam
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOperationContinuationRule());
						}
						set(
							$current,
							"additionalParams",
							lv_additionalParams_1_1,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.Param");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getOperationContinuationAccess().getAdditionalParamsOperationParserRuleCall_1_0_1());
					}
					lv_additionalParams_1_2=ruleOperation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOperationContinuationRule());
						}
						set(
							$current,
							"additionalParams",
							lv_additionalParams_1_2,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.Operation");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleConditionalDependency
entryRuleConditionalDependency returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionalDependencyRule()); }
	iv_ruleConditionalDependency=ruleConditionalDependency
	{ $current=$iv_ruleConditionalDependency.current; }
	EOF;

// Rule ConditionalDependency
ruleConditionalDependency returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='IF'
		{
			newLeafNode(otherlv_0, grammarAccess.getConditionalDependencyAccess().getIFKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalDependencyAccess().getConditionPredicateParserRuleCall_1_0());
				}
				lv_condition_1_0=rulePredicate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalDependencyRule());
					}
					set(
						$current,
						"condition",
						lv_condition_1_0,
						"es.us.isa.interparamdep.InterparameterDependenciesLanguage.Predicate");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='THEN'
		{
			newLeafNode(otherlv_2, grammarAccess.getConditionalDependencyAccess().getTHENKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalDependencyAccess().getConsequencePredicateParserRuleCall_3_0());
				}
				lv_consequence_3_0=rulePredicate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalDependencyRule());
					}
					set(
						$current,
						"consequence",
						lv_consequence_3_0,
						"es.us.isa.interparamdep.InterparameterDependenciesLanguage.Predicate");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePredicate
entryRulePredicate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPredicateRule()); }
	iv_rulePredicate=rulePredicate
	{ $current=$iv_rulePredicate.current; }
	EOF;

// Rule Predicate
rulePredicate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPredicateAccess().getFirstClauseClauseParserRuleCall_0_0());
				}
				lv_firstClause_0_0=ruleClause
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPredicateRule());
					}
					set(
						$current,
						"firstClause",
						lv_firstClause_0_0,
						"es.us.isa.interparamdep.InterparameterDependenciesLanguage.Clause");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPredicateAccess().getClauseContinuationClauseContinuationParserRuleCall_1_0());
				}
				lv_clauseContinuation_1_0=ruleClauseContinuation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPredicateRule());
					}
					set(
						$current,
						"clauseContinuation",
						lv_clauseContinuation_1_0,
						"es.us.isa.interparamdep.InterparameterDependenciesLanguage.ClauseContinuation");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleClause
entryRuleClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClauseRule()); }
	iv_ruleClause=ruleClause
	{ $current=$iv_ruleClause.current; }
	EOF;

// Rule Clause
ruleClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getClauseAccess().getFirstElementTermParserRuleCall_0_0_0());
					}
					lv_firstElement_0_1=ruleTerm
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getClauseRule());
						}
						set(
							$current,
							"firstElement",
							lv_firstElement_0_1,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.Term");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getClauseAccess().getFirstElementRelationalDependencyParserRuleCall_0_0_1());
					}
					lv_firstElement_0_2=ruleRelationalDependency
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getClauseRule());
						}
						set(
							$current,
							"firstElement",
							lv_firstElement_0_2,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.RelationalDependency");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getClauseAccess().getFirstElementArithmeticDependencyParserRuleCall_0_0_2());
					}
					lv_firstElement_0_3=ruleArithmeticDependency
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getClauseRule());
						}
						set(
							$current,
							"firstElement",
							lv_firstElement_0_3,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.ArithmeticDependency");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getClauseAccess().getFirstElementPredefinedDependencyParserRuleCall_0_0_3());
					}
					lv_firstElement_0_4=rulePredefinedDependency
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getClauseRule());
						}
						set(
							$current,
							"firstElement",
							lv_firstElement_0_4,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.PredefinedDependency");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getClauseAccess().getNotNotParserRuleCall_1_0_0());
					}
					lv_not_1_0=ruleNot
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getClauseRule());
						}
						set(
							$current,
							"not",
							lv_not_1_0,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.Not");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			(
				(
					lv_openingParenthesis_2_0='('
					{
						newLeafNode(lv_openingParenthesis_2_0, grammarAccess.getClauseAccess().getOpeningParenthesisLeftParenthesisKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getClauseRule());
						}
						setWithLastConsumed($current, "openingParenthesis", lv_openingParenthesis_2_0, "(");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getClauseAccess().getPredicatePredicateParserRuleCall_1_2_0());
					}
					lv_predicate_3_0=rulePredicate
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getClauseRule());
						}
						set(
							$current,
							"predicate",
							lv_predicate_3_0,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.Predicate");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					lv_closingParenthesis_4_0=')'
					{
						newLeafNode(lv_closingParenthesis_4_0, grammarAccess.getClauseAccess().getClosingParenthesisRightParenthesisKeyword_1_3_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getClauseRule());
						}
						setWithLastConsumed($current, "closingParenthesis", lv_closingParenthesis_4_0, ")");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleTerm
entryRuleTerm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTermRule()); }
	iv_ruleTerm=ruleTerm
	{ $current=$iv_ruleTerm.current; }
	EOF;

// Rule Term
ruleTerm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTermAccess().getNotNotParserRuleCall_0_0_0());
					}
					lv_not_0_0=ruleNot
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTermRule());
						}
						set(
							$current,
							"not",
							lv_not_0_0,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.Not");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getTermAccess().getParamParamParserRuleCall_0_1_0());
					}
					lv_param_1_0=ruleParam
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTermRule());
						}
						set(
							$current,
							"param",
							lv_param_1_0,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.Param");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTermAccess().getNotNotParserRuleCall_1_0_0());
					}
					lv_not_2_0=ruleNot
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTermRule());
						}
						set(
							$current,
							"not",
							lv_not_2_0,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.Not");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getTermAccess().getParamParamAssignmentParserRuleCall_1_1_0());
					}
					lv_param_3_0=ruleParamAssignment
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTermRule());
						}
						set(
							$current,
							"param",
							lv_param_3_0,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.ParamAssignment");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleParam
entryRuleParam returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParamRule()); }
	iv_ruleParam=ruleParam
	{ $current=$iv_ruleParam.current; }
	EOF;

// Rule Param
ruleParam returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_1=RULE_ID
				{
					newLeafNode(lv_name_0_1, grammarAccess.getParamAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParamRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_1,
						"es.us.isa.interparamdep.InterparameterDependenciesLanguage.ID");
				}
				    |
				lv_name_0_2=RULE_ID_SPECIAL_CHARS
				{
					newLeafNode(lv_name_0_2, grammarAccess.getParamAccess().getNameID_SPECIAL_CHARSTerminalRuleCall_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParamRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_2,
						"es.us.isa.interparamdep.InterparameterDependenciesLanguage.ID_SPECIAL_CHARS");
				}
			)
		)
	)
;

// Entry rule entryRuleParamAssignment
entryRuleParamAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParamAssignmentRule()); }
	iv_ruleParamAssignment=ruleParamAssignment
	{ $current=$iv_ruleParamAssignment.current; }
	EOF;

// Rule ParamAssignment
ruleParamAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getParamAssignmentAccess().getParamParserRuleCall_0_0());
			}
			this_Param_0=ruleParam
			{
				$current = $this_Param_0.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_1='=='
			{
				newLeafNode(otherlv_1, grammarAccess.getParamAssignmentAccess().getEqualsSignEqualsSignKeyword_0_1());
			}
			(
				(
					lv_stringValues_2_0=RULE_STRING
					{
						newLeafNode(lv_stringValues_2_0, grammarAccess.getParamAssignmentAccess().getStringValuesSTRINGTerminalRuleCall_0_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getParamAssignmentRule());
						}
						addWithLastConsumed(
							$current,
							"stringValues",
							lv_stringValues_2_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
			(
				otherlv_3='|'
				{
					newLeafNode(otherlv_3, grammarAccess.getParamAssignmentAccess().getVerticalLineKeyword_0_3_0());
				}
				(
					(
						lv_stringValues_4_0=RULE_STRING
						{
							newLeafNode(lv_stringValues_4_0, grammarAccess.getParamAssignmentAccess().getStringValuesSTRINGTerminalRuleCall_0_3_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getParamAssignmentRule());
							}
							addWithLastConsumed(
								$current,
								"stringValues",
								lv_stringValues_4_0,
								"org.eclipse.xtext.common.Terminals.STRING");
						}
					)
				)
			)*
		)
		    |
		(
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getParamAssignmentAccess().getParamParserRuleCall_1_0());
			}
			this_Param_5=ruleParam
			{
				$current = $this_Param_5.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_6='LIKE'
			{
				newLeafNode(otherlv_6, grammarAccess.getParamAssignmentAccess().getLIKEKeyword_1_1());
			}
			(
				(
					lv_patternString_7_0=RULE_STRING
					{
						newLeafNode(lv_patternString_7_0, grammarAccess.getParamAssignmentAccess().getPatternStringSTRINGTerminalRuleCall_1_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getParamAssignmentRule());
						}
						setWithLastConsumed(
							$current,
							"patternString",
							lv_patternString_7_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		    |
		(
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getParamAssignmentAccess().getParamParserRuleCall_2_0());
			}
			this_Param_8=ruleParam
			{
				$current = $this_Param_8.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_9='=='
			{
				newLeafNode(otherlv_9, grammarAccess.getParamAssignmentAccess().getEqualsSignEqualsSignKeyword_2_1());
			}
			(
				(
					lv_booleanValue_10_0=RULE_BOOLEAN
					{
						newLeafNode(lv_booleanValue_10_0, grammarAccess.getParamAssignmentAccess().getBooleanValueBOOLEANTerminalRuleCall_2_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getParamAssignmentRule());
						}
						setWithLastConsumed(
							$current,
							"booleanValue",
							lv_booleanValue_10_0,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.BOOLEAN");
					}
				)
			)
		)
		    |
		(
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getParamAssignmentAccess().getParamParserRuleCall_3_0());
			}
			this_Param_11=ruleParam
			{
				$current = $this_Param_11.current;
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getParamAssignmentAccess().getRelationalOpRelationalOperatorParserRuleCall_3_1_0());
					}
					lv_relationalOp_12_0=ruleRelationalOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParamAssignmentRule());
						}
						set(
							$current,
							"relationalOp",
							lv_relationalOp_12_0,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.RelationalOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					lv_doubleValue_13_0=RULE_DOUBLE
					{
						newLeafNode(lv_doubleValue_13_0, grammarAccess.getParamAssignmentAccess().getDoubleValueDOUBLETerminalRuleCall_3_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getParamAssignmentRule());
						}
						setWithLastConsumed(
							$current,
							"doubleValue",
							lv_doubleValue_13_0,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.DOUBLE");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleClauseContinuation
entryRuleClauseContinuation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClauseContinuationRule()); }
	iv_ruleClauseContinuation=ruleClauseContinuation
	{ $current=$iv_ruleClauseContinuation.current; }
	EOF;

// Rule ClauseContinuation
ruleClauseContinuation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getClauseContinuationAccess().getLogicalOpLogicalOperatorParserRuleCall_0_0());
				}
				lv_logicalOp_0_0=ruleLogicalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClauseContinuationRule());
					}
					set(
						$current,
						"logicalOp",
						lv_logicalOp_0_0,
						"es.us.isa.interparamdep.InterparameterDependenciesLanguage.LogicalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getClauseContinuationAccess().getAdditionalElementsPredicateParserRuleCall_1_0());
				}
				lv_additionalElements_1_0=rulePredicate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClauseContinuationRule());
					}
					set(
						$current,
						"additionalElements",
						lv_additionalElements_1_0,
						"es.us.isa.interparamdep.InterparameterDependenciesLanguage.Predicate");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePredefinedDependency
entryRulePredefinedDependency returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPredefinedDependencyRule()); }
	iv_rulePredefinedDependency=rulePredefinedDependency
	{ $current=$iv_rulePredefinedDependency.current; }
	EOF;

// Rule PredefinedDependency
rulePredefinedDependency returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPredefinedDependencyAccess().getNotNotParserRuleCall_0_0());
				}
				lv_not_0_0=ruleNot
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPredefinedDependencyRule());
					}
					set(
						$current,
						"not",
						lv_not_0_0,
						"es.us.isa.interparamdep.InterparameterDependenciesLanguage.Not");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				(
					lv_predefDepType_1_1='Or'
					{
						newLeafNode(lv_predefDepType_1_1, grammarAccess.getPredefinedDependencyAccess().getPredefDepTypeOrKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPredefinedDependencyRule());
						}
						setWithLastConsumed($current, "predefDepType", lv_predefDepType_1_1, null);
					}
					    |
					lv_predefDepType_1_2='OnlyOne'
					{
						newLeafNode(lv_predefDepType_1_2, grammarAccess.getPredefinedDependencyAccess().getPredefDepTypeOnlyOneKeyword_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPredefinedDependencyRule());
						}
						setWithLastConsumed($current, "predefDepType", lv_predefDepType_1_2, null);
					}
					    |
					lv_predefDepType_1_3='AllOrNone'
					{
						newLeafNode(lv_predefDepType_1_3, grammarAccess.getPredefinedDependencyAccess().getPredefDepTypeAllOrNoneKeyword_1_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPredefinedDependencyRule());
						}
						setWithLastConsumed($current, "predefDepType", lv_predefDepType_1_3, null);
					}
					    |
					lv_predefDepType_1_4='ZeroOrOne'
					{
						newLeafNode(lv_predefDepType_1_4, grammarAccess.getPredefinedDependencyAccess().getPredefDepTypeZeroOrOneKeyword_1_0_3());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPredefinedDependencyRule());
						}
						setWithLastConsumed($current, "predefDepType", lv_predefDepType_1_4, null);
					}
				)
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getPredefinedDependencyAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPredefinedDependencyAccess().getPredefDepElementsPositivePredicateParserRuleCall_3_0());
				}
				lv_predefDepElements_3_0=rulePositivePredicate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPredefinedDependencyRule());
					}
					add(
						$current,
						"predefDepElements",
						lv_predefDepElements_3_0,
						"es.us.isa.interparamdep.InterparameterDependenciesLanguage.PositivePredicate");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getPredefinedDependencyAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPredefinedDependencyAccess().getPredefDepElementsPositivePredicateParserRuleCall_4_1_0());
					}
					lv_predefDepElements_5_0=rulePositivePredicate
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPredefinedDependencyRule());
						}
						add(
							$current,
							"predefDepElements",
							lv_predefDepElements_5_0,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.PositivePredicate");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getPredefinedDependencyAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRulePositivePredicate
entryRulePositivePredicate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPositivePredicateRule()); }
	iv_rulePositivePredicate=rulePositivePredicate
	{ $current=$iv_rulePositivePredicate.current; }
	EOF;

// Rule PositivePredicate
rulePositivePredicate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPositivePredicateAccess().getFirstClausePositiveClauseParserRuleCall_0_0());
				}
				lv_firstClause_0_0=rulePositiveClause
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPositivePredicateRule());
					}
					set(
						$current,
						"firstClause",
						lv_firstClause_0_0,
						"es.us.isa.interparamdep.InterparameterDependenciesLanguage.PositiveClause");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPositivePredicateAccess().getClauseContinuationPositiveClauseContinuationParserRuleCall_1_0());
				}
				lv_clauseContinuation_1_0=rulePositiveClauseContinuation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPositivePredicateRule());
					}
					set(
						$current,
						"clauseContinuation",
						lv_clauseContinuation_1_0,
						"es.us.isa.interparamdep.InterparameterDependenciesLanguage.PositiveClauseContinuation");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRulePositiveTerm
entryRulePositiveTerm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPositiveTermRule()); }
	iv_rulePositiveTerm=rulePositiveTerm
	{ $current=$iv_rulePositiveTerm.current; }
	EOF;

// Rule PositiveTerm
rulePositiveTerm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPositiveTermAccess().getParamParamParserRuleCall_0_0());
				}
				lv_param_0_0=ruleParam
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPositiveTermRule());
					}
					set(
						$current,
						"param",
						lv_param_0_0,
						"es.us.isa.interparamdep.InterparameterDependenciesLanguage.Param");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPositiveTermAccess().getParamParamAssignmentParserRuleCall_1_0());
				}
				lv_param_1_0=ruleParamAssignment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPositiveTermRule());
					}
					set(
						$current,
						"param",
						lv_param_1_0,
						"es.us.isa.interparamdep.InterparameterDependenciesLanguage.ParamAssignment");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getPositiveTermAccess().getRelationalDependencyParserRuleCall_2());
		}
		this_RelationalDependency_2=ruleRelationalDependency
		{
			$current = $this_RelationalDependency_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePositiveClause
entryRulePositiveClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPositiveClauseRule()); }
	iv_rulePositiveClause=rulePositiveClause
	{ $current=$iv_rulePositiveClause.current; }
	EOF;

// Rule PositiveClause
rulePositiveClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getPositiveClauseAccess().getFirstElementPositiveTermParserRuleCall_0_0_0());
					}
					lv_firstElement_0_1=rulePositiveTerm
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPositiveClauseRule());
						}
						set(
							$current,
							"firstElement",
							lv_firstElement_0_1,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.PositiveTerm");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getPositiveClauseAccess().getFirstElementRelationalDependencyParserRuleCall_0_0_1());
					}
					lv_firstElement_0_2=ruleRelationalDependency
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPositiveClauseRule());
						}
						set(
							$current,
							"firstElement",
							lv_firstElement_0_2,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.RelationalDependency");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getPositiveClauseAccess().getFirstElementArithmeticDependencyParserRuleCall_0_0_2());
					}
					lv_firstElement_0_3=ruleArithmeticDependency
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPositiveClauseRule());
						}
						set(
							$current,
							"firstElement",
							lv_firstElement_0_3,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.ArithmeticDependency");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getPositiveClauseAccess().getFirstElementPositivePredefinedDependencyParserRuleCall_0_0_3());
					}
					lv_firstElement_0_4=rulePositivePredefinedDependency
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPositiveClauseRule());
						}
						set(
							$current,
							"firstElement",
							lv_firstElement_0_4,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.PositivePredefinedDependency");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_openingParenthesis_1_0='('
					{
						newLeafNode(lv_openingParenthesis_1_0, grammarAccess.getPositiveClauseAccess().getOpeningParenthesisLeftParenthesisKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPositiveClauseRule());
						}
						setWithLastConsumed($current, "openingParenthesis", lv_openingParenthesis_1_0, "(");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPositiveClauseAccess().getPredicatePositivePredicateParserRuleCall_1_1_0());
					}
					lv_predicate_2_0=rulePositivePredicate
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPositiveClauseRule());
						}
						set(
							$current,
							"predicate",
							lv_predicate_2_0,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.PositivePredicate");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					lv_closingParenthesis_3_0=')'
					{
						newLeafNode(lv_closingParenthesis_3_0, grammarAccess.getPositiveClauseAccess().getClosingParenthesisRightParenthesisKeyword_1_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPositiveClauseRule());
						}
						setWithLastConsumed($current, "closingParenthesis", lv_closingParenthesis_3_0, ")");
					}
				)
			)
		)
	)
;

// Entry rule entryRulePositiveClauseContinuation
entryRulePositiveClauseContinuation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPositiveClauseContinuationRule()); }
	iv_rulePositiveClauseContinuation=rulePositiveClauseContinuation
	{ $current=$iv_rulePositiveClauseContinuation.current; }
	EOF;

// Rule PositiveClauseContinuation
rulePositiveClauseContinuation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPositiveClauseContinuationAccess().getLogicalOpLogicalOperatorParserRuleCall_0_0());
				}
				lv_logicalOp_0_0=ruleLogicalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPositiveClauseContinuationRule());
					}
					set(
						$current,
						"logicalOp",
						lv_logicalOp_0_0,
						"es.us.isa.interparamdep.InterparameterDependenciesLanguage.LogicalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPositiveClauseContinuationAccess().getAdditionalElementsPositivePredicateParserRuleCall_1_0());
				}
				lv_additionalElements_1_0=rulePositivePredicate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPositiveClauseContinuationRule());
					}
					set(
						$current,
						"additionalElements",
						lv_additionalElements_1_0,
						"es.us.isa.interparamdep.InterparameterDependenciesLanguage.PositivePredicate");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePositivePredefinedDependency
entryRulePositivePredefinedDependency returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPositivePredefinedDependencyRule()); }
	iv_rulePositivePredefinedDependency=rulePositivePredefinedDependency
	{ $current=$iv_rulePositivePredefinedDependency.current; }
	EOF;

// Rule PositivePredefinedDependency
rulePositivePredefinedDependency returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_predefDepType_0_1='Or'
					{
						newLeafNode(lv_predefDepType_0_1, grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepTypeOrKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPositivePredefinedDependencyRule());
						}
						setWithLastConsumed($current, "predefDepType", lv_predefDepType_0_1, null);
					}
					    |
					lv_predefDepType_0_2='OnlyOne'
					{
						newLeafNode(lv_predefDepType_0_2, grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepTypeOnlyOneKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPositivePredefinedDependencyRule());
						}
						setWithLastConsumed($current, "predefDepType", lv_predefDepType_0_2, null);
					}
					    |
					lv_predefDepType_0_3='AllOrNone'
					{
						newLeafNode(lv_predefDepType_0_3, grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepTypeAllOrNoneKeyword_0_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPositivePredefinedDependencyRule());
						}
						setWithLastConsumed($current, "predefDepType", lv_predefDepType_0_3, null);
					}
					    |
					lv_predefDepType_0_4='ZeroOrOne'
					{
						newLeafNode(lv_predefDepType_0_4, grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepTypeZeroOrOneKeyword_0_0_3());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPositivePredefinedDependencyRule());
						}
						setWithLastConsumed($current, "predefDepType", lv_predefDepType_0_4, null);
					}
				)
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getPositivePredefinedDependencyAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepElementsPositivePredicateParserRuleCall_2_0());
				}
				lv_predefDepElements_2_0=rulePositivePredicate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPositivePredefinedDependencyRule());
					}
					add(
						$current,
						"predefDepElements",
						lv_predefDepElements_2_0,
						"es.us.isa.interparamdep.InterparameterDependenciesLanguage.PositivePredicate");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getPositivePredefinedDependencyAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepElementsPositivePredicateParserRuleCall_3_1_0());
					}
					lv_predefDepElements_4_0=rulePositivePredicate
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPositivePredefinedDependencyRule());
						}
						add(
							$current,
							"predefDepElements",
							lv_predefDepElements_4_0,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.PositivePredicate");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getPositivePredefinedDependencyAccess().getRightParenthesisKeyword_4());
		}
	)
;

RULE_NL : ('\r'? '\n')+;

RULE_BOOLEAN : ('true'|'false');

RULE_DOUBLE : RULE_INT ('.' RULE_INT)?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_'|'.') ('a'..'z'|'A'..'Z'|'_'|'.'|'0'..'9')*;

RULE_ID_SPECIAL_CHARS : '[' '^'? ('a'..'z'|'A'..'Z'|'_'|'.'|'-'|'/'|':') ('a'..'z'|'A'..'Z'|'_'|'.'|'-'|'/'|':'|'0'..'9')* ']';

fragment RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
