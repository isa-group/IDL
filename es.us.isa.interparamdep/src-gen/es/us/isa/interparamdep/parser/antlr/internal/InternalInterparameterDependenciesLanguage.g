/*
 * generated by Xtext 2.19.0
 */
grammar InternalInterparameterDependenciesLanguage;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package es.us.isa.interparamdep.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package es.us.isa.interparamdep.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import es.us.isa.interparamdep.services.InterparameterDependenciesLanguageGrammarAccess;

}

@parser::members {

 	private InterparameterDependenciesLanguageGrammarAccess grammarAccess;

    public InternalInterparameterDependenciesLanguageParser(TokenStream input, InterparameterDependenciesLanguageGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected InterparameterDependenciesLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getDependenciesDependencyParserRuleCall_0());
			}
			lv_dependencies_0_0=ruleDependency
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"dependencies",
					lv_dependencies_0_0,
					"es.us.isa.interparamdep.InterparameterDependenciesLanguage.Dependency");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleDependency
entryRuleDependency returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDependencyRule()); }
	iv_ruleDependency=ruleDependency
	{ $current=$iv_ruleDependency.current; }
	EOF;

// Rule Dependency
ruleDependency returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getDependencyAccess().getDepArithmeticDependencyParserRuleCall_0_0_0());
					}
					lv_dep_0_1=ruleArithmeticDependency
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDependencyRule());
						}
						set(
							$current,
							"dep",
							lv_dep_0_1,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.ArithmeticDependency");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getDependencyAccess().getDepConditionalDependencyParserRuleCall_0_0_1());
					}
					lv_dep_0_2=ruleConditionalDependency
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDependencyRule());
						}
						set(
							$current,
							"dep",
							lv_dep_0_2,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.ConditionalDependency");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getDependencyAccess().getDepPredefinedDependencyParserRuleCall_0_0_2());
					}
					lv_dep_0_3=rulePredefinedDependency
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDependencyRule());
						}
						set(
							$current,
							"dep",
							lv_dep_0_3,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.PredefinedDependency");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_1=';'
		{
			newLeafNode(otherlv_1, grammarAccess.getDependencyAccess().getSemicolonKeyword_1());
		}
		(
			this_NL_2=RULE_NL
			{
				newLeafNode(this_NL_2, grammarAccess.getDependencyAccess().getNLTerminalRuleCall_2());
			}
		)?
	)
;

// Entry rule entryRuleArithmeticDependency
entryRuleArithmeticDependency returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArithmeticDependencyRule()); }
	iv_ruleArithmeticDependency=ruleArithmeticDependency
	{ $current=$iv_ruleArithmeticDependency.current; }
	EOF;

// Rule ArithmeticDependency
ruleArithmeticDependency returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_param1_0_0=RULE_ID
				{
					newLeafNode(lv_param1_0_0, grammarAccess.getArithmeticDependencyAccess().getParam1IDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getArithmeticDependencyRule());
					}
					setWithLastConsumed(
						$current,
						"param1",
						lv_param1_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getArithmeticDependencyAccess().getArithOpArithmeticOperatorParserRuleCall_1_0());
				}
				lv_arithOp_1_0=ruleArithmeticOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArithmeticDependencyRule());
					}
					set(
						$current,
						"arithOp",
						lv_arithOp_1_0,
						"es.us.isa.interparamdep.InterparameterDependenciesLanguage.ArithmeticOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_param2_2_0=RULE_ID
				{
					newLeafNode(lv_param2_2_0, grammarAccess.getArithmeticDependencyAccess().getParam2IDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getArithmeticDependencyRule());
					}
					setWithLastConsumed(
						$current,
						"param2",
						lv_param2_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleArithmeticOperator
entryRuleArithmeticOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getArithmeticOperatorRule()); }
	iv_ruleArithmeticOperator=ruleArithmeticOperator
	{ $current=$iv_ruleArithmeticOperator.current.getText(); }
	EOF;

// Rule ArithmeticOperator
ruleArithmeticOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='<'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArithmeticOperatorAccess().getLessThanSignKeyword_0());
		}
		    |
		kw='>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArithmeticOperatorAccess().getGreaterThanSignKeyword_1());
		}
		    |
		kw='<='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArithmeticOperatorAccess().getLessThanSignEqualsSignKeyword_2());
		}
		    |
		kw='>='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArithmeticOperatorAccess().getGreaterThanSignEqualsSignKeyword_3());
		}
		    |
		kw='='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArithmeticOperatorAccess().getEqualsSignKeyword_4());
		}
		    |
		kw='!='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArithmeticOperatorAccess().getExclamationMarkEqualsSignKeyword_5());
		}
	)
;

// Entry rule entryRuleConditionalDependency
entryRuleConditionalDependency returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionalDependencyRule()); }
	iv_ruleConditionalDependency=ruleConditionalDependency
	{ $current=$iv_ruleConditionalDependency.current; }
	EOF;

// Rule ConditionalDependency
ruleConditionalDependency returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='IF'
		{
			newLeafNode(otherlv_0, grammarAccess.getConditionalDependencyAccess().getIFKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalDependencyAccess().getConditionPredicateParserRuleCall_1_0());
				}
				lv_condition_1_0=rulePredicate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalDependencyRule());
					}
					set(
						$current,
						"condition",
						lv_condition_1_0,
						"es.us.isa.interparamdep.InterparameterDependenciesLanguage.Predicate");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='THEN'
		{
			newLeafNode(otherlv_2, grammarAccess.getConditionalDependencyAccess().getTHENKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalDependencyAccess().getConsequencePredicateParserRuleCall_3_0());
				}
				lv_consequence_3_0=rulePredicate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalDependencyRule());
					}
					set(
						$current,
						"consequence",
						lv_consequence_3_0,
						"es.us.isa.interparamdep.InterparameterDependenciesLanguage.Predicate");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePredicate
entryRulePredicate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPredicateRule()); }
	iv_rulePredicate=rulePredicate
	{ $current=$iv_rulePredicate.current; }
	EOF;

// Rule Predicate
rulePredicate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPredicateAccess().getClauseParserRuleCall_0());
		}
		this_Clause_0=ruleClause
		{
			$current = $this_Clause_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPredicateAccess().getAtomicParserRuleCall_1());
		}
		this_Atomic_1=ruleAtomic
		{
			$current = $this_Atomic_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAtomic
entryRuleAtomic returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomicRule()); }
	iv_ruleAtomic=ruleAtomic
	{ $current=$iv_ruleAtomic.current; }
	EOF;

// Rule Atomic
ruleAtomic returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAtomicAccess().getNotNotParserRuleCall_0_0_0());
					}
					lv_not_0_0=ruleNot
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAtomicRule());
						}
						set(
							$current,
							"not",
							lv_not_0_0,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.Not");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getAtomicAccess().getParamParamParserRuleCall_0_1_0());
					}
					lv_param_1_0=ruleParam
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAtomicRule());
						}
						set(
							$current,
							"param",
							lv_param_1_0,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.Param");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAtomicAccess().getNotNotParserRuleCall_1_0_0());
					}
					lv_not_2_0=ruleNot
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAtomicRule());
						}
						set(
							$current,
							"not",
							lv_not_2_0,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.Not");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getAtomicAccess().getParamAssignmentParamAssignmentParserRuleCall_1_1_0());
					}
					lv_paramAssignment_3_0=ruleParamAssignment
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAtomicRule());
						}
						set(
							$current,
							"paramAssignment",
							lv_paramAssignment_3_0,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.ParamAssignment");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getAtomicAccess().getArithmeticDependencyParserRuleCall_2());
		}
		this_ArithmeticDependency_4=ruleArithmeticDependency
		{
			$current = $this_ArithmeticDependency_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleParam
entryRuleParam returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParamRule()); }
	iv_ruleParam=ruleParam
	{ $current=$iv_ruleParam.current; }
	EOF;

// Rule Param
ruleParam returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getParamAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getParamRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleParamAssignment
entryRuleParamAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParamAssignmentRule()); }
	iv_ruleParamAssignment=ruleParamAssignment
	{ $current=$iv_ruleParamAssignment.current; }
	EOF;

// Rule ParamAssignment
ruleParamAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getParamAssignmentAccess().getParamParserRuleCall_0());
		}
		this_Param_0=ruleParam
		{
			$current = $this_Param_0.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getParamAssignmentAccess().getEqualsSignKeyword_1());
		}
		(
			(
				lv_paramValues_2_0=RULE_STRING
				{
					newLeafNode(lv_paramValues_2_0, grammarAccess.getParamAssignmentAccess().getParamValuesSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParamAssignmentRule());
					}
					addWithLastConsumed(
						$current,
						"paramValues",
						lv_paramValues_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			otherlv_3='|'
			{
				newLeafNode(otherlv_3, grammarAccess.getParamAssignmentAccess().getVerticalLineKeyword_3_0());
			}
			(
				(
					lv_paramValues_4_0=RULE_STRING
					{
						newLeafNode(lv_paramValues_4_0, grammarAccess.getParamAssignmentAccess().getParamValuesSTRINGTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getParamAssignmentRule());
						}
						addWithLastConsumed(
							$current,
							"paramValues",
							lv_paramValues_4_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleClause
entryRuleClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClauseRule()); }
	iv_ruleClause=ruleClause
	{ $current=$iv_ruleClause.current; }
	EOF;

// Rule Clause
ruleClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getClauseAccess().getFirstElementAtomicParserRuleCall_0_0_0());
					}
					lv_firstElement_0_0=ruleAtomic
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getClauseRule());
						}
						set(
							$current,
							"firstElement",
							lv_firstElement_0_0,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.Atomic");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getClauseAccess().getClauseContinuationClauseContinuationParserRuleCall_0_1_0());
					}
					lv_clauseContinuation_1_0=ruleClauseContinuation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getClauseRule());
						}
						set(
							$current,
							"clauseContinuation",
							lv_clauseContinuation_1_0,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.ClauseContinuation");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getClauseAccess().getNotNotParserRuleCall_1_0_0());
					}
					lv_not_2_0=ruleNot
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getClauseRule());
						}
						set(
							$current,
							"not",
							lv_not_2_0,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.Not");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			otherlv_3='('
			{
				newLeafNode(otherlv_3, grammarAccess.getClauseAccess().getLeftParenthesisKeyword_1_1());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getClauseAccess().getFirstElementAtomicParserRuleCall_1_2_0_0());
						}
						lv_firstElement_4_1=ruleAtomic
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getClauseRule());
							}
							set(
								$current,
								"firstElement",
								lv_firstElement_4_1,
								"es.us.isa.interparamdep.InterparameterDependenciesLanguage.Atomic");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getClauseAccess().getFirstElementPredefinedDependencyParserRuleCall_1_2_0_1());
						}
						lv_firstElement_4_2=rulePredefinedDependency
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getClauseRule());
							}
							set(
								$current,
								"firstElement",
								lv_firstElement_4_2,
								"es.us.isa.interparamdep.InterparameterDependenciesLanguage.PredefinedDependency");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getClauseAccess().getClauseContinuationClauseContinuationParserRuleCall_1_3_0());
					}
					lv_clauseContinuation_5_0=ruleClauseContinuation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getClauseRule());
						}
						set(
							$current,
							"clauseContinuation",
							lv_clauseContinuation_5_0,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.ClauseContinuation");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_6=')'
			{
				newLeafNode(otherlv_6, grammarAccess.getClauseAccess().getRightParenthesisKeyword_1_4());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getClauseAccess().getClauseContinuation2ClauseContinuationParserRuleCall_1_5_0());
					}
					lv_clauseContinuation2_7_0=ruleClauseContinuation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getClauseRule());
						}
						set(
							$current,
							"clauseContinuation2",
							lv_clauseContinuation2_7_0,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.ClauseContinuation");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getClauseAccess().getFirstElementPredefinedDependencyParserRuleCall_2_0_0());
					}
					lv_firstElement_8_0=rulePredefinedDependency
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getClauseRule());
						}
						set(
							$current,
							"firstElement",
							lv_firstElement_8_0,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.PredefinedDependency");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getClauseAccess().getClauseContinuationClauseContinuationParserRuleCall_2_1_0());
					}
					lv_clauseContinuation_9_0=ruleClauseContinuation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getClauseRule());
						}
						set(
							$current,
							"clauseContinuation",
							lv_clauseContinuation_9_0,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.ClauseContinuation");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)
	)
;

// Entry rule entryRuleClauseContinuation
entryRuleClauseContinuation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClauseContinuationRule()); }
	iv_ruleClauseContinuation=ruleClauseContinuation
	{ $current=$iv_ruleClauseContinuation.current; }
	EOF;

// Rule ClauseContinuation
ruleClauseContinuation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getClauseContinuationAccess().getLogicalOpLogicalOperatorParserRuleCall_0_0());
				}
				lv_logicalOp_0_0=ruleLogicalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClauseContinuationRule());
					}
					set(
						$current,
						"logicalOp",
						lv_logicalOp_0_0,
						"es.us.isa.interparamdep.InterparameterDependenciesLanguage.LogicalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getClauseContinuationAccess().getAdditionalElementsAtomicParserRuleCall_1_0_0());
					}
					lv_additionalElements_1_1=ruleAtomic
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getClauseContinuationRule());
						}
						set(
							$current,
							"additionalElements",
							lv_additionalElements_1_1,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.Atomic");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getClauseContinuationAccess().getAdditionalElementsClauseParserRuleCall_1_0_1());
					}
					lv_additionalElements_1_2=ruleClause
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getClauseContinuationRule());
						}
						set(
							$current,
							"additionalElements",
							lv_additionalElements_1_2,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.Clause");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRulePredefinedDependency
entryRulePredefinedDependency returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPredefinedDependencyRule()); }
	iv_rulePredefinedDependency=rulePredefinedDependency
	{ $current=$iv_rulePredefinedDependency.current; }
	EOF;

// Rule PredefinedDependency
rulePredefinedDependency returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPredefinedDependencyAccess().getNotNotParserRuleCall_0_0());
				}
				lv_not_0_0=ruleNot
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPredefinedDependencyRule());
					}
					set(
						$current,
						"not",
						lv_not_0_0,
						"es.us.isa.interparamdep.InterparameterDependenciesLanguage.Not");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				(
					lv_predefDepType_1_1='Or'
					{
						newLeafNode(lv_predefDepType_1_1, grammarAccess.getPredefinedDependencyAccess().getPredefDepTypeOrKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPredefinedDependencyRule());
						}
						setWithLastConsumed($current, "predefDepType", lv_predefDepType_1_1, null);
					}
					    |
					lv_predefDepType_1_2='OnlyOne'
					{
						newLeafNode(lv_predefDepType_1_2, grammarAccess.getPredefinedDependencyAccess().getPredefDepTypeOnlyOneKeyword_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPredefinedDependencyRule());
						}
						setWithLastConsumed($current, "predefDepType", lv_predefDepType_1_2, null);
					}
					    |
					lv_predefDepType_1_3='AllOrNone'
					{
						newLeafNode(lv_predefDepType_1_3, grammarAccess.getPredefinedDependencyAccess().getPredefDepTypeAllOrNoneKeyword_1_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPredefinedDependencyRule());
						}
						setWithLastConsumed($current, "predefDepType", lv_predefDepType_1_3, null);
					}
					    |
					lv_predefDepType_1_4='ZeroOrOne'
					{
						newLeafNode(lv_predefDepType_1_4, grammarAccess.getPredefinedDependencyAccess().getPredefDepTypeZeroOrOneKeyword_1_0_3());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPredefinedDependencyRule());
						}
						setWithLastConsumed($current, "predefDepType", lv_predefDepType_1_4, null);
					}
				)
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getPredefinedDependencyAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getPredefinedDependencyAccess().getPredefDepClausesPositiveAtomicParserRuleCall_3_0_0());
					}
					lv_predefDepClauses_3_1=rulePositiveAtomic
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPredefinedDependencyRule());
						}
						add(
							$current,
							"predefDepClauses",
							lv_predefDepClauses_3_1,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.PositiveAtomic");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getPredefinedDependencyAccess().getPredefDepClausesPositiveClauseParserRuleCall_3_0_1());
					}
					lv_predefDepClauses_3_2=rulePositiveClause
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPredefinedDependencyRule());
						}
						add(
							$current,
							"predefDepClauses",
							lv_predefDepClauses_3_2,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.PositiveClause");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getPredefinedDependencyAccess().getCommaKeyword_4_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getPredefinedDependencyAccess().getPredefDepClausesPositiveAtomicParserRuleCall_4_1_0_0());
						}
						lv_predefDepClauses_5_1=rulePositiveAtomic
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPredefinedDependencyRule());
							}
							add(
								$current,
								"predefDepClauses",
								lv_predefDepClauses_5_1,
								"es.us.isa.interparamdep.InterparameterDependenciesLanguage.PositiveAtomic");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getPredefinedDependencyAccess().getPredefDepClausesPositiveClauseParserRuleCall_4_1_0_1());
						}
						lv_predefDepClauses_5_2=rulePositiveClause
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPredefinedDependencyRule());
							}
							add(
								$current,
								"predefDepClauses",
								lv_predefDepClauses_5_2,
								"es.us.isa.interparamdep.InterparameterDependenciesLanguage.PositiveClause");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)+
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getPredefinedDependencyAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRulePositiveAtomic
entryRulePositiveAtomic returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPositiveAtomicRule()); }
	iv_rulePositiveAtomic=rulePositiveAtomic
	{ $current=$iv_rulePositiveAtomic.current; }
	EOF;

// Rule PositiveAtomic
rulePositiveAtomic returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPositiveAtomicAccess().getParamParserRuleCall_0());
		}
		this_Param_0=ruleParam
		{
			$current = $this_Param_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPositiveAtomicAccess().getParamAssignmentParserRuleCall_1());
		}
		this_ParamAssignment_1=ruleParamAssignment
		{
			$current = $this_ParamAssignment_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPositiveAtomicAccess().getArithmeticDependencyParserRuleCall_2());
		}
		this_ArithmeticDependency_2=ruleArithmeticDependency
		{
			$current = $this_ArithmeticDependency_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePositiveClauseContinuation
entryRulePositiveClauseContinuation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPositiveClauseContinuationRule()); }
	iv_rulePositiveClauseContinuation=rulePositiveClauseContinuation
	{ $current=$iv_rulePositiveClauseContinuation.current; }
	EOF;

// Rule PositiveClauseContinuation
rulePositiveClauseContinuation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPositiveClauseContinuationAccess().getLogicalOpLogicalOperatorParserRuleCall_0_0());
				}
				lv_logicalOp_0_0=ruleLogicalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPositiveClauseContinuationRule());
					}
					set(
						$current,
						"logicalOp",
						lv_logicalOp_0_0,
						"es.us.isa.interparamdep.InterparameterDependenciesLanguage.LogicalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getPositiveClauseContinuationAccess().getAdditionalElementsPositiveAtomicParserRuleCall_1_0_0());
					}
					lv_additionalElements_1_1=rulePositiveAtomic
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPositiveClauseContinuationRule());
						}
						set(
							$current,
							"additionalElements",
							lv_additionalElements_1_1,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.PositiveAtomic");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getPositiveClauseContinuationAccess().getAdditionalElementsPositiveClauseParserRuleCall_1_0_1());
					}
					lv_additionalElements_1_2=rulePositiveClause
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPositiveClauseContinuationRule());
						}
						set(
							$current,
							"additionalElements",
							lv_additionalElements_1_2,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.PositiveClause");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRulePositiveClause
entryRulePositiveClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPositiveClauseRule()); }
	iv_rulePositiveClause=rulePositiveClause
	{ $current=$iv_rulePositiveClause.current; }
	EOF;

// Rule PositiveClause
rulePositiveClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getPositiveClauseAccess().getPositiveFirstElementPositiveAtomicParserRuleCall_0_0_0());
					}
					lv_positiveFirstElement_0_0=rulePositiveAtomic
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPositiveClauseRule());
						}
						set(
							$current,
							"positiveFirstElement",
							lv_positiveFirstElement_0_0,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.PositiveAtomic");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPositiveClauseAccess().getPositiveClauseContinuationPositiveClauseContinuationParserRuleCall_0_1_0());
					}
					lv_positiveClauseContinuation_1_0=rulePositiveClauseContinuation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPositiveClauseRule());
						}
						set(
							$current,
							"positiveClauseContinuation",
							lv_positiveClauseContinuation_1_0,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.PositiveClauseContinuation");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getPositiveClauseAccess().getLeftParenthesisKeyword_1_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getPositiveClauseAccess().getPositiveFirstElementPositiveAtomicParserRuleCall_1_1_0_0());
						}
						lv_positiveFirstElement_3_1=rulePositiveAtomic
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPositiveClauseRule());
							}
							set(
								$current,
								"positiveFirstElement",
								lv_positiveFirstElement_3_1,
								"es.us.isa.interparamdep.InterparameterDependenciesLanguage.PositiveAtomic");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getPositiveClauseAccess().getPositiveFirstElementPositivePredefinedDependencyParserRuleCall_1_1_0_1());
						}
						lv_positiveFirstElement_3_2=rulePositivePredefinedDependency
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPositiveClauseRule());
							}
							set(
								$current,
								"positiveFirstElement",
								lv_positiveFirstElement_3_2,
								"es.us.isa.interparamdep.InterparameterDependenciesLanguage.PositivePredefinedDependency");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPositiveClauseAccess().getPositiveClauseContinuationPositiveClauseContinuationParserRuleCall_1_2_0());
					}
					lv_positiveClauseContinuation_4_0=rulePositiveClauseContinuation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPositiveClauseRule());
						}
						set(
							$current,
							"positiveClauseContinuation",
							lv_positiveClauseContinuation_4_0,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.PositiveClauseContinuation");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getPositiveClauseAccess().getRightParenthesisKeyword_1_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPositiveClauseAccess().getPositiveClauseContinuation2PositiveClauseContinuationParserRuleCall_1_4_0());
					}
					lv_positiveClauseContinuation2_6_0=rulePositiveClauseContinuation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPositiveClauseRule());
						}
						set(
							$current,
							"positiveClauseContinuation2",
							lv_positiveClauseContinuation2_6_0,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.PositiveClauseContinuation");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getPositiveClauseAccess().getPositivePredefinedDependencyParserRuleCall_2_0());
			}
			this_PositivePredefinedDependency_7=rulePositivePredefinedDependency
			{
				$current = $this_PositivePredefinedDependency_7.current;
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPositiveClauseAccess().getPositiveClauseContinuationPositiveClauseContinuationParserRuleCall_2_1_0());
					}
					lv_positiveClauseContinuation_8_0=rulePositiveClauseContinuation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPositiveClauseRule());
						}
						set(
							$current,
							"positiveClauseContinuation",
							lv_positiveClauseContinuation_8_0,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.PositiveClauseContinuation");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)
	)
;

// Entry rule entryRulePositivePredefinedDependency
entryRulePositivePredefinedDependency returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPositivePredefinedDependencyRule()); }
	iv_rulePositivePredefinedDependency=rulePositivePredefinedDependency
	{ $current=$iv_rulePositivePredefinedDependency.current; }
	EOF;

// Rule PositivePredefinedDependency
rulePositivePredefinedDependency returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_predefDepType_0_1='Or'
					{
						newLeafNode(lv_predefDepType_0_1, grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepTypeOrKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPositivePredefinedDependencyRule());
						}
						setWithLastConsumed($current, "predefDepType", lv_predefDepType_0_1, null);
					}
					    |
					lv_predefDepType_0_2='OnlyOne'
					{
						newLeafNode(lv_predefDepType_0_2, grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepTypeOnlyOneKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPositivePredefinedDependencyRule());
						}
						setWithLastConsumed($current, "predefDepType", lv_predefDepType_0_2, null);
					}
					    |
					lv_predefDepType_0_3='AllOrNone'
					{
						newLeafNode(lv_predefDepType_0_3, grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepTypeAllOrNoneKeyword_0_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPositivePredefinedDependencyRule());
						}
						setWithLastConsumed($current, "predefDepType", lv_predefDepType_0_3, null);
					}
					    |
					lv_predefDepType_0_4='ZeroOrOne'
					{
						newLeafNode(lv_predefDepType_0_4, grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepTypeZeroOrOneKeyword_0_0_3());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPositivePredefinedDependencyRule());
						}
						setWithLastConsumed($current, "predefDepType", lv_predefDepType_0_4, null);
					}
				)
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getPositivePredefinedDependencyAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepClausesPositiveAtomicParserRuleCall_2_0_0());
					}
					lv_predefDepClauses_2_1=rulePositiveAtomic
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPositivePredefinedDependencyRule());
						}
						add(
							$current,
							"predefDepClauses",
							lv_predefDepClauses_2_1,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.PositiveAtomic");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepClausesPositiveClauseParserRuleCall_2_0_1());
					}
					lv_predefDepClauses_2_2=rulePositiveClause
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPositivePredefinedDependencyRule());
						}
						add(
							$current,
							"predefDepClauses",
							lv_predefDepClauses_2_2,
							"es.us.isa.interparamdep.InterparameterDependenciesLanguage.PositiveClause");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getPositivePredefinedDependencyAccess().getCommaKeyword_3_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepClausesPositiveAtomicParserRuleCall_3_1_0_0());
						}
						lv_predefDepClauses_4_1=rulePositiveAtomic
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPositivePredefinedDependencyRule());
							}
							add(
								$current,
								"predefDepClauses",
								lv_predefDepClauses_4_1,
								"es.us.isa.interparamdep.InterparameterDependenciesLanguage.PositiveAtomic");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getPositivePredefinedDependencyAccess().getPredefDepClausesPositiveClauseParserRuleCall_3_1_0_1());
						}
						lv_predefDepClauses_4_2=rulePositiveClause
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPositivePredefinedDependencyRule());
							}
							add(
								$current,
								"predefDepClauses",
								lv_predefDepClauses_4_2,
								"es.us.isa.interparamdep.InterparameterDependenciesLanguage.PositiveClause");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)+
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getPositivePredefinedDependencyAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleNot
entryRuleNot returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNotRule()); }
	iv_ruleNot=ruleNot
	{ $current=$iv_ruleNot.current.getText(); }
	EOF;

// Rule Not
ruleNot returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='NOT'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getNotAccess().getNOTKeyword());
	}
;

// Entry rule entryRuleLogicalOperator
entryRuleLogicalOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLogicalOperatorRule()); }
	iv_ruleLogicalOperator=ruleLogicalOperator
	{ $current=$iv_ruleLogicalOperator.current.getText(); }
	EOF;

// Rule LogicalOperator
ruleLogicalOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='AND'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLogicalOperatorAccess().getANDKeyword_0());
		}
		    |
		kw='OR'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLogicalOperatorAccess().getORKeyword_1());
		}
	)
;

RULE_NL : ('\r'? '\n')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
