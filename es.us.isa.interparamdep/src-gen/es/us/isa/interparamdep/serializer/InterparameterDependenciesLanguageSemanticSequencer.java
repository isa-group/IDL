/*
 * generated by Xtext 2.19.0
 */
package es.us.isa.interparamdep.serializer;

import com.google.inject.Inject;
import es.us.isa.interparamdep.interparameterDependenciesLanguage.ArithmeticDependency;
import es.us.isa.interparamdep.interparameterDependenciesLanguage.ComparisonDependency;
import es.us.isa.interparamdep.interparameterDependenciesLanguage.ConditionalDependency;
import es.us.isa.interparamdep.interparameterDependenciesLanguage.Dependency;
import es.us.isa.interparamdep.interparameterDependenciesLanguage.GeneralAtomic;
import es.us.isa.interparamdep.interparameterDependenciesLanguage.GeneralClause;
import es.us.isa.interparamdep.interparameterDependenciesLanguage.GeneralClauseContinuation;
import es.us.isa.interparamdep.interparameterDependenciesLanguage.GeneralPredefinedDependency;
import es.us.isa.interparamdep.interparameterDependenciesLanguage.InterparameterDependenciesLanguagePackage;
import es.us.isa.interparamdep.interparameterDependenciesLanguage.Model;
import es.us.isa.interparamdep.interparameterDependenciesLanguage.Operation;
import es.us.isa.interparamdep.interparameterDependenciesLanguage.OperationContinuation;
import es.us.isa.interparamdep.interparameterDependenciesLanguage.Param;
import es.us.isa.interparamdep.services.InterparameterDependenciesLanguageGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class InterparameterDependenciesLanguageSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private InterparameterDependenciesLanguageGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == InterparameterDependenciesLanguagePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case InterparameterDependenciesLanguagePackage.ARITHMETIC_DEPENDENCY:
				sequence_ArithmeticDependency(context, (ArithmeticDependency) semanticObject); 
				return; 
			case InterparameterDependenciesLanguagePackage.COMPARISON_DEPENDENCY:
				sequence_ComparisonDependency(context, (ComparisonDependency) semanticObject); 
				return; 
			case InterparameterDependenciesLanguagePackage.CONDITIONAL_DEPENDENCY:
				sequence_ConditionalDependency(context, (ConditionalDependency) semanticObject); 
				return; 
			case InterparameterDependenciesLanguagePackage.DEPENDENCY:
				sequence_Dependency(context, (Dependency) semanticObject); 
				return; 
			case InterparameterDependenciesLanguagePackage.GENERAL_ATOMIC:
				if (rule == grammarAccess.getAtomicRule()) {
					sequence_Atomic(context, (GeneralAtomic) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPositiveAtomicRule()) {
					sequence_PositiveAtomic(context, (GeneralAtomic) semanticObject); 
					return; 
				}
				else break;
			case InterparameterDependenciesLanguagePackage.GENERAL_CLAUSE:
				if (rule == grammarAccess.getClauseRule()) {
					sequence_Clause(context, (GeneralClause) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPositiveClauseRule()) {
					sequence_PositiveClause(context, (GeneralClause) semanticObject); 
					return; 
				}
				else break;
			case InterparameterDependenciesLanguagePackage.GENERAL_CLAUSE_CONTINUATION:
				if (rule == grammarAccess.getClauseContinuationRule()) {
					sequence_ClauseContinuation(context, (GeneralClauseContinuation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPositiveClauseContinuationRule()) {
					sequence_PositiveClauseContinuation(context, (GeneralClauseContinuation) semanticObject); 
					return; 
				}
				else break;
			case InterparameterDependenciesLanguagePackage.GENERAL_PREDEFINED_DEPENDENCY:
				if (rule == grammarAccess.getPositivePredefinedDependencyRule()) {
					sequence_PositivePredefinedDependency(context, (GeneralPredefinedDependency) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPredefinedDependencyRule()) {
					sequence_PredefinedDependency(context, (GeneralPredefinedDependency) semanticObject); 
					return; 
				}
				else break;
			case InterparameterDependenciesLanguagePackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case InterparameterDependenciesLanguagePackage.OPERATION:
				sequence_Operation(context, (Operation) semanticObject); 
				return; 
			case InterparameterDependenciesLanguagePackage.OPERATION_CONTINUATION:
				sequence_OperationContinuation(context, (OperationContinuation) semanticObject); 
				return; 
			case InterparameterDependenciesLanguagePackage.PARAM:
				if (rule == grammarAccess.getParamRule()) {
					sequence_Param(context, (Param) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getParamAssignmentRule()) {
					sequence_Param_ParamAssignment(context, (Param) semanticObject); 
					return; 
				}
				else break;
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ArithmeticDependency returns ArithmeticDependency
	 *
	 * Constraint:
	 *     (operation=Operation arithOp=ArithmeticOperator result=DOUBLE)
	 */
	protected void sequence_ArithmeticDependency(ISerializationContext context, ArithmeticDependency semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, InterparameterDependenciesLanguagePackage.Literals.ARITHMETIC_DEPENDENCY__OPERATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, InterparameterDependenciesLanguagePackage.Literals.ARITHMETIC_DEPENDENCY__OPERATION));
			if (transientValues.isValueTransient(semanticObject, InterparameterDependenciesLanguagePackage.Literals.ARITHMETIC_DEPENDENCY__ARITH_OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, InterparameterDependenciesLanguagePackage.Literals.ARITHMETIC_DEPENDENCY__ARITH_OP));
			if (transientValues.isValueTransient(semanticObject, InterparameterDependenciesLanguagePackage.Literals.ARITHMETIC_DEPENDENCY__RESULT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, InterparameterDependenciesLanguagePackage.Literals.ARITHMETIC_DEPENDENCY__RESULT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getArithmeticDependencyAccess().getOperationOperationParserRuleCall_0_0(), semanticObject.getOperation());
		feeder.accept(grammarAccess.getArithmeticDependencyAccess().getArithOpArithmeticOperatorParserRuleCall_1_0(), semanticObject.getArithOp());
		feeder.accept(grammarAccess.getArithmeticDependencyAccess().getResultDOUBLETerminalRuleCall_2_0(), semanticObject.getResult());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Atomic returns GeneralAtomic
	 *
	 * Constraint:
	 *     ((not=Not? param=Param) | (not=Not? param=ParamAssignment))
	 */
	protected void sequence_Atomic(ISerializationContext context, GeneralAtomic semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ClauseContinuation returns GeneralClauseContinuation
	 *
	 * Constraint:
	 *     (logicalOp=LogicalOperator (additionalElements=Atomic | additionalElements=Clause))
	 */
	protected void sequence_ClauseContinuation(ISerializationContext context, GeneralClauseContinuation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Clause returns GeneralClause
	 *
	 * Constraint:
	 *     (
	 *         (firstElement=Atomic clauseContinuation=ClauseContinuation) | 
	 *         ((firstElement=PredefinedDependency | firstElement=ArithmeticDependency) clauseContinuation=ClauseContinuation?) | 
	 *         (not=Not? openingParenthesis='(' clause=Clause closingParenthesis=')' clauseContinuation=ClauseContinuation?)
	 *     )
	 */
	protected void sequence_Clause(ISerializationContext context, GeneralClause semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ComparisonDependency returns ComparisonDependency
	 *     Atomic returns ComparisonDependency
	 *     PositiveAtomic returns ComparisonDependency
	 *
	 * Constraint:
	 *     (param1=Param arithOp=ArithmeticOperator param2=Param)
	 */
	protected void sequence_ComparisonDependency(ISerializationContext context, ComparisonDependency semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, InterparameterDependenciesLanguagePackage.Literals.COMPARISON_DEPENDENCY__PARAM1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, InterparameterDependenciesLanguagePackage.Literals.COMPARISON_DEPENDENCY__PARAM1));
			if (transientValues.isValueTransient(semanticObject, InterparameterDependenciesLanguagePackage.Literals.COMPARISON_DEPENDENCY__ARITH_OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, InterparameterDependenciesLanguagePackage.Literals.COMPARISON_DEPENDENCY__ARITH_OP));
			if (transientValues.isValueTransient(semanticObject, InterparameterDependenciesLanguagePackage.Literals.COMPARISON_DEPENDENCY__PARAM2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, InterparameterDependenciesLanguagePackage.Literals.COMPARISON_DEPENDENCY__PARAM2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getComparisonDependencyAccess().getParam1ParamParserRuleCall_0_0(), semanticObject.getParam1());
		feeder.accept(grammarAccess.getComparisonDependencyAccess().getArithOpArithmeticOperatorParserRuleCall_1_0(), semanticObject.getArithOp());
		feeder.accept(grammarAccess.getComparisonDependencyAccess().getParam2ParamParserRuleCall_2_0(), semanticObject.getParam2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConditionalDependency returns ConditionalDependency
	 *
	 * Constraint:
	 *     ((condition=Atomic | condition=Clause) (consequence=Atomic | consequence=Clause))
	 */
	protected void sequence_ConditionalDependency(ISerializationContext context, ConditionalDependency semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Dependency returns Dependency
	 *
	 * Constraint:
	 *     (dep=ComparisonDependency | dep=ArithmeticDependency | dep=ConditionalDependency | dep=PredefinedDependency)
	 */
	protected void sequence_Dependency(ISerializationContext context, Dependency semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     dependencies+=Dependency+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OperationContinuation returns OperationContinuation
	 *
	 * Constraint:
	 *     (mathOp=MathOperator (additionalParams=Param | additionalParams=Operation))
	 */
	protected void sequence_OperationContinuation(ISerializationContext context, OperationContinuation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Operation returns Operation
	 *
	 * Constraint:
	 *     (
	 *         (firstParam=Param operationContinuation=OperationContinuation) | 
	 *         (openingParenthesis='(' operation=Operation closingParenthesis=')' operationContinuation=OperationContinuation?)
	 *     )
	 */
	protected void sequence_Operation(ISerializationContext context, Operation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Param returns Param
	 *
	 * Constraint:
	 *     (name=ID | name=ID_SPECIAL_CHARS)
	 */
	protected void sequence_Param(ISerializationContext context, Param semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ParamAssignment returns Param
	 *
	 * Constraint:
	 *     (
	 *         (name=ID | name=ID_SPECIAL_CHARS) 
	 *         ((stringValues+=STRING stringValues+=STRING*) | patternString=STRING | booleanValue=BOOLEAN | (arithOp=ArithmeticOperator doubleValue=DOUBLE))
	 *     )
	 */
	protected void sequence_Param_ParamAssignment(ISerializationContext context, Param semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PositiveAtomic returns GeneralAtomic
	 *
	 * Constraint:
	 *     (param=Param | param=ParamAssignment)
	 */
	protected void sequence_PositiveAtomic(ISerializationContext context, GeneralAtomic semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PositiveClauseContinuation returns GeneralClauseContinuation
	 *
	 * Constraint:
	 *     (logicalOp=LogicalOperator (additionalElements=PositiveAtomic | additionalElements=PositiveClause))
	 */
	protected void sequence_PositiveClauseContinuation(ISerializationContext context, GeneralClauseContinuation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PositiveClause returns GeneralClause
	 *
	 * Constraint:
	 *     (
	 *         (firstElement=PositiveAtomic clauseContinuation=PositiveClauseContinuation) | 
	 *         ((firstElement=PositivePredefinedDependency | firstElement=ArithmeticDependency) clauseContinuation=PositiveClauseContinuation?) | 
	 *         (openingParenthesis='(' clause=PositiveClause closingParenthesis=')' clauseContinuation=PositiveClauseContinuation?)
	 *     )
	 */
	protected void sequence_PositiveClause(ISerializationContext context, GeneralClause semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PositivePredefinedDependency returns GeneralPredefinedDependency
	 *
	 * Constraint:
	 *     (
	 *         (predefDepType='Or' | predefDepType='OnlyOne' | predefDepType='AllOrNone' | predefDepType='ZeroOrOne') 
	 *         (predefDepElements+=PositiveAtomic | predefDepElements+=PositiveClause) 
	 *         (predefDepElements+=PositiveAtomic | predefDepElements+=PositiveClause)+
	 *     )
	 */
	protected void sequence_PositivePredefinedDependency(ISerializationContext context, GeneralPredefinedDependency semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PredefinedDependency returns GeneralPredefinedDependency
	 *
	 * Constraint:
	 *     (
	 *         not=Not? 
	 *         (predefDepType='Or' | predefDepType='OnlyOne' | predefDepType='AllOrNone' | predefDepType='ZeroOrOne') 
	 *         (predefDepElements+=PositiveAtomic | predefDepElements+=PositiveClause) 
	 *         (predefDepElements+=PositiveAtomic | predefDepElements+=PositiveClause)+
	 *     )
	 */
	protected void sequence_PredefinedDependency(ISerializationContext context, GeneralPredefinedDependency semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
