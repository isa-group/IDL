/*
 * generated by Xtext 2.19.0
 */
package es.us.isa.interparamdep.serializer;

import com.google.inject.Inject;
import es.us.isa.interparamdep.services.InterparameterDependenciesLanguageGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class InterparameterDependenciesLanguageSyntacticSequencer extends AbstractSyntacticSequencer {

	protected InterparameterDependenciesLanguageGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Atomic___NotParserRuleCall_0_0_or_NotParserRuleCall_1_0__q;
	protected AbstractElementAlias match_Clause2_NotParserRuleCall_1_0_q;
	protected AbstractElementAlias match_Clause3_NotParserRuleCall_1_0_q;
	protected AbstractElementAlias match_Clause_NotParserRuleCall_1_0_q;
	protected AbstractElementAlias match_Dependency_NLTerminalRuleCall_2_q;
	protected AbstractElementAlias match_NegativeAtomic_NotParserRuleCall_0_0_or_NotParserRuleCall_1_0;
	protected AbstractElementAlias match_NegativeAtomic___NotParserRuleCall_0_0_or_NotParserRuleCall_1_0__q;
	protected AbstractElementAlias match_PositiveClause2_NotParserRuleCall_1_0_q;
	protected AbstractElementAlias match_PositiveClause3_NotParserRuleCall_1_0_q;
	protected AbstractElementAlias match_PredefinedDependency2_NotParserRuleCall_0_q;
	protected AbstractElementAlias match_PredefinedDependency_NotParserRuleCall_0_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (InterparameterDependenciesLanguageGrammarAccess) access;
		match_Atomic___NotParserRuleCall_0_0_or_NotParserRuleCall_1_0__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getAtomicAccess().getNotParserRuleCall_0_0()), new TokenAlias(false, false, grammarAccess.getAtomicAccess().getNotParserRuleCall_1_0()));
		match_Clause2_NotParserRuleCall_1_0_q = new TokenAlias(false, true, grammarAccess.getClause2Access().getNotParserRuleCall_1_0());
		match_Clause3_NotParserRuleCall_1_0_q = new TokenAlias(false, true, grammarAccess.getClause3Access().getNotParserRuleCall_1_0());
		match_Clause_NotParserRuleCall_1_0_q = new TokenAlias(false, true, grammarAccess.getClauseAccess().getNotParserRuleCall_1_0());
		match_Dependency_NLTerminalRuleCall_2_q = new TokenAlias(false, true, grammarAccess.getDependencyAccess().getNLTerminalRuleCall_2());
		match_NegativeAtomic_NotParserRuleCall_0_0_or_NotParserRuleCall_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getNegativeAtomicAccess().getNotParserRuleCall_0_0()), new TokenAlias(false, false, grammarAccess.getNegativeAtomicAccess().getNotParserRuleCall_1_0()));
		match_NegativeAtomic___NotParserRuleCall_0_0_or_NotParserRuleCall_1_0__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getNegativeAtomicAccess().getNotParserRuleCall_0_0()), new TokenAlias(false, false, grammarAccess.getNegativeAtomicAccess().getNotParserRuleCall_1_0()));
		match_PositiveClause2_NotParserRuleCall_1_0_q = new TokenAlias(false, true, grammarAccess.getPositiveClause2Access().getNotParserRuleCall_1_0());
		match_PositiveClause3_NotParserRuleCall_1_0_q = new TokenAlias(false, true, grammarAccess.getPositiveClause3Access().getNotParserRuleCall_1_0());
		match_PredefinedDependency2_NotParserRuleCall_0_q = new TokenAlias(false, true, grammarAccess.getPredefinedDependency2Access().getNotParserRuleCall_0());
		match_PredefinedDependency_NotParserRuleCall_0_q = new TokenAlias(false, true, grammarAccess.getPredefinedDependencyAccess().getNotParserRuleCall_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getLogicalOperatorRule())
			return getLogicalOperatorToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getNLRule())
			return getNLToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getNotRule())
			return getNotToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * LogicalOperator:
	 * 	'AND' | 'OR'
	 * ;
	 */
	protected String getLogicalOperatorToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "AND";
	}
	
	/**
	 * terminal NL:
	 * 	('\r'? '\n')+
	 * ;
	 */
	protected String getNLToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\n";
	}
	
	/**
	 * Not:
	 * 	'NOT'
	 * ;
	 */
	protected String getNotToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "NOT";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Atomic___NotParserRuleCall_0_0_or_NotParserRuleCall_1_0__q.equals(syntax))
				emit_Atomic___NotParserRuleCall_0_0_or_NotParserRuleCall_1_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Clause2_NotParserRuleCall_1_0_q.equals(syntax))
				emit_Clause2_NotParserRuleCall_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Clause3_NotParserRuleCall_1_0_q.equals(syntax))
				emit_Clause3_NotParserRuleCall_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Clause_NotParserRuleCall_1_0_q.equals(syntax))
				emit_Clause_NotParserRuleCall_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Dependency_NLTerminalRuleCall_2_q.equals(syntax))
				emit_Dependency_NLTerminalRuleCall_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_NegativeAtomic_NotParserRuleCall_0_0_or_NotParserRuleCall_1_0.equals(syntax))
				emit_NegativeAtomic_NotParserRuleCall_0_0_or_NotParserRuleCall_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_NegativeAtomic___NotParserRuleCall_0_0_or_NotParserRuleCall_1_0__q.equals(syntax))
				emit_NegativeAtomic___NotParserRuleCall_0_0_or_NotParserRuleCall_1_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PositiveClause2_NotParserRuleCall_1_0_q.equals(syntax))
				emit_PositiveClause2_NotParserRuleCall_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PositiveClause3_NotParserRuleCall_1_0_q.equals(syntax))
				emit_PositiveClause3_NotParserRuleCall_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PredefinedDependency2_NotParserRuleCall_0_q.equals(syntax))
				emit_PredefinedDependency2_NotParserRuleCall_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PredefinedDependency_NotParserRuleCall_0_q.equals(syntax))
				emit_PredefinedDependency_NotParserRuleCall_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     (Not | Not)?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) name=ID
	 */
	protected void emit_Atomic___NotParserRuleCall_0_0_or_NotParserRuleCall_1_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     Not?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '(' firstElement=NegativeAtomic
	 *     (rule start) (ambiguity) '(' firstElement=PositiveAtomic
	 */
	protected void emit_Clause2_NotParserRuleCall_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     Not?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '(' firstElement=NegativeAtomic
	 *     (rule start) (ambiguity) '(' firstElement=PositiveAtomic
	 *     (rule start) (ambiguity) '(' firstElement=PredefinedDependency2
	 */
	protected void emit_Clause3_NotParserRuleCall_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     Not?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '(' clauses+=Clause
	 */
	protected void emit_Clause_NotParserRuleCall_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     NL?
	 *
	 * This ambiguous syntax occurs at:
	 *     dep=ArithmeticDependency ';' (ambiguity) (rule end)
	 *     dep=ConditionalDependency ';' (ambiguity) (rule end)
	 *     dep=PredefinedDependency2 ';' (ambiguity) (rule end)
	 */
	protected void emit_Dependency_NLTerminalRuleCall_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     Not | Not
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) name=ID
	 */
	protected void emit_NegativeAtomic_NotParserRuleCall_0_0_or_NotParserRuleCall_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (Not | Not)?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) name=ID
	 */
	protected void emit_NegativeAtomic___NotParserRuleCall_0_0_or_NotParserRuleCall_1_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     Not?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '(' (ambiguity) '(' firstElement=PositiveAtomic
	 *     (rule start) (ambiguity) '(' firstElement=PositiveAtomic
	 */
	protected void emit_PositiveClause2_NotParserRuleCall_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     Not?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '(' positiveFirstElement=PositiveAtomic
	 *     (rule start) (ambiguity) '(' positiveFirstElement=PredefinedDependency2
	 */
	protected void emit_PositiveClause3_NotParserRuleCall_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     Not?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) predefDepType='AllOrNone'
	 *     (rule start) (ambiguity) predefDepType='OnlyOne'
	 *     (rule start) (ambiguity) predefDepType='Or'
	 *     (rule start) (ambiguity) predefDepType='ZeroOrOne'
	 */
	protected void emit_PredefinedDependency2_NotParserRuleCall_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     Not?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) predefDepType='AllOrNone'
	 *     (rule start) (ambiguity) predefDepType='OnlyOne'
	 *     (rule start) (ambiguity) predefDepType='Or'
	 *     (rule start) (ambiguity) predefDepType='ZeroOrOne'
	 */
	protected void emit_PredefinedDependency_NotParserRuleCall_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
