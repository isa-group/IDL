/*
 * generated by Xtext 2.19.0
 */
package es.us.isa.interparamdep.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class InterparameterDependenciesLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.us.isa.interparamdep.InterparameterDependenciesLanguage.Model");
		private final Assignment cDependenciesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDependenciesDependencyParserRuleCall_0 = (RuleCall)cDependenciesAssignment.eContents().get(0);
		
		//Model:
		//	dependencies+=Dependency*;
		@Override public ParserRule getRule() { return rule; }
		
		//dependencies+=Dependency*
		public Assignment getDependenciesAssignment() { return cDependenciesAssignment; }
		
		//Dependency
		public RuleCall getDependenciesDependencyParserRuleCall_0() { return cDependenciesDependencyParserRuleCall_0; }
	}
	public class DependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.us.isa.interparamdep.InterparameterDependenciesLanguage.Dependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDepAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cDepAlternatives_0_0 = (Alternatives)cDepAssignment_0.eContents().get(0);
		private final RuleCall cDepComparisonDependencyParserRuleCall_0_0_0 = (RuleCall)cDepAlternatives_0_0.eContents().get(0);
		private final RuleCall cDepArithmeticDependencyParserRuleCall_0_0_1 = (RuleCall)cDepAlternatives_0_0.eContents().get(1);
		private final RuleCall cDepConditionalDependencyParserRuleCall_0_0_2 = (RuleCall)cDepAlternatives_0_0.eContents().get(2);
		private final RuleCall cDepPredefinedDependencyParserRuleCall_0_0_3 = (RuleCall)cDepAlternatives_0_0.eContents().get(3);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cNLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Dependency:
		//	dep=(ComparisonDependency | ArithmeticDependency | ConditionalDependency | PredefinedDependency) ';' NL?;
		@Override public ParserRule getRule() { return rule; }
		
		//dep=(ComparisonDependency | ArithmeticDependency | ConditionalDependency | PredefinedDependency) ';' NL?
		public Group getGroup() { return cGroup; }
		
		//dep=(ComparisonDependency | ArithmeticDependency | ConditionalDependency | PredefinedDependency)
		public Assignment getDepAssignment_0() { return cDepAssignment_0; }
		
		//(ComparisonDependency | ArithmeticDependency | ConditionalDependency | PredefinedDependency)
		public Alternatives getDepAlternatives_0_0() { return cDepAlternatives_0_0; }
		
		//ComparisonDependency
		public RuleCall getDepComparisonDependencyParserRuleCall_0_0_0() { return cDepComparisonDependencyParserRuleCall_0_0_0; }
		
		//ArithmeticDependency
		public RuleCall getDepArithmeticDependencyParserRuleCall_0_0_1() { return cDepArithmeticDependencyParserRuleCall_0_0_1; }
		
		//ConditionalDependency
		public RuleCall getDepConditionalDependencyParserRuleCall_0_0_2() { return cDepConditionalDependencyParserRuleCall_0_0_2; }
		
		//PredefinedDependency
		public RuleCall getDepPredefinedDependencyParserRuleCall_0_0_3() { return cDepPredefinedDependencyParserRuleCall_0_0_3; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
		
		//NL?
		public RuleCall getNLTerminalRuleCall_2() { return cNLTerminalRuleCall_2; }
	}
	public class ArithmeticOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.us.isa.interparamdep.InterparameterDependenciesLanguage.ArithmeticOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cEqualsSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cExclamationMarkEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//ArithmeticOperator:
		//	'<' | '>' | '<=' | '>=' | '==' | '!=';
		@Override public ParserRule getRule() { return rule; }
		
		//'<' | '>' | '<=' | '>=' | '==' | '!='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1() { return cGreaterThanSignKeyword_1; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_2() { return cLessThanSignEqualsSignKeyword_2; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_3() { return cGreaterThanSignEqualsSignKeyword_3; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_4() { return cEqualsSignEqualsSignKeyword_4; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_5() { return cExclamationMarkEqualsSignKeyword_5; }
	}
	public class MathOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.us.isa.interparamdep.InterparameterDependenciesLanguage.MathOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAsteriskKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSolidusKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//MathOperator:
		//	'+' | '-' | '*' | '/';
		@Override public ParserRule getRule() { return rule; }
		
		//'+' | '-' | '*' | '/'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//'*'
		public Keyword getAsteriskKeyword_2() { return cAsteriskKeyword_2; }
		
		//'/'
		public Keyword getSolidusKeyword_3() { return cSolidusKeyword_3; }
	}
	public class NotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.us.isa.interparamdep.InterparameterDependenciesLanguage.Not");
		private final Keyword cNOTKeyword = (Keyword)rule.eContents().get(1);
		
		//Not:
		//	'NOT';
		@Override public ParserRule getRule() { return rule; }
		
		//'NOT'
		public Keyword getNOTKeyword() { return cNOTKeyword; }
	}
	public class LogicalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.us.isa.interparamdep.InterparameterDependenciesLanguage.LogicalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cANDKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cORKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//LogicalOperator:
		//	'AND' | 'OR';
		@Override public ParserRule getRule() { return rule; }
		
		//'AND' | 'OR'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'AND'
		public Keyword getANDKeyword_0() { return cANDKeyword_0; }
		
		//'OR'
		public Keyword getORKeyword_1() { return cORKeyword_1; }
	}
	public class ComparisonDependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.us.isa.interparamdep.InterparameterDependenciesLanguage.ComparisonDependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParam1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParam1IDTerminalRuleCall_0_0 = (RuleCall)cParam1Assignment_0.eContents().get(0);
		private final Assignment cArithOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArithOpArithmeticOperatorParserRuleCall_1_0 = (RuleCall)cArithOpAssignment_1.eContents().get(0);
		private final Assignment cParam2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParam2IDTerminalRuleCall_2_0 = (RuleCall)cParam2Assignment_2.eContents().get(0);
		
		//ComparisonDependency:
		//	param1=ID arithOp=ArithmeticOperator param2=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//param1=ID arithOp=ArithmeticOperator param2=ID
		public Group getGroup() { return cGroup; }
		
		//param1=ID
		public Assignment getParam1Assignment_0() { return cParam1Assignment_0; }
		
		//ID
		public RuleCall getParam1IDTerminalRuleCall_0_0() { return cParam1IDTerminalRuleCall_0_0; }
		
		//arithOp=ArithmeticOperator
		public Assignment getArithOpAssignment_1() { return cArithOpAssignment_1; }
		
		//ArithmeticOperator
		public RuleCall getArithOpArithmeticOperatorParserRuleCall_1_0() { return cArithOpArithmeticOperatorParserRuleCall_1_0; }
		
		//param2=ID
		public Assignment getParam2Assignment_2() { return cParam2Assignment_2; }
		
		//ID
		public RuleCall getParam2IDTerminalRuleCall_2_0() { return cParam2IDTerminalRuleCall_2_0; }
	}
	public class ArithmeticDependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.us.isa.interparamdep.InterparameterDependenciesLanguage.ArithmeticDependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperationOperationParserRuleCall_0_0 = (RuleCall)cOperationAssignment_0.eContents().get(0);
		private final Assignment cArithOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArithOpArithmeticOperatorParserRuleCall_1_0 = (RuleCall)cArithOpAssignment_1.eContents().get(0);
		private final Assignment cResultAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cResultDOUBLETerminalRuleCall_2_0 = (RuleCall)cResultAssignment_2.eContents().get(0);
		
		//ArithmeticDependency:
		//	operation=Operation arithOp=ArithmeticOperator result=DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//operation=Operation arithOp=ArithmeticOperator result=DOUBLE
		public Group getGroup() { return cGroup; }
		
		//operation=Operation
		public Assignment getOperationAssignment_0() { return cOperationAssignment_0; }
		
		//Operation
		public RuleCall getOperationOperationParserRuleCall_0_0() { return cOperationOperationParserRuleCall_0_0; }
		
		//arithOp=ArithmeticOperator
		public Assignment getArithOpAssignment_1() { return cArithOpAssignment_1; }
		
		//ArithmeticOperator
		public RuleCall getArithOpArithmeticOperatorParserRuleCall_1_0() { return cArithOpArithmeticOperatorParserRuleCall_1_0; }
		
		//result=DOUBLE
		public Assignment getResultAssignment_2() { return cResultAssignment_2; }
		
		//DOUBLE
		public RuleCall getResultDOUBLETerminalRuleCall_2_0() { return cResultDOUBLETerminalRuleCall_2_0; }
	}
	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.us.isa.interparamdep.InterparameterDependenciesLanguage.Operation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cFirstParamAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cFirstParamParamParserRuleCall_0_0_0 = (RuleCall)cFirstParamAssignment_0_0.eContents().get(0);
		private final Assignment cOperationContinuationAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOperationContinuationOperationContinuationParserRuleCall_0_1_0 = (RuleCall)cOperationContinuationAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cOpeningParenthesisAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cOpeningParenthesisLeftParenthesisKeyword_1_0_0 = (Keyword)cOpeningParenthesisAssignment_1_0.eContents().get(0);
		private final Assignment cOperationAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperationOperationParserRuleCall_1_1_0 = (RuleCall)cOperationAssignment_1_1.eContents().get(0);
		private final Assignment cClosingParenthesisAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Keyword cClosingParenthesisRightParenthesisKeyword_1_2_0 = (Keyword)cClosingParenthesisAssignment_1_2.eContents().get(0);
		private final Assignment cOperationContinuationAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cOperationContinuationOperationContinuationParserRuleCall_1_3_0 = (RuleCall)cOperationContinuationAssignment_1_3.eContents().get(0);
		
		//Operation:
		//	firstParam=Param operationContinuation=OperationContinuation | openingParenthesis='(' operation=Operation
		//	closingParenthesis=')' operationContinuation=OperationContinuation?;
		@Override public ParserRule getRule() { return rule; }
		
		//firstParam=Param operationContinuation=OperationContinuation | openingParenthesis='(' operation=Operation
		//closingParenthesis=')' operationContinuation=OperationContinuation?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//firstParam=Param operationContinuation=OperationContinuation
		public Group getGroup_0() { return cGroup_0; }
		
		//firstParam=Param
		public Assignment getFirstParamAssignment_0_0() { return cFirstParamAssignment_0_0; }
		
		//Param
		public RuleCall getFirstParamParamParserRuleCall_0_0_0() { return cFirstParamParamParserRuleCall_0_0_0; }
		
		//operationContinuation=OperationContinuation
		public Assignment getOperationContinuationAssignment_0_1() { return cOperationContinuationAssignment_0_1; }
		
		//OperationContinuation
		public RuleCall getOperationContinuationOperationContinuationParserRuleCall_0_1_0() { return cOperationContinuationOperationContinuationParserRuleCall_0_1_0; }
		
		//openingParenthesis='(' operation=Operation closingParenthesis=')' operationContinuation=OperationContinuation?
		public Group getGroup_1() { return cGroup_1; }
		
		//openingParenthesis='('
		public Assignment getOpeningParenthesisAssignment_1_0() { return cOpeningParenthesisAssignment_1_0; }
		
		//'('
		public Keyword getOpeningParenthesisLeftParenthesisKeyword_1_0_0() { return cOpeningParenthesisLeftParenthesisKeyword_1_0_0; }
		
		//operation=Operation
		public Assignment getOperationAssignment_1_1() { return cOperationAssignment_1_1; }
		
		//Operation
		public RuleCall getOperationOperationParserRuleCall_1_1_0() { return cOperationOperationParserRuleCall_1_1_0; }
		
		//closingParenthesis=')'
		public Assignment getClosingParenthesisAssignment_1_2() { return cClosingParenthesisAssignment_1_2; }
		
		//')'
		public Keyword getClosingParenthesisRightParenthesisKeyword_1_2_0() { return cClosingParenthesisRightParenthesisKeyword_1_2_0; }
		
		//operationContinuation=OperationContinuation?
		public Assignment getOperationContinuationAssignment_1_3() { return cOperationContinuationAssignment_1_3; }
		
		//OperationContinuation
		public RuleCall getOperationContinuationOperationContinuationParserRuleCall_1_3_0() { return cOperationContinuationOperationContinuationParserRuleCall_1_3_0; }
	}
	public class OperationContinuationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.us.isa.interparamdep.InterparameterDependenciesLanguage.OperationContinuation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMathOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMathOpMathOperatorParserRuleCall_0_0 = (RuleCall)cMathOpAssignment_0.eContents().get(0);
		private final Assignment cAdditionalParamsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cAdditionalParamsAlternatives_1_0 = (Alternatives)cAdditionalParamsAssignment_1.eContents().get(0);
		private final RuleCall cAdditionalParamsParamParserRuleCall_1_0_0 = (RuleCall)cAdditionalParamsAlternatives_1_0.eContents().get(0);
		private final RuleCall cAdditionalParamsOperationParserRuleCall_1_0_1 = (RuleCall)cAdditionalParamsAlternatives_1_0.eContents().get(1);
		
		//OperationContinuation:
		//	mathOp=MathOperator additionalParams=(Param | Operation);
		@Override public ParserRule getRule() { return rule; }
		
		//mathOp=MathOperator additionalParams=(Param | Operation)
		public Group getGroup() { return cGroup; }
		
		//mathOp=MathOperator
		public Assignment getMathOpAssignment_0() { return cMathOpAssignment_0; }
		
		//MathOperator
		public RuleCall getMathOpMathOperatorParserRuleCall_0_0() { return cMathOpMathOperatorParserRuleCall_0_0; }
		
		//additionalParams=(Param | Operation)
		public Assignment getAdditionalParamsAssignment_1() { return cAdditionalParamsAssignment_1; }
		
		//(Param | Operation)
		public Alternatives getAdditionalParamsAlternatives_1_0() { return cAdditionalParamsAlternatives_1_0; }
		
		//Param
		public RuleCall getAdditionalParamsParamParserRuleCall_1_0_0() { return cAdditionalParamsParamParserRuleCall_1_0_0; }
		
		//Operation
		public RuleCall getAdditionalParamsOperationParserRuleCall_1_0_1() { return cAdditionalParamsOperationParserRuleCall_1_0_1; }
	}
	public class ConditionalDependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.us.isa.interparamdep.InterparameterDependenciesLanguage.ConditionalDependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIFKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cConditionAlternatives_1_0 = (Alternatives)cConditionAssignment_1.eContents().get(0);
		private final RuleCall cConditionAtomicParserRuleCall_1_0_0 = (RuleCall)cConditionAlternatives_1_0.eContents().get(0);
		private final RuleCall cConditionClauseParserRuleCall_1_0_1 = (RuleCall)cConditionAlternatives_1_0.eContents().get(1);
		private final Keyword cTHENKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConsequenceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cConsequenceAlternatives_3_0 = (Alternatives)cConsequenceAssignment_3.eContents().get(0);
		private final RuleCall cConsequenceAtomicParserRuleCall_3_0_0 = (RuleCall)cConsequenceAlternatives_3_0.eContents().get(0);
		private final RuleCall cConsequenceClauseParserRuleCall_3_0_1 = (RuleCall)cConsequenceAlternatives_3_0.eContents().get(1);
		
		//ConditionalDependency:
		//	'IF' condition=(Atomic | Clause) 'THEN' consequence=(Atomic | Clause);
		@Override public ParserRule getRule() { return rule; }
		
		//'IF' condition=(Atomic | Clause) 'THEN' consequence=(Atomic | Clause)
		public Group getGroup() { return cGroup; }
		
		//'IF'
		public Keyword getIFKeyword_0() { return cIFKeyword_0; }
		
		//condition=(Atomic | Clause)
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//(Atomic | Clause)
		public Alternatives getConditionAlternatives_1_0() { return cConditionAlternatives_1_0; }
		
		//Atomic
		public RuleCall getConditionAtomicParserRuleCall_1_0_0() { return cConditionAtomicParserRuleCall_1_0_0; }
		
		//Clause
		public RuleCall getConditionClauseParserRuleCall_1_0_1() { return cConditionClauseParserRuleCall_1_0_1; }
		
		//'THEN'
		public Keyword getTHENKeyword_2() { return cTHENKeyword_2; }
		
		//consequence=(Atomic | Clause)
		public Assignment getConsequenceAssignment_3() { return cConsequenceAssignment_3; }
		
		//(Atomic | Clause)
		public Alternatives getConsequenceAlternatives_3_0() { return cConsequenceAlternatives_3_0; }
		
		//Atomic
		public RuleCall getConsequenceAtomicParserRuleCall_3_0_0() { return cConsequenceAtomicParserRuleCall_3_0_0; }
		
		//Clause
		public RuleCall getConsequenceClauseParserRuleCall_3_0_1() { return cConsequenceClauseParserRuleCall_3_0_1; }
	}
	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.us.isa.interparamdep.InterparameterDependenciesLanguage.Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNotAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNotNotParserRuleCall_0_0_0 = (RuleCall)cNotAssignment_0_0.eContents().get(0);
		private final Assignment cParamAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cParamParamParserRuleCall_0_1_0 = (RuleCall)cParamAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNotAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNotNotParserRuleCall_1_0_0 = (RuleCall)cNotAssignment_1_0.eContents().get(0);
		private final Assignment cParamAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParamParamAssignmentParserRuleCall_1_1_0 = (RuleCall)cParamAssignment_1_1.eContents().get(0);
		private final RuleCall cComparisonDependencyParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Atomic GeneralAtomic:
		//	not=Not? param=Param | not=Not? param=ParamAssignment | ComparisonDependency;
		@Override public ParserRule getRule() { return rule; }
		
		//not=Not? param=Param | not=Not? param=ParamAssignment | ComparisonDependency
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//not=Not? param=Param
		public Group getGroup_0() { return cGroup_0; }
		
		//not=Not?
		public Assignment getNotAssignment_0_0() { return cNotAssignment_0_0; }
		
		//Not
		public RuleCall getNotNotParserRuleCall_0_0_0() { return cNotNotParserRuleCall_0_0_0; }
		
		//param=Param
		public Assignment getParamAssignment_0_1() { return cParamAssignment_0_1; }
		
		//Param
		public RuleCall getParamParamParserRuleCall_0_1_0() { return cParamParamParserRuleCall_0_1_0; }
		
		//not=Not? param=ParamAssignment
		public Group getGroup_1() { return cGroup_1; }
		
		//not=Not?
		public Assignment getNotAssignment_1_0() { return cNotAssignment_1_0; }
		
		//Not
		public RuleCall getNotNotParserRuleCall_1_0_0() { return cNotNotParserRuleCall_1_0_0; }
		
		//param=ParamAssignment
		public Assignment getParamAssignment_1_1() { return cParamAssignment_1_1; }
		
		//ParamAssignment
		public RuleCall getParamParamAssignmentParserRuleCall_1_1_0() { return cParamParamAssignmentParserRuleCall_1_1_0; }
		
		//ComparisonDependency
		public RuleCall getComparisonDependencyParserRuleCall_2() { return cComparisonDependencyParserRuleCall_2; }
	}
	public class ParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.us.isa.interparamdep.InterparameterDependenciesLanguage.Param");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Param:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ParamAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.us.isa.interparamdep.InterparameterDependenciesLanguage.ParamAssignment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cParamParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cStringValuesAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cStringValuesSTRINGTerminalRuleCall_0_2_0 = (RuleCall)cStringValuesAssignment_0_2.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cVerticalLineKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Assignment cStringValuesAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final RuleCall cStringValuesSTRINGTerminalRuleCall_0_3_1_0 = (RuleCall)cStringValuesAssignment_0_3_1.eContents().get(0);
		private final Assignment cAdditionalValuesAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final Keyword cAdditionalValuesVerticalLineAsteriskKeyword_0_4_0 = (Keyword)cAdditionalValuesAssignment_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cParamParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cBooleanValueAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cBooleanValueBOOLEANTerminalRuleCall_1_2_0 = (RuleCall)cBooleanValueAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cParamParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cArithOpAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cArithOpArithmeticOperatorParserRuleCall_2_1_0 = (RuleCall)cArithOpAssignment_2_1.eContents().get(0);
		private final Assignment cDoubleValueAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cDoubleValueDOUBLETerminalRuleCall_2_2_0 = (RuleCall)cDoubleValueAssignment_2_2.eContents().get(0);
		
		//ParamAssignment:
		//	Param '==' stringValues+=STRING ('|' stringValues+=STRING)* additionalValues='|*'? | Param '==' booleanValue=BOOLEAN |
		//	Param arithOp=ArithmeticOperator doubleValue=DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//Param '==' stringValues+=STRING ('|' stringValues+=STRING)* additionalValues='|*'? | Param '==' booleanValue=BOOLEAN |
		//Param arithOp=ArithmeticOperator doubleValue=DOUBLE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Param '==' stringValues+=STRING ('|' stringValues+=STRING)* additionalValues='|*'?
		public Group getGroup_0() { return cGroup_0; }
		
		//Param
		public RuleCall getParamParserRuleCall_0_0() { return cParamParserRuleCall_0_0; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_0_1() { return cEqualsSignEqualsSignKeyword_0_1; }
		
		//stringValues+=STRING
		public Assignment getStringValuesAssignment_0_2() { return cStringValuesAssignment_0_2; }
		
		//STRING
		public RuleCall getStringValuesSTRINGTerminalRuleCall_0_2_0() { return cStringValuesSTRINGTerminalRuleCall_0_2_0; }
		
		//('|' stringValues+=STRING)*
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//'|'
		public Keyword getVerticalLineKeyword_0_3_0() { return cVerticalLineKeyword_0_3_0; }
		
		//stringValues+=STRING
		public Assignment getStringValuesAssignment_0_3_1() { return cStringValuesAssignment_0_3_1; }
		
		//STRING
		public RuleCall getStringValuesSTRINGTerminalRuleCall_0_3_1_0() { return cStringValuesSTRINGTerminalRuleCall_0_3_1_0; }
		
		//additionalValues='|*'?
		public Assignment getAdditionalValuesAssignment_0_4() { return cAdditionalValuesAssignment_0_4; }
		
		//'|*'
		public Keyword getAdditionalValuesVerticalLineAsteriskKeyword_0_4_0() { return cAdditionalValuesVerticalLineAsteriskKeyword_0_4_0; }
		
		//Param '==' booleanValue=BOOLEAN
		public Group getGroup_1() { return cGroup_1; }
		
		//Param
		public RuleCall getParamParserRuleCall_1_0() { return cParamParserRuleCall_1_0; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_1_1() { return cEqualsSignEqualsSignKeyword_1_1; }
		
		//booleanValue=BOOLEAN
		public Assignment getBooleanValueAssignment_1_2() { return cBooleanValueAssignment_1_2; }
		
		//BOOLEAN
		public RuleCall getBooleanValueBOOLEANTerminalRuleCall_1_2_0() { return cBooleanValueBOOLEANTerminalRuleCall_1_2_0; }
		
		//Param arithOp=ArithmeticOperator doubleValue=DOUBLE
		public Group getGroup_2() { return cGroup_2; }
		
		//Param
		public RuleCall getParamParserRuleCall_2_0() { return cParamParserRuleCall_2_0; }
		
		//arithOp=ArithmeticOperator
		public Assignment getArithOpAssignment_2_1() { return cArithOpAssignment_2_1; }
		
		//ArithmeticOperator
		public RuleCall getArithOpArithmeticOperatorParserRuleCall_2_1_0() { return cArithOpArithmeticOperatorParserRuleCall_2_1_0; }
		
		//doubleValue=DOUBLE
		public Assignment getDoubleValueAssignment_2_2() { return cDoubleValueAssignment_2_2; }
		
		//DOUBLE
		public RuleCall getDoubleValueDOUBLETerminalRuleCall_2_2_0() { return cDoubleValueDOUBLETerminalRuleCall_2_2_0; }
	}
	public class ClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.us.isa.interparamdep.InterparameterDependenciesLanguage.Clause");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cFirsElementAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cFirsElementAtomicParserRuleCall_0_0_0 = (RuleCall)cFirsElementAssignment_0_0.eContents().get(0);
		private final Assignment cClauseContinuationAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cClauseContinuationClauseContinuationParserRuleCall_0_1_0 = (RuleCall)cClauseContinuationAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cFirsElementAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Alternatives cFirsElementAlternatives_1_0_0 = (Alternatives)cFirsElementAssignment_1_0.eContents().get(0);
		private final RuleCall cFirsElementPredefinedDependencyParserRuleCall_1_0_0_0 = (RuleCall)cFirsElementAlternatives_1_0_0.eContents().get(0);
		private final RuleCall cFirsElementArithmeticDependencyParserRuleCall_1_0_0_1 = (RuleCall)cFirsElementAlternatives_1_0_0.eContents().get(1);
		private final Assignment cClauseContinuationAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cClauseContinuationClauseContinuationParserRuleCall_1_1_0 = (RuleCall)cClauseContinuationAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cNotAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cNotNotParserRuleCall_2_0_0 = (RuleCall)cNotAssignment_2_0.eContents().get(0);
		private final Assignment cOpeningParenthesisAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cOpeningParenthesisLeftParenthesisKeyword_2_1_0 = (Keyword)cOpeningParenthesisAssignment_2_1.eContents().get(0);
		private final Assignment cClauseAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cClauseClauseParserRuleCall_2_2_0 = (RuleCall)cClauseAssignment_2_2.eContents().get(0);
		private final Assignment cClosingParenthesisAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final Keyword cClosingParenthesisRightParenthesisKeyword_2_3_0 = (Keyword)cClosingParenthesisAssignment_2_3.eContents().get(0);
		private final Assignment cClauseContinuationAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cClauseContinuationClauseContinuationParserRuleCall_2_4_0 = (RuleCall)cClauseContinuationAssignment_2_4.eContents().get(0);
		
		//Clause GeneralClause:
		//	firsElement=Atomic clauseContinuation=ClauseContinuation | firsElement=(PredefinedDependency | ArithmeticDependency)
		//	clauseContinuation=ClauseContinuation? | not=Not? openingParenthesis='(' clause=Clause closingParenthesis=')'
		//	clauseContinuation=ClauseContinuation?;
		@Override public ParserRule getRule() { return rule; }
		
		//firsElement=Atomic clauseContinuation=ClauseContinuation | firsElement=(PredefinedDependency | ArithmeticDependency)
		//clauseContinuation=ClauseContinuation? | not=Not? openingParenthesis='(' clause=Clause closingParenthesis=')'
		//clauseContinuation=ClauseContinuation?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//firsElement=Atomic clauseContinuation=ClauseContinuation
		public Group getGroup_0() { return cGroup_0; }
		
		//firsElement=Atomic
		public Assignment getFirsElementAssignment_0_0() { return cFirsElementAssignment_0_0; }
		
		//Atomic
		public RuleCall getFirsElementAtomicParserRuleCall_0_0_0() { return cFirsElementAtomicParserRuleCall_0_0_0; }
		
		//clauseContinuation=ClauseContinuation
		public Assignment getClauseContinuationAssignment_0_1() { return cClauseContinuationAssignment_0_1; }
		
		//ClauseContinuation
		public RuleCall getClauseContinuationClauseContinuationParserRuleCall_0_1_0() { return cClauseContinuationClauseContinuationParserRuleCall_0_1_0; }
		
		//firsElement=(PredefinedDependency | ArithmeticDependency) clauseContinuation=ClauseContinuation?
		public Group getGroup_1() { return cGroup_1; }
		
		//firsElement=(PredefinedDependency | ArithmeticDependency)
		public Assignment getFirsElementAssignment_1_0() { return cFirsElementAssignment_1_0; }
		
		//(PredefinedDependency | ArithmeticDependency)
		public Alternatives getFirsElementAlternatives_1_0_0() { return cFirsElementAlternatives_1_0_0; }
		
		//PredefinedDependency
		public RuleCall getFirsElementPredefinedDependencyParserRuleCall_1_0_0_0() { return cFirsElementPredefinedDependencyParserRuleCall_1_0_0_0; }
		
		//ArithmeticDependency
		public RuleCall getFirsElementArithmeticDependencyParserRuleCall_1_0_0_1() { return cFirsElementArithmeticDependencyParserRuleCall_1_0_0_1; }
		
		//clauseContinuation=ClauseContinuation?
		public Assignment getClauseContinuationAssignment_1_1() { return cClauseContinuationAssignment_1_1; }
		
		//ClauseContinuation
		public RuleCall getClauseContinuationClauseContinuationParserRuleCall_1_1_0() { return cClauseContinuationClauseContinuationParserRuleCall_1_1_0; }
		
		//not=Not? openingParenthesis='(' clause=Clause closingParenthesis=')' clauseContinuation=ClauseContinuation?
		public Group getGroup_2() { return cGroup_2; }
		
		//not=Not?
		public Assignment getNotAssignment_2_0() { return cNotAssignment_2_0; }
		
		//Not
		public RuleCall getNotNotParserRuleCall_2_0_0() { return cNotNotParserRuleCall_2_0_0; }
		
		//openingParenthesis='('
		public Assignment getOpeningParenthesisAssignment_2_1() { return cOpeningParenthesisAssignment_2_1; }
		
		//'('
		public Keyword getOpeningParenthesisLeftParenthesisKeyword_2_1_0() { return cOpeningParenthesisLeftParenthesisKeyword_2_1_0; }
		
		//clause=Clause
		public Assignment getClauseAssignment_2_2() { return cClauseAssignment_2_2; }
		
		//Clause
		public RuleCall getClauseClauseParserRuleCall_2_2_0() { return cClauseClauseParserRuleCall_2_2_0; }
		
		//closingParenthesis=')'
		public Assignment getClosingParenthesisAssignment_2_3() { return cClosingParenthesisAssignment_2_3; }
		
		//')'
		public Keyword getClosingParenthesisRightParenthesisKeyword_2_3_0() { return cClosingParenthesisRightParenthesisKeyword_2_3_0; }
		
		//clauseContinuation=ClauseContinuation?
		public Assignment getClauseContinuationAssignment_2_4() { return cClauseContinuationAssignment_2_4; }
		
		//ClauseContinuation
		public RuleCall getClauseContinuationClauseContinuationParserRuleCall_2_4_0() { return cClauseContinuationClauseContinuationParserRuleCall_2_4_0; }
	}
	public class ClauseContinuationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.us.isa.interparamdep.InterparameterDependenciesLanguage.ClauseContinuation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLogicalOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLogicalOpLogicalOperatorParserRuleCall_0_0 = (RuleCall)cLogicalOpAssignment_0.eContents().get(0);
		private final Assignment cAdditionalElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cAdditionalElementsAlternatives_1_0 = (Alternatives)cAdditionalElementsAssignment_1.eContents().get(0);
		private final RuleCall cAdditionalElementsAtomicParserRuleCall_1_0_0 = (RuleCall)cAdditionalElementsAlternatives_1_0.eContents().get(0);
		private final RuleCall cAdditionalElementsClauseParserRuleCall_1_0_1 = (RuleCall)cAdditionalElementsAlternatives_1_0.eContents().get(1);
		
		//ClauseContinuation GeneralClauseContinuation:
		//	logicalOp=LogicalOperator additionalElements=(Atomic | Clause);
		@Override public ParserRule getRule() { return rule; }
		
		//logicalOp=LogicalOperator additionalElements=(Atomic | Clause)
		public Group getGroup() { return cGroup; }
		
		//logicalOp=LogicalOperator
		public Assignment getLogicalOpAssignment_0() { return cLogicalOpAssignment_0; }
		
		//LogicalOperator
		public RuleCall getLogicalOpLogicalOperatorParserRuleCall_0_0() { return cLogicalOpLogicalOperatorParserRuleCall_0_0; }
		
		//additionalElements=(Atomic | Clause)
		public Assignment getAdditionalElementsAssignment_1() { return cAdditionalElementsAssignment_1; }
		
		//(Atomic | Clause)
		public Alternatives getAdditionalElementsAlternatives_1_0() { return cAdditionalElementsAlternatives_1_0; }
		
		//Atomic
		public RuleCall getAdditionalElementsAtomicParserRuleCall_1_0_0() { return cAdditionalElementsAtomicParserRuleCall_1_0_0; }
		
		//Clause
		public RuleCall getAdditionalElementsClauseParserRuleCall_1_0_1() { return cAdditionalElementsClauseParserRuleCall_1_0_1; }
	}
	public class PredefinedDependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.us.isa.interparamdep.InterparameterDependenciesLanguage.PredefinedDependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNotAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNotNotParserRuleCall_0_0 = (RuleCall)cNotAssignment_0.eContents().get(0);
		private final Assignment cPredefDepTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cPredefDepTypeAlternatives_1_0 = (Alternatives)cPredefDepTypeAssignment_1.eContents().get(0);
		private final Keyword cPredefDepTypeOrKeyword_1_0_0 = (Keyword)cPredefDepTypeAlternatives_1_0.eContents().get(0);
		private final Keyword cPredefDepTypeOnlyOneKeyword_1_0_1 = (Keyword)cPredefDepTypeAlternatives_1_0.eContents().get(1);
		private final Keyword cPredefDepTypeAllOrNoneKeyword_1_0_2 = (Keyword)cPredefDepTypeAlternatives_1_0.eContents().get(2);
		private final Keyword cPredefDepTypeZeroOrOneKeyword_1_0_3 = (Keyword)cPredefDepTypeAlternatives_1_0.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPredefDepClausesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cPredefDepClausesAlternatives_3_0 = (Alternatives)cPredefDepClausesAssignment_3.eContents().get(0);
		private final RuleCall cPredefDepClausesPositiveAtomicParserRuleCall_3_0_0 = (RuleCall)cPredefDepClausesAlternatives_3_0.eContents().get(0);
		private final RuleCall cPredefDepClausesPositiveClauseParserRuleCall_3_0_1 = (RuleCall)cPredefDepClausesAlternatives_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cPredefDepClausesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final Alternatives cPredefDepClausesAlternatives_4_1_0 = (Alternatives)cPredefDepClausesAssignment_4_1.eContents().get(0);
		private final RuleCall cPredefDepClausesPositiveAtomicParserRuleCall_4_1_0_0 = (RuleCall)cPredefDepClausesAlternatives_4_1_0.eContents().get(0);
		private final RuleCall cPredefDepClausesPositiveClauseParserRuleCall_4_1_0_1 = (RuleCall)cPredefDepClausesAlternatives_4_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PredefinedDependency GeneralPredefinedDependency:
		//	not=Not? predefDepType=('Or' | 'OnlyOne' | 'AllOrNone' | 'ZeroOrOne') '(' predefDepClauses+=(PositiveAtomic |
		//	PositiveClause) (',' predefDepClauses+=(PositiveAtomic | PositiveClause))+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//not=Not? predefDepType=('Or' | 'OnlyOne' | 'AllOrNone' | 'ZeroOrOne') '(' predefDepClauses+=(PositiveAtomic |
		//PositiveClause) (',' predefDepClauses+=(PositiveAtomic | PositiveClause))+ ')'
		public Group getGroup() { return cGroup; }
		
		//not=Not?
		public Assignment getNotAssignment_0() { return cNotAssignment_0; }
		
		//Not
		public RuleCall getNotNotParserRuleCall_0_0() { return cNotNotParserRuleCall_0_0; }
		
		//predefDepType=('Or' | 'OnlyOne' | 'AllOrNone' | 'ZeroOrOne')
		public Assignment getPredefDepTypeAssignment_1() { return cPredefDepTypeAssignment_1; }
		
		//('Or' | 'OnlyOne' | 'AllOrNone' | 'ZeroOrOne')
		public Alternatives getPredefDepTypeAlternatives_1_0() { return cPredefDepTypeAlternatives_1_0; }
		
		//'Or'
		public Keyword getPredefDepTypeOrKeyword_1_0_0() { return cPredefDepTypeOrKeyword_1_0_0; }
		
		//'OnlyOne'
		public Keyword getPredefDepTypeOnlyOneKeyword_1_0_1() { return cPredefDepTypeOnlyOneKeyword_1_0_1; }
		
		//'AllOrNone'
		public Keyword getPredefDepTypeAllOrNoneKeyword_1_0_2() { return cPredefDepTypeAllOrNoneKeyword_1_0_2; }
		
		//'ZeroOrOne'
		public Keyword getPredefDepTypeZeroOrOneKeyword_1_0_3() { return cPredefDepTypeZeroOrOneKeyword_1_0_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//predefDepClauses+=(PositiveAtomic | PositiveClause)
		public Assignment getPredefDepClausesAssignment_3() { return cPredefDepClausesAssignment_3; }
		
		//(PositiveAtomic | PositiveClause)
		public Alternatives getPredefDepClausesAlternatives_3_0() { return cPredefDepClausesAlternatives_3_0; }
		
		//PositiveAtomic
		public RuleCall getPredefDepClausesPositiveAtomicParserRuleCall_3_0_0() { return cPredefDepClausesPositiveAtomicParserRuleCall_3_0_0; }
		
		//PositiveClause
		public RuleCall getPredefDepClausesPositiveClauseParserRuleCall_3_0_1() { return cPredefDepClausesPositiveClauseParserRuleCall_3_0_1; }
		
		//(',' predefDepClauses+=(PositiveAtomic | PositiveClause))+
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//predefDepClauses+=(PositiveAtomic | PositiveClause)
		public Assignment getPredefDepClausesAssignment_4_1() { return cPredefDepClausesAssignment_4_1; }
		
		//(PositiveAtomic | PositiveClause)
		public Alternatives getPredefDepClausesAlternatives_4_1_0() { return cPredefDepClausesAlternatives_4_1_0; }
		
		//PositiveAtomic
		public RuleCall getPredefDepClausesPositiveAtomicParserRuleCall_4_1_0_0() { return cPredefDepClausesPositiveAtomicParserRuleCall_4_1_0_0; }
		
		//PositiveClause
		public RuleCall getPredefDepClausesPositiveClauseParserRuleCall_4_1_0_1() { return cPredefDepClausesPositiveClauseParserRuleCall_4_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class PositiveAtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.us.isa.interparamdep.InterparameterDependenciesLanguage.PositiveAtomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cParamAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cParamParamParserRuleCall_0_0 = (RuleCall)cParamAssignment_0.eContents().get(0);
		private final Assignment cParamAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cParamParamAssignmentParserRuleCall_1_0 = (RuleCall)cParamAssignment_1.eContents().get(0);
		private final RuleCall cComparisonDependencyParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//PositiveAtomic GeneralAtomic:
		//	param=Param | param=ParamAssignment | ComparisonDependency;
		@Override public ParserRule getRule() { return rule; }
		
		//param=Param | param=ParamAssignment | ComparisonDependency
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//param=Param
		public Assignment getParamAssignment_0() { return cParamAssignment_0; }
		
		//Param
		public RuleCall getParamParamParserRuleCall_0_0() { return cParamParamParserRuleCall_0_0; }
		
		//param=ParamAssignment
		public Assignment getParamAssignment_1() { return cParamAssignment_1; }
		
		//ParamAssignment
		public RuleCall getParamParamAssignmentParserRuleCall_1_0() { return cParamParamAssignmentParserRuleCall_1_0; }
		
		//ComparisonDependency
		public RuleCall getComparisonDependencyParserRuleCall_2() { return cComparisonDependencyParserRuleCall_2; }
	}
	public class PositiveClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.us.isa.interparamdep.InterparameterDependenciesLanguage.PositiveClause");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cFirsElementAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cFirsElementPositiveAtomicParserRuleCall_0_0_0 = (RuleCall)cFirsElementAssignment_0_0.eContents().get(0);
		private final Assignment cClauseContinuationAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cClauseContinuationPositiveClauseContinuationParserRuleCall_0_1_0 = (RuleCall)cClauseContinuationAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cFirsElementAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Alternatives cFirsElementAlternatives_1_0_0 = (Alternatives)cFirsElementAssignment_1_0.eContents().get(0);
		private final RuleCall cFirsElementPositivePredefinedDependencyParserRuleCall_1_0_0_0 = (RuleCall)cFirsElementAlternatives_1_0_0.eContents().get(0);
		private final RuleCall cFirsElementArithmeticDependencyParserRuleCall_1_0_0_1 = (RuleCall)cFirsElementAlternatives_1_0_0.eContents().get(1);
		private final Assignment cClauseContinuationAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cClauseContinuationPositiveClauseContinuationParserRuleCall_1_1_0 = (RuleCall)cClauseContinuationAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cOpeningParenthesisAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cOpeningParenthesisLeftParenthesisKeyword_2_0_0 = (Keyword)cOpeningParenthesisAssignment_2_0.eContents().get(0);
		private final Assignment cClauseAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cClausePositiveClauseParserRuleCall_2_1_0 = (RuleCall)cClauseAssignment_2_1.eContents().get(0);
		private final Assignment cClosingParenthesisAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final Keyword cClosingParenthesisRightParenthesisKeyword_2_2_0 = (Keyword)cClosingParenthesisAssignment_2_2.eContents().get(0);
		private final Assignment cClauseContinuationAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cClauseContinuationPositiveClauseContinuationParserRuleCall_2_3_0 = (RuleCall)cClauseContinuationAssignment_2_3.eContents().get(0);
		
		//PositiveClause GeneralClause:
		//	firsElement=PositiveAtomic clauseContinuation=PositiveClauseContinuation | firsElement=(PositivePredefinedDependency |
		//	ArithmeticDependency) clauseContinuation=PositiveClauseContinuation? | openingParenthesis='(' clause=PositiveClause
		//	closingParenthesis=')' clauseContinuation=PositiveClauseContinuation?;
		@Override public ParserRule getRule() { return rule; }
		
		//firsElement=PositiveAtomic clauseContinuation=PositiveClauseContinuation | firsElement=(PositivePredefinedDependency |
		//ArithmeticDependency) clauseContinuation=PositiveClauseContinuation? | openingParenthesis='(' clause=PositiveClause
		//closingParenthesis=')' clauseContinuation=PositiveClauseContinuation?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//firsElement=PositiveAtomic clauseContinuation=PositiveClauseContinuation
		public Group getGroup_0() { return cGroup_0; }
		
		//firsElement=PositiveAtomic
		public Assignment getFirsElementAssignment_0_0() { return cFirsElementAssignment_0_0; }
		
		//PositiveAtomic
		public RuleCall getFirsElementPositiveAtomicParserRuleCall_0_0_0() { return cFirsElementPositiveAtomicParserRuleCall_0_0_0; }
		
		//clauseContinuation=PositiveClauseContinuation
		public Assignment getClauseContinuationAssignment_0_1() { return cClauseContinuationAssignment_0_1; }
		
		//PositiveClauseContinuation
		public RuleCall getClauseContinuationPositiveClauseContinuationParserRuleCall_0_1_0() { return cClauseContinuationPositiveClauseContinuationParserRuleCall_0_1_0; }
		
		//firsElement=(PositivePredefinedDependency | ArithmeticDependency) clauseContinuation=PositiveClauseContinuation?
		public Group getGroup_1() { return cGroup_1; }
		
		//firsElement=(PositivePredefinedDependency | ArithmeticDependency)
		public Assignment getFirsElementAssignment_1_0() { return cFirsElementAssignment_1_0; }
		
		//(PositivePredefinedDependency | ArithmeticDependency)
		public Alternatives getFirsElementAlternatives_1_0_0() { return cFirsElementAlternatives_1_0_0; }
		
		//PositivePredefinedDependency
		public RuleCall getFirsElementPositivePredefinedDependencyParserRuleCall_1_0_0_0() { return cFirsElementPositivePredefinedDependencyParserRuleCall_1_0_0_0; }
		
		//ArithmeticDependency
		public RuleCall getFirsElementArithmeticDependencyParserRuleCall_1_0_0_1() { return cFirsElementArithmeticDependencyParserRuleCall_1_0_0_1; }
		
		//clauseContinuation=PositiveClauseContinuation?
		public Assignment getClauseContinuationAssignment_1_1() { return cClauseContinuationAssignment_1_1; }
		
		//PositiveClauseContinuation
		public RuleCall getClauseContinuationPositiveClauseContinuationParserRuleCall_1_1_0() { return cClauseContinuationPositiveClauseContinuationParserRuleCall_1_1_0; }
		
		//openingParenthesis='(' clause=PositiveClause closingParenthesis=')' clauseContinuation=PositiveClauseContinuation?
		public Group getGroup_2() { return cGroup_2; }
		
		//openingParenthesis='('
		public Assignment getOpeningParenthesisAssignment_2_0() { return cOpeningParenthesisAssignment_2_0; }
		
		//'('
		public Keyword getOpeningParenthesisLeftParenthesisKeyword_2_0_0() { return cOpeningParenthesisLeftParenthesisKeyword_2_0_0; }
		
		//clause=PositiveClause
		public Assignment getClauseAssignment_2_1() { return cClauseAssignment_2_1; }
		
		//PositiveClause
		public RuleCall getClausePositiveClauseParserRuleCall_2_1_0() { return cClausePositiveClauseParserRuleCall_2_1_0; }
		
		//closingParenthesis=')'
		public Assignment getClosingParenthesisAssignment_2_2() { return cClosingParenthesisAssignment_2_2; }
		
		//')'
		public Keyword getClosingParenthesisRightParenthesisKeyword_2_2_0() { return cClosingParenthesisRightParenthesisKeyword_2_2_0; }
		
		//clauseContinuation=PositiveClauseContinuation?
		public Assignment getClauseContinuationAssignment_2_3() { return cClauseContinuationAssignment_2_3; }
		
		//PositiveClauseContinuation
		public RuleCall getClauseContinuationPositiveClauseContinuationParserRuleCall_2_3_0() { return cClauseContinuationPositiveClauseContinuationParserRuleCall_2_3_0; }
	}
	public class PositiveClauseContinuationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.us.isa.interparamdep.InterparameterDependenciesLanguage.PositiveClauseContinuation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLogicalOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLogicalOpLogicalOperatorParserRuleCall_0_0 = (RuleCall)cLogicalOpAssignment_0.eContents().get(0);
		private final Assignment cAdditionalElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cAdditionalElementsAlternatives_1_0 = (Alternatives)cAdditionalElementsAssignment_1.eContents().get(0);
		private final RuleCall cAdditionalElementsPositiveAtomicParserRuleCall_1_0_0 = (RuleCall)cAdditionalElementsAlternatives_1_0.eContents().get(0);
		private final RuleCall cAdditionalElementsPositiveClauseParserRuleCall_1_0_1 = (RuleCall)cAdditionalElementsAlternatives_1_0.eContents().get(1);
		
		//PositiveClauseContinuation GeneralClauseContinuation:
		//	logicalOp=LogicalOperator additionalElements=(PositiveAtomic | PositiveClause);
		@Override public ParserRule getRule() { return rule; }
		
		//logicalOp=LogicalOperator additionalElements=(PositiveAtomic | PositiveClause)
		public Group getGroup() { return cGroup; }
		
		//logicalOp=LogicalOperator
		public Assignment getLogicalOpAssignment_0() { return cLogicalOpAssignment_0; }
		
		//LogicalOperator
		public RuleCall getLogicalOpLogicalOperatorParserRuleCall_0_0() { return cLogicalOpLogicalOperatorParserRuleCall_0_0; }
		
		//additionalElements=(PositiveAtomic | PositiveClause)
		public Assignment getAdditionalElementsAssignment_1() { return cAdditionalElementsAssignment_1; }
		
		//(PositiveAtomic | PositiveClause)
		public Alternatives getAdditionalElementsAlternatives_1_0() { return cAdditionalElementsAlternatives_1_0; }
		
		//PositiveAtomic
		public RuleCall getAdditionalElementsPositiveAtomicParserRuleCall_1_0_0() { return cAdditionalElementsPositiveAtomicParserRuleCall_1_0_0; }
		
		//PositiveClause
		public RuleCall getAdditionalElementsPositiveClauseParserRuleCall_1_0_1() { return cAdditionalElementsPositiveClauseParserRuleCall_1_0_1; }
	}
	public class PositivePredefinedDependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.us.isa.interparamdep.InterparameterDependenciesLanguage.PositivePredefinedDependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPredefDepTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cPredefDepTypeAlternatives_0_0 = (Alternatives)cPredefDepTypeAssignment_0.eContents().get(0);
		private final Keyword cPredefDepTypeOrKeyword_0_0_0 = (Keyword)cPredefDepTypeAlternatives_0_0.eContents().get(0);
		private final Keyword cPredefDepTypeOnlyOneKeyword_0_0_1 = (Keyword)cPredefDepTypeAlternatives_0_0.eContents().get(1);
		private final Keyword cPredefDepTypeAllOrNoneKeyword_0_0_2 = (Keyword)cPredefDepTypeAlternatives_0_0.eContents().get(2);
		private final Keyword cPredefDepTypeZeroOrOneKeyword_0_0_3 = (Keyword)cPredefDepTypeAlternatives_0_0.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPredefDepClausesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cPredefDepClausesAlternatives_2_0 = (Alternatives)cPredefDepClausesAssignment_2.eContents().get(0);
		private final RuleCall cPredefDepClausesPositiveAtomicParserRuleCall_2_0_0 = (RuleCall)cPredefDepClausesAlternatives_2_0.eContents().get(0);
		private final RuleCall cPredefDepClausesPositiveClauseParserRuleCall_2_0_1 = (RuleCall)cPredefDepClausesAlternatives_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPredefDepClausesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Alternatives cPredefDepClausesAlternatives_3_1_0 = (Alternatives)cPredefDepClausesAssignment_3_1.eContents().get(0);
		private final RuleCall cPredefDepClausesPositiveAtomicParserRuleCall_3_1_0_0 = (RuleCall)cPredefDepClausesAlternatives_3_1_0.eContents().get(0);
		private final RuleCall cPredefDepClausesPositiveClauseParserRuleCall_3_1_0_1 = (RuleCall)cPredefDepClausesAlternatives_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PositivePredefinedDependency GeneralPredefinedDependency:
		//	predefDepType=('Or' | 'OnlyOne' | 'AllOrNone' | 'ZeroOrOne') '(' predefDepClauses+=(PositiveAtomic | PositiveClause)
		//	(',' predefDepClauses+=(PositiveAtomic | PositiveClause))+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//predefDepType=('Or' | 'OnlyOne' | 'AllOrNone' | 'ZeroOrOne') '(' predefDepClauses+=(PositiveAtomic | PositiveClause)
		//(',' predefDepClauses+=(PositiveAtomic | PositiveClause))+ ')'
		public Group getGroup() { return cGroup; }
		
		//predefDepType=('Or' | 'OnlyOne' | 'AllOrNone' | 'ZeroOrOne')
		public Assignment getPredefDepTypeAssignment_0() { return cPredefDepTypeAssignment_0; }
		
		//('Or' | 'OnlyOne' | 'AllOrNone' | 'ZeroOrOne')
		public Alternatives getPredefDepTypeAlternatives_0_0() { return cPredefDepTypeAlternatives_0_0; }
		
		//'Or'
		public Keyword getPredefDepTypeOrKeyword_0_0_0() { return cPredefDepTypeOrKeyword_0_0_0; }
		
		//'OnlyOne'
		public Keyword getPredefDepTypeOnlyOneKeyword_0_0_1() { return cPredefDepTypeOnlyOneKeyword_0_0_1; }
		
		//'AllOrNone'
		public Keyword getPredefDepTypeAllOrNoneKeyword_0_0_2() { return cPredefDepTypeAllOrNoneKeyword_0_0_2; }
		
		//'ZeroOrOne'
		public Keyword getPredefDepTypeZeroOrOneKeyword_0_0_3() { return cPredefDepTypeZeroOrOneKeyword_0_0_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//predefDepClauses+=(PositiveAtomic | PositiveClause)
		public Assignment getPredefDepClausesAssignment_2() { return cPredefDepClausesAssignment_2; }
		
		//(PositiveAtomic | PositiveClause)
		public Alternatives getPredefDepClausesAlternatives_2_0() { return cPredefDepClausesAlternatives_2_0; }
		
		//PositiveAtomic
		public RuleCall getPredefDepClausesPositiveAtomicParserRuleCall_2_0_0() { return cPredefDepClausesPositiveAtomicParserRuleCall_2_0_0; }
		
		//PositiveClause
		public RuleCall getPredefDepClausesPositiveClauseParserRuleCall_2_0_1() { return cPredefDepClausesPositiveClauseParserRuleCall_2_0_1; }
		
		//(',' predefDepClauses+=(PositiveAtomic | PositiveClause))+
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//predefDepClauses+=(PositiveAtomic | PositiveClause)
		public Assignment getPredefDepClausesAssignment_3_1() { return cPredefDepClausesAssignment_3_1; }
		
		//(PositiveAtomic | PositiveClause)
		public Alternatives getPredefDepClausesAlternatives_3_1_0() { return cPredefDepClausesAlternatives_3_1_0; }
		
		//PositiveAtomic
		public RuleCall getPredefDepClausesPositiveAtomicParserRuleCall_3_1_0_0() { return cPredefDepClausesPositiveAtomicParserRuleCall_3_1_0_0; }
		
		//PositiveClause
		public RuleCall getPredefDepClausesPositiveClauseParserRuleCall_3_1_0_1() { return cPredefDepClausesPositiveClauseParserRuleCall_3_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	
	
	private final ModelElements pModel;
	private final DependencyElements pDependency;
	private final TerminalRule tNL;
	private final TerminalRule tBOOLEAN;
	private final TerminalRule tDOUBLE;
	private final TerminalRule tID;
	private final ArithmeticOperatorElements pArithmeticOperator;
	private final MathOperatorElements pMathOperator;
	private final NotElements pNot;
	private final LogicalOperatorElements pLogicalOperator;
	private final ComparisonDependencyElements pComparisonDependency;
	private final ArithmeticDependencyElements pArithmeticDependency;
	private final OperationElements pOperation;
	private final OperationContinuationElements pOperationContinuation;
	private final ConditionalDependencyElements pConditionalDependency;
	private final AtomicElements pAtomic;
	private final ParamElements pParam;
	private final ParamAssignmentElements pParamAssignment;
	private final ClauseElements pClause;
	private final ClauseContinuationElements pClauseContinuation;
	private final PredefinedDependencyElements pPredefinedDependency;
	private final PositiveAtomicElements pPositiveAtomic;
	private final PositiveClauseElements pPositiveClause;
	private final PositiveClauseContinuationElements pPositiveClauseContinuation;
	private final PositivePredefinedDependencyElements pPositivePredefinedDependency;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public InterparameterDependenciesLanguageGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pDependency = new DependencyElements();
		this.tNL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "es.us.isa.interparamdep.InterparameterDependenciesLanguage.NL");
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "es.us.isa.interparamdep.InterparameterDependenciesLanguage.BOOLEAN");
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "es.us.isa.interparamdep.InterparameterDependenciesLanguage.DOUBLE");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "es.us.isa.interparamdep.InterparameterDependenciesLanguage.ID");
		this.pArithmeticOperator = new ArithmeticOperatorElements();
		this.pMathOperator = new MathOperatorElements();
		this.pNot = new NotElements();
		this.pLogicalOperator = new LogicalOperatorElements();
		this.pComparisonDependency = new ComparisonDependencyElements();
		this.pArithmeticDependency = new ArithmeticDependencyElements();
		this.pOperation = new OperationElements();
		this.pOperationContinuation = new OperationContinuationElements();
		this.pConditionalDependency = new ConditionalDependencyElements();
		this.pAtomic = new AtomicElements();
		this.pParam = new ParamElements();
		this.pParamAssignment = new ParamAssignmentElements();
		this.pClause = new ClauseElements();
		this.pClauseContinuation = new ClauseContinuationElements();
		this.pPredefinedDependency = new PredefinedDependencyElements();
		this.pPositiveAtomic = new PositiveAtomicElements();
		this.pPositiveClause = new PositiveClauseElements();
		this.pPositiveClauseContinuation = new PositiveClauseContinuationElements();
		this.pPositivePredefinedDependency = new PositivePredefinedDependencyElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("es.us.isa.interparamdep.InterparameterDependenciesLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	dependencies+=Dependency*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Dependency:
	//	dep=(ComparisonDependency | ArithmeticDependency | ConditionalDependency | PredefinedDependency) ';' NL?;
	public DependencyElements getDependencyAccess() {
		return pDependency;
	}
	
	public ParserRule getDependencyRule() {
		return getDependencyAccess().getRule();
	}
	
	//terminal NL:
	//	'\r'? '\n'+;
	public TerminalRule getNLRule() {
		return tNL;
	}
	
	//terminal BOOLEAN:
	//	'true' | 'false';
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	}
	
	//terminal DOUBLE:
	//	INT ('.' INT)?;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//@Override
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_' | '.') ('a'..'z' | 'A'..'Z' | '_' | '.' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//ArithmeticOperator:
	//	'<' | '>' | '<=' | '>=' | '==' | '!=';
	public ArithmeticOperatorElements getArithmeticOperatorAccess() {
		return pArithmeticOperator;
	}
	
	public ParserRule getArithmeticOperatorRule() {
		return getArithmeticOperatorAccess().getRule();
	}
	
	//MathOperator:
	//	'+' | '-' | '*' | '/';
	public MathOperatorElements getMathOperatorAccess() {
		return pMathOperator;
	}
	
	public ParserRule getMathOperatorRule() {
		return getMathOperatorAccess().getRule();
	}
	
	//Not:
	//	'NOT';
	public NotElements getNotAccess() {
		return pNot;
	}
	
	public ParserRule getNotRule() {
		return getNotAccess().getRule();
	}
	
	//LogicalOperator:
	//	'AND' | 'OR';
	public LogicalOperatorElements getLogicalOperatorAccess() {
		return pLogicalOperator;
	}
	
	public ParserRule getLogicalOperatorRule() {
		return getLogicalOperatorAccess().getRule();
	}
	
	//ComparisonDependency:
	//	param1=ID arithOp=ArithmeticOperator param2=ID;
	public ComparisonDependencyElements getComparisonDependencyAccess() {
		return pComparisonDependency;
	}
	
	public ParserRule getComparisonDependencyRule() {
		return getComparisonDependencyAccess().getRule();
	}
	
	//ArithmeticDependency:
	//	operation=Operation arithOp=ArithmeticOperator result=DOUBLE;
	public ArithmeticDependencyElements getArithmeticDependencyAccess() {
		return pArithmeticDependency;
	}
	
	public ParserRule getArithmeticDependencyRule() {
		return getArithmeticDependencyAccess().getRule();
	}
	
	//Operation:
	//	firstParam=Param operationContinuation=OperationContinuation | openingParenthesis='(' operation=Operation
	//	closingParenthesis=')' operationContinuation=OperationContinuation?;
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//OperationContinuation:
	//	mathOp=MathOperator additionalParams=(Param | Operation);
	public OperationContinuationElements getOperationContinuationAccess() {
		return pOperationContinuation;
	}
	
	public ParserRule getOperationContinuationRule() {
		return getOperationContinuationAccess().getRule();
	}
	
	//ConditionalDependency:
	//	'IF' condition=(Atomic | Clause) 'THEN' consequence=(Atomic | Clause);
	public ConditionalDependencyElements getConditionalDependencyAccess() {
		return pConditionalDependency;
	}
	
	public ParserRule getConditionalDependencyRule() {
		return getConditionalDependencyAccess().getRule();
	}
	
	//Atomic GeneralAtomic:
	//	not=Not? param=Param | not=Not? param=ParamAssignment | ComparisonDependency;
	public AtomicElements getAtomicAccess() {
		return pAtomic;
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}
	
	//Param:
	//	name=ID;
	public ParamElements getParamAccess() {
		return pParam;
	}
	
	public ParserRule getParamRule() {
		return getParamAccess().getRule();
	}
	
	//ParamAssignment:
	//	Param '==' stringValues+=STRING ('|' stringValues+=STRING)* additionalValues='|*'? | Param '==' booleanValue=BOOLEAN |
	//	Param arithOp=ArithmeticOperator doubleValue=DOUBLE;
	public ParamAssignmentElements getParamAssignmentAccess() {
		return pParamAssignment;
	}
	
	public ParserRule getParamAssignmentRule() {
		return getParamAssignmentAccess().getRule();
	}
	
	//Clause GeneralClause:
	//	firsElement=Atomic clauseContinuation=ClauseContinuation | firsElement=(PredefinedDependency | ArithmeticDependency)
	//	clauseContinuation=ClauseContinuation? | not=Not? openingParenthesis='(' clause=Clause closingParenthesis=')'
	//	clauseContinuation=ClauseContinuation?;
	public ClauseElements getClauseAccess() {
		return pClause;
	}
	
	public ParserRule getClauseRule() {
		return getClauseAccess().getRule();
	}
	
	//ClauseContinuation GeneralClauseContinuation:
	//	logicalOp=LogicalOperator additionalElements=(Atomic | Clause);
	public ClauseContinuationElements getClauseContinuationAccess() {
		return pClauseContinuation;
	}
	
	public ParserRule getClauseContinuationRule() {
		return getClauseContinuationAccess().getRule();
	}
	
	//PredefinedDependency GeneralPredefinedDependency:
	//	not=Not? predefDepType=('Or' | 'OnlyOne' | 'AllOrNone' | 'ZeroOrOne') '(' predefDepClauses+=(PositiveAtomic |
	//	PositiveClause) (',' predefDepClauses+=(PositiveAtomic | PositiveClause))+ ')';
	public PredefinedDependencyElements getPredefinedDependencyAccess() {
		return pPredefinedDependency;
	}
	
	public ParserRule getPredefinedDependencyRule() {
		return getPredefinedDependencyAccess().getRule();
	}
	
	//PositiveAtomic GeneralAtomic:
	//	param=Param | param=ParamAssignment | ComparisonDependency;
	public PositiveAtomicElements getPositiveAtomicAccess() {
		return pPositiveAtomic;
	}
	
	public ParserRule getPositiveAtomicRule() {
		return getPositiveAtomicAccess().getRule();
	}
	
	//PositiveClause GeneralClause:
	//	firsElement=PositiveAtomic clauseContinuation=PositiveClauseContinuation | firsElement=(PositivePredefinedDependency |
	//	ArithmeticDependency) clauseContinuation=PositiveClauseContinuation? | openingParenthesis='(' clause=PositiveClause
	//	closingParenthesis=')' clauseContinuation=PositiveClauseContinuation?;
	public PositiveClauseElements getPositiveClauseAccess() {
		return pPositiveClause;
	}
	
	public ParserRule getPositiveClauseRule() {
		return getPositiveClauseAccess().getRule();
	}
	
	//PositiveClauseContinuation GeneralClauseContinuation:
	//	logicalOp=LogicalOperator additionalElements=(PositiveAtomic | PositiveClause);
	public PositiveClauseContinuationElements getPositiveClauseContinuationAccess() {
		return pPositiveClauseContinuation;
	}
	
	public ParserRule getPositiveClauseContinuationRule() {
		return getPositiveClauseContinuationAccess().getRule();
	}
	
	//PositivePredefinedDependency GeneralPredefinedDependency:
	//	predefDepType=('Or' | 'OnlyOne' | 'AllOrNone' | 'ZeroOrOne') '(' predefDepClauses+=(PositiveAtomic | PositiveClause)
	//	(',' predefDepClauses+=(PositiveAtomic | PositiveClause))+ ')';
	public PositivePredefinedDependencyElements getPositivePredefinedDependencyAccess() {
		return pPositivePredefinedDependency;
	}
	
	public ParserRule getPositivePredefinedDependencyRule() {
		return getPositivePredefinedDependencyAccess().getRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
