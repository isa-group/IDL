/*
 * generated by Xtext 2.19.0
 */
package es.us.isa.interparamdep.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class InterparameterDependenciesLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.us.isa.interparamdep.InterparameterDependenciesLanguage.Model");
		private final Assignment cDependenciesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDependenciesDependencyParserRuleCall_0 = (RuleCall)cDependenciesAssignment.eContents().get(0);
		
		//Model:
		//	dependencies+=Dependency*;
		@Override public ParserRule getRule() { return rule; }
		
		//dependencies+=Dependency*
		public Assignment getDependenciesAssignment() { return cDependenciesAssignment; }
		
		//Dependency
		public RuleCall getDependenciesDependencyParserRuleCall_0() { return cDependenciesDependencyParserRuleCall_0; }
	}
	public class DependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.us.isa.interparamdep.InterparameterDependenciesLanguage.Dependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDepAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cDepAlternatives_0_0 = (Alternatives)cDepAssignment_0.eContents().get(0);
		private final RuleCall cDepArithmeticDependencyParserRuleCall_0_0_0 = (RuleCall)cDepAlternatives_0_0.eContents().get(0);
		private final RuleCall cDepConditionalDependencyParserRuleCall_0_0_1 = (RuleCall)cDepAlternatives_0_0.eContents().get(1);
		private final RuleCall cDepPredefinedDependencyParserRuleCall_0_0_2 = (RuleCall)cDepAlternatives_0_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cNLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Dependency:
		//	dep=(ArithmeticDependency | ConditionalDependency | PredefinedDependency) ';' NL?;
		@Override public ParserRule getRule() { return rule; }
		
		//dep=(ArithmeticDependency | ConditionalDependency | PredefinedDependency) ';' NL?
		public Group getGroup() { return cGroup; }
		
		//dep=(ArithmeticDependency | ConditionalDependency | PredefinedDependency)
		public Assignment getDepAssignment_0() { return cDepAssignment_0; }
		
		//(ArithmeticDependency | ConditionalDependency | PredefinedDependency)
		public Alternatives getDepAlternatives_0_0() { return cDepAlternatives_0_0; }
		
		//ArithmeticDependency
		public RuleCall getDepArithmeticDependencyParserRuleCall_0_0_0() { return cDepArithmeticDependencyParserRuleCall_0_0_0; }
		
		//ConditionalDependency
		public RuleCall getDepConditionalDependencyParserRuleCall_0_0_1() { return cDepConditionalDependencyParserRuleCall_0_0_1; }
		
		//PredefinedDependency
		public RuleCall getDepPredefinedDependencyParserRuleCall_0_0_2() { return cDepPredefinedDependencyParserRuleCall_0_0_2; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
		
		//NL?
		public RuleCall getNLTerminalRuleCall_2() { return cNLTerminalRuleCall_2; }
	}
	public class ArithmeticDependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.us.isa.interparamdep.InterparameterDependenciesLanguage.ArithmeticDependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParam1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParam1IDTerminalRuleCall_0_0 = (RuleCall)cParam1Assignment_0.eContents().get(0);
		private final Assignment cArithOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArithOpArithmeticOperatorParserRuleCall_1_0 = (RuleCall)cArithOpAssignment_1.eContents().get(0);
		private final Assignment cParam2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParam2IDTerminalRuleCall_2_0 = (RuleCall)cParam2Assignment_2.eContents().get(0);
		
		//ArithmeticDependency:
		//	param1=ID arithOp=ArithmeticOperator param2=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//param1=ID arithOp=ArithmeticOperator param2=ID
		public Group getGroup() { return cGroup; }
		
		//param1=ID
		public Assignment getParam1Assignment_0() { return cParam1Assignment_0; }
		
		//ID
		public RuleCall getParam1IDTerminalRuleCall_0_0() { return cParam1IDTerminalRuleCall_0_0; }
		
		//arithOp=ArithmeticOperator
		public Assignment getArithOpAssignment_1() { return cArithOpAssignment_1; }
		
		//ArithmeticOperator
		public RuleCall getArithOpArithmeticOperatorParserRuleCall_1_0() { return cArithOpArithmeticOperatorParserRuleCall_1_0; }
		
		//param2=ID
		public Assignment getParam2Assignment_2() { return cParam2Assignment_2; }
		
		//ID
		public RuleCall getParam2IDTerminalRuleCall_2_0() { return cParam2IDTerminalRuleCall_2_0; }
	}
	public class ArithmeticOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.us.isa.interparamdep.InterparameterDependenciesLanguage.ArithmeticOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cExclamationMarkEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//ArithmeticOperator:
		//	'<' | '>' | '<=' | '>=' | '=' | '!=';
		@Override public ParserRule getRule() { return rule; }
		
		//'<' | '>' | '<=' | '>=' | '=' | '!='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1() { return cGreaterThanSignKeyword_1; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_2() { return cLessThanSignEqualsSignKeyword_2; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_3() { return cGreaterThanSignEqualsSignKeyword_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_5() { return cExclamationMarkEqualsSignKeyword_5; }
	}
	public class ConditionalDependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.us.isa.interparamdep.InterparameterDependenciesLanguage.ConditionalDependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIFKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionPredicateParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cTHENKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConsequenceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConsequencePredicateParserRuleCall_3_0 = (RuleCall)cConsequenceAssignment_3.eContents().get(0);
		
		//ConditionalDependency:
		//	'IF' condition=Predicate 'THEN' consequence=Predicate;
		@Override public ParserRule getRule() { return rule; }
		
		//'IF' condition=Predicate 'THEN' consequence=Predicate
		public Group getGroup() { return cGroup; }
		
		//'IF'
		public Keyword getIFKeyword_0() { return cIFKeyword_0; }
		
		//condition=Predicate
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//Predicate
		public RuleCall getConditionPredicateParserRuleCall_1_0() { return cConditionPredicateParserRuleCall_1_0; }
		
		//'THEN'
		public Keyword getTHENKeyword_2() { return cTHENKeyword_2; }
		
		//consequence=Predicate
		public Assignment getConsequenceAssignment_3() { return cConsequenceAssignment_3; }
		
		//Predicate
		public RuleCall getConsequencePredicateParserRuleCall_3_0() { return cConsequencePredicateParserRuleCall_3_0; }
	}
	public class PredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.us.isa.interparamdep.InterparameterDependenciesLanguage.Predicate");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAtomicParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClauseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Predicate GeneralPredicate:
		//	Atomic | Clause;
		@Override public ParserRule getRule() { return rule; }
		
		//Atomic | Clause
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Atomic
		public RuleCall getAtomicParserRuleCall_0() { return cAtomicParserRuleCall_0; }
		
		//Clause
		public RuleCall getClauseParserRuleCall_1() { return cClauseParserRuleCall_1; }
	}
	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.us.isa.interparamdep.InterparameterDependenciesLanguage.Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNotAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNotNotParserRuleCall_0_0_0 = (RuleCall)cNotAssignment_0_0.eContents().get(0);
		private final Assignment cParamAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cParamParamParserRuleCall_0_1_0 = (RuleCall)cParamAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNotAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNotNotParserRuleCall_1_0_0 = (RuleCall)cNotAssignment_1_0.eContents().get(0);
		private final Assignment cParamAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParamParamAssignmentParserRuleCall_1_1_0 = (RuleCall)cParamAssignment_1_1.eContents().get(0);
		private final RuleCall cArithmeticDependencyParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Atomic GeneralAtomic:
		//	not=Not? param=Param | not=Not? param=ParamAssignment | ArithmeticDependency;
		@Override public ParserRule getRule() { return rule; }
		
		//not=Not? param=Param | not=Not? param=ParamAssignment | ArithmeticDependency
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//not=Not? param=Param
		public Group getGroup_0() { return cGroup_0; }
		
		//not=Not?
		public Assignment getNotAssignment_0_0() { return cNotAssignment_0_0; }
		
		//Not
		public RuleCall getNotNotParserRuleCall_0_0_0() { return cNotNotParserRuleCall_0_0_0; }
		
		//param=Param
		public Assignment getParamAssignment_0_1() { return cParamAssignment_0_1; }
		
		//Param
		public RuleCall getParamParamParserRuleCall_0_1_0() { return cParamParamParserRuleCall_0_1_0; }
		
		//not=Not? param=ParamAssignment
		public Group getGroup_1() { return cGroup_1; }
		
		//not=Not?
		public Assignment getNotAssignment_1_0() { return cNotAssignment_1_0; }
		
		//Not
		public RuleCall getNotNotParserRuleCall_1_0_0() { return cNotNotParserRuleCall_1_0_0; }
		
		//param=ParamAssignment
		public Assignment getParamAssignment_1_1() { return cParamAssignment_1_1; }
		
		//ParamAssignment
		public RuleCall getParamParamAssignmentParserRuleCall_1_1_0() { return cParamParamAssignmentParserRuleCall_1_1_0; }
		
		//ArithmeticDependency
		public RuleCall getArithmeticDependencyParserRuleCall_2() { return cArithmeticDependencyParserRuleCall_2; }
	}
	public class ParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.us.isa.interparamdep.InterparameterDependenciesLanguage.Param");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Param:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ParamAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.us.isa.interparamdep.InterparameterDependenciesLanguage.ParamAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cParamParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParamValuesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParamValuesSTRINGTerminalRuleCall_2_0 = (RuleCall)cParamValuesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cVerticalLineKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParamValuesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParamValuesSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cParamValuesAssignment_3_1.eContents().get(0);
		
		//ParamAssignment:
		//	Param '=' paramValues+=STRING ('|' paramValues+=STRING)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Param '=' paramValues+=STRING ('|' paramValues+=STRING)*
		public Group getGroup() { return cGroup; }
		
		//Param
		public RuleCall getParamParserRuleCall_0() { return cParamParserRuleCall_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//paramValues+=STRING
		public Assignment getParamValuesAssignment_2() { return cParamValuesAssignment_2; }
		
		//STRING
		public RuleCall getParamValuesSTRINGTerminalRuleCall_2_0() { return cParamValuesSTRINGTerminalRuleCall_2_0; }
		
		//('|' paramValues+=STRING)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'|'
		public Keyword getVerticalLineKeyword_3_0() { return cVerticalLineKeyword_3_0; }
		
		//paramValues+=STRING
		public Assignment getParamValuesAssignment_3_1() { return cParamValuesAssignment_3_1; }
		
		//STRING
		public RuleCall getParamValuesSTRINGTerminalRuleCall_3_1_0() { return cParamValuesSTRINGTerminalRuleCall_3_1_0; }
	}
	public class ClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.us.isa.interparamdep.InterparameterDependenciesLanguage.Clause");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cFirstElementAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cFirstElementAtomicParserRuleCall_0_0_0 = (RuleCall)cFirstElementAssignment_0_0.eContents().get(0);
		private final Assignment cClauseContinuationAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cClauseContinuationClauseContinuationParserRuleCall_0_1_0 = (RuleCall)cClauseContinuationAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNotAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNotNotParserRuleCall_1_0_0 = (RuleCall)cNotAssignment_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cFirstElementAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Alternatives cFirstElementAlternatives_1_2_0 = (Alternatives)cFirstElementAssignment_1_2.eContents().get(0);
		private final RuleCall cFirstElementAtomicParserRuleCall_1_2_0_0 = (RuleCall)cFirstElementAlternatives_1_2_0.eContents().get(0);
		private final RuleCall cFirstElementPredefinedDependencyParserRuleCall_1_2_0_1 = (RuleCall)cFirstElementAlternatives_1_2_0.eContents().get(1);
		private final Assignment cClauseContinuationAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cClauseContinuationClauseContinuationParserRuleCall_1_3_0 = (RuleCall)cClauseContinuationAssignment_1_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cClauseContinuation2Assignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cClauseContinuation2ClauseContinuationParserRuleCall_1_5_0 = (RuleCall)cClauseContinuation2Assignment_1_5.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cFirstElementAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cFirstElementPredefinedDependencyParserRuleCall_2_0_0 = (RuleCall)cFirstElementAssignment_2_0.eContents().get(0);
		private final Assignment cClauseContinuationAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cClauseContinuationClauseContinuationParserRuleCall_2_1_0 = (RuleCall)cClauseContinuationAssignment_2_1.eContents().get(0);
		
		//Clause GeneralClause:
		//	firstElement=Atomic clauseContinuation=ClauseContinuation | not=Not? '(' firstElement=(Atomic | PredefinedDependency)
		//	clauseContinuation=ClauseContinuation ')' clauseContinuation2=ClauseContinuation? | firstElement=PredefinedDependency
		//	clauseContinuation=ClauseContinuation?;
		@Override public ParserRule getRule() { return rule; }
		
		//firstElement=Atomic clauseContinuation=ClauseContinuation | not=Not? '(' firstElement=(Atomic | PredefinedDependency)
		//clauseContinuation=ClauseContinuation ')' clauseContinuation2=ClauseContinuation? | firstElement=PredefinedDependency
		//clauseContinuation=ClauseContinuation?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//firstElement=Atomic clauseContinuation=ClauseContinuation
		public Group getGroup_0() { return cGroup_0; }
		
		//firstElement=Atomic
		public Assignment getFirstElementAssignment_0_0() { return cFirstElementAssignment_0_0; }
		
		//Atomic
		public RuleCall getFirstElementAtomicParserRuleCall_0_0_0() { return cFirstElementAtomicParserRuleCall_0_0_0; }
		
		//clauseContinuation=ClauseContinuation
		public Assignment getClauseContinuationAssignment_0_1() { return cClauseContinuationAssignment_0_1; }
		
		//ClauseContinuation
		public RuleCall getClauseContinuationClauseContinuationParserRuleCall_0_1_0() { return cClauseContinuationClauseContinuationParserRuleCall_0_1_0; }
		
		//not=Not? '(' firstElement=(Atomic | PredefinedDependency) clauseContinuation=ClauseContinuation ')'
		//clauseContinuation2=ClauseContinuation?
		public Group getGroup_1() { return cGroup_1; }
		
		//not=Not?
		public Assignment getNotAssignment_1_0() { return cNotAssignment_1_0; }
		
		//Not
		public RuleCall getNotNotParserRuleCall_1_0_0() { return cNotNotParserRuleCall_1_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//firstElement=(Atomic | PredefinedDependency)
		public Assignment getFirstElementAssignment_1_2() { return cFirstElementAssignment_1_2; }
		
		//(Atomic | PredefinedDependency)
		public Alternatives getFirstElementAlternatives_1_2_0() { return cFirstElementAlternatives_1_2_0; }
		
		//Atomic
		public RuleCall getFirstElementAtomicParserRuleCall_1_2_0_0() { return cFirstElementAtomicParserRuleCall_1_2_0_0; }
		
		//PredefinedDependency
		public RuleCall getFirstElementPredefinedDependencyParserRuleCall_1_2_0_1() { return cFirstElementPredefinedDependencyParserRuleCall_1_2_0_1; }
		
		//clauseContinuation=ClauseContinuation
		public Assignment getClauseContinuationAssignment_1_3() { return cClauseContinuationAssignment_1_3; }
		
		//ClauseContinuation
		public RuleCall getClauseContinuationClauseContinuationParserRuleCall_1_3_0() { return cClauseContinuationClauseContinuationParserRuleCall_1_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }
		
		//clauseContinuation2=ClauseContinuation?
		public Assignment getClauseContinuation2Assignment_1_5() { return cClauseContinuation2Assignment_1_5; }
		
		//ClauseContinuation
		public RuleCall getClauseContinuation2ClauseContinuationParserRuleCall_1_5_0() { return cClauseContinuation2ClauseContinuationParserRuleCall_1_5_0; }
		
		//firstElement=PredefinedDependency clauseContinuation=ClauseContinuation?
		public Group getGroup_2() { return cGroup_2; }
		
		//firstElement=PredefinedDependency
		public Assignment getFirstElementAssignment_2_0() { return cFirstElementAssignment_2_0; }
		
		//PredefinedDependency
		public RuleCall getFirstElementPredefinedDependencyParserRuleCall_2_0_0() { return cFirstElementPredefinedDependencyParserRuleCall_2_0_0; }
		
		//clauseContinuation=ClauseContinuation?
		public Assignment getClauseContinuationAssignment_2_1() { return cClauseContinuationAssignment_2_1; }
		
		//ClauseContinuation
		public RuleCall getClauseContinuationClauseContinuationParserRuleCall_2_1_0() { return cClauseContinuationClauseContinuationParserRuleCall_2_1_0; }
	}
	public class ClauseContinuationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.us.isa.interparamdep.InterparameterDependenciesLanguage.ClauseContinuation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLogicalOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLogicalOpLogicalOperatorParserRuleCall_0_0 = (RuleCall)cLogicalOpAssignment_0.eContents().get(0);
		private final Assignment cAdditionalElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAdditionalElementsPredicateParserRuleCall_1_0 = (RuleCall)cAdditionalElementsAssignment_1.eContents().get(0);
		
		//ClauseContinuation GeneralClauseContinuation:
		//	logicalOp=LogicalOperator additionalElements=Predicate;
		@Override public ParserRule getRule() { return rule; }
		
		//logicalOp=LogicalOperator additionalElements=Predicate
		public Group getGroup() { return cGroup; }
		
		//logicalOp=LogicalOperator
		public Assignment getLogicalOpAssignment_0() { return cLogicalOpAssignment_0; }
		
		//LogicalOperator
		public RuleCall getLogicalOpLogicalOperatorParserRuleCall_0_0() { return cLogicalOpLogicalOperatorParserRuleCall_0_0; }
		
		//additionalElements=Predicate
		public Assignment getAdditionalElementsAssignment_1() { return cAdditionalElementsAssignment_1; }
		
		//Predicate
		public RuleCall getAdditionalElementsPredicateParserRuleCall_1_0() { return cAdditionalElementsPredicateParserRuleCall_1_0; }
	}
	public class PredefinedDependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.us.isa.interparamdep.InterparameterDependenciesLanguage.PredefinedDependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNotAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNotNotParserRuleCall_0_0 = (RuleCall)cNotAssignment_0.eContents().get(0);
		private final Assignment cPredefDepTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cPredefDepTypeAlternatives_1_0 = (Alternatives)cPredefDepTypeAssignment_1.eContents().get(0);
		private final Keyword cPredefDepTypeOrKeyword_1_0_0 = (Keyword)cPredefDepTypeAlternatives_1_0.eContents().get(0);
		private final Keyword cPredefDepTypeOnlyOneKeyword_1_0_1 = (Keyword)cPredefDepTypeAlternatives_1_0.eContents().get(1);
		private final Keyword cPredefDepTypeAllOrNoneKeyword_1_0_2 = (Keyword)cPredefDepTypeAlternatives_1_0.eContents().get(2);
		private final Keyword cPredefDepTypeZeroOrOneKeyword_1_0_3 = (Keyword)cPredefDepTypeAlternatives_1_0.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPredefDepClausesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPredefDepClausesPositivePredicateParserRuleCall_3_0 = (RuleCall)cPredefDepClausesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cPredefDepClausesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cPredefDepClausesPositivePredicateParserRuleCall_4_1_0 = (RuleCall)cPredefDepClausesAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PredefinedDependency GeneralPredefinedDependency:
		//	not=Not? predefDepType=('Or' | 'OnlyOne' | 'AllOrNone' | 'ZeroOrOne') '(' predefDepClauses+=PositivePredicate (','
		//	predefDepClauses+=PositivePredicate)+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//not=Not? predefDepType=('Or' | 'OnlyOne' | 'AllOrNone' | 'ZeroOrOne') '(' predefDepClauses+=PositivePredicate (','
		//predefDepClauses+=PositivePredicate)+ ')'
		public Group getGroup() { return cGroup; }
		
		//not=Not?
		public Assignment getNotAssignment_0() { return cNotAssignment_0; }
		
		//Not
		public RuleCall getNotNotParserRuleCall_0_0() { return cNotNotParserRuleCall_0_0; }
		
		//predefDepType=('Or' | 'OnlyOne' | 'AllOrNone' | 'ZeroOrOne')
		public Assignment getPredefDepTypeAssignment_1() { return cPredefDepTypeAssignment_1; }
		
		//('Or' | 'OnlyOne' | 'AllOrNone' | 'ZeroOrOne')
		public Alternatives getPredefDepTypeAlternatives_1_0() { return cPredefDepTypeAlternatives_1_0; }
		
		//'Or'
		public Keyword getPredefDepTypeOrKeyword_1_0_0() { return cPredefDepTypeOrKeyword_1_0_0; }
		
		//'OnlyOne'
		public Keyword getPredefDepTypeOnlyOneKeyword_1_0_1() { return cPredefDepTypeOnlyOneKeyword_1_0_1; }
		
		//'AllOrNone'
		public Keyword getPredefDepTypeAllOrNoneKeyword_1_0_2() { return cPredefDepTypeAllOrNoneKeyword_1_0_2; }
		
		//'ZeroOrOne'
		public Keyword getPredefDepTypeZeroOrOneKeyword_1_0_3() { return cPredefDepTypeZeroOrOneKeyword_1_0_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//predefDepClauses+=PositivePredicate
		public Assignment getPredefDepClausesAssignment_3() { return cPredefDepClausesAssignment_3; }
		
		//PositivePredicate
		public RuleCall getPredefDepClausesPositivePredicateParserRuleCall_3_0() { return cPredefDepClausesPositivePredicateParserRuleCall_3_0; }
		
		//(',' predefDepClauses+=PositivePredicate)+
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//predefDepClauses+=PositivePredicate
		public Assignment getPredefDepClausesAssignment_4_1() { return cPredefDepClausesAssignment_4_1; }
		
		//PositivePredicate
		public RuleCall getPredefDepClausesPositivePredicateParserRuleCall_4_1_0() { return cPredefDepClausesPositivePredicateParserRuleCall_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class PositivePredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.us.isa.interparamdep.InterparameterDependenciesLanguage.PositivePredicate");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPositiveAtomicParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPositiveClauseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PositivePredicate GeneralPredicate:
		//	PositiveAtomic | PositiveClause;
		@Override public ParserRule getRule() { return rule; }
		
		//PositiveAtomic | PositiveClause
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PositiveAtomic
		public RuleCall getPositiveAtomicParserRuleCall_0() { return cPositiveAtomicParserRuleCall_0; }
		
		//PositiveClause
		public RuleCall getPositiveClauseParserRuleCall_1() { return cPositiveClauseParserRuleCall_1; }
	}
	public class PositiveAtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.us.isa.interparamdep.InterparameterDependenciesLanguage.PositiveAtomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cParamAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cParamParamParserRuleCall_0_0 = (RuleCall)cParamAssignment_0.eContents().get(0);
		private final Assignment cParamAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cParamParamAssignmentParserRuleCall_1_0 = (RuleCall)cParamAssignment_1.eContents().get(0);
		private final RuleCall cArithmeticDependencyParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//PositiveAtomic GeneralAtomic:
		//	param=Param | param=ParamAssignment | ArithmeticDependency;
		@Override public ParserRule getRule() { return rule; }
		
		//param=Param | param=ParamAssignment | ArithmeticDependency
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//param=Param
		public Assignment getParamAssignment_0() { return cParamAssignment_0; }
		
		//Param
		public RuleCall getParamParamParserRuleCall_0_0() { return cParamParamParserRuleCall_0_0; }
		
		//param=ParamAssignment
		public Assignment getParamAssignment_1() { return cParamAssignment_1; }
		
		//ParamAssignment
		public RuleCall getParamParamAssignmentParserRuleCall_1_0() { return cParamParamAssignmentParserRuleCall_1_0; }
		
		//ArithmeticDependency
		public RuleCall getArithmeticDependencyParserRuleCall_2() { return cArithmeticDependencyParserRuleCall_2; }
	}
	public class PositiveClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.us.isa.interparamdep.InterparameterDependenciesLanguage.PositiveClause");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cFirstElementAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cFirstElementPositiveAtomicParserRuleCall_0_0_0 = (RuleCall)cFirstElementAssignment_0_0.eContents().get(0);
		private final Assignment cClauseContinuationAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cClauseContinuationPositiveClauseContinuationParserRuleCall_0_1_0 = (RuleCall)cClauseContinuationAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFirstElementAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cFirstElementAlternatives_1_1_0 = (Alternatives)cFirstElementAssignment_1_1.eContents().get(0);
		private final RuleCall cFirstElementPositiveAtomicParserRuleCall_1_1_0_0 = (RuleCall)cFirstElementAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cFirstElementPositivePredefinedDependencyParserRuleCall_1_1_0_1 = (RuleCall)cFirstElementAlternatives_1_1_0.eContents().get(1);
		private final Assignment cClauseContinuationAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cClauseContinuationPositiveClauseContinuationParserRuleCall_1_2_0 = (RuleCall)cClauseContinuationAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cClauseContinuation2Assignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cClauseContinuation2PositiveClauseContinuationParserRuleCall_1_4_0 = (RuleCall)cClauseContinuation2Assignment_1_4.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cFirstElementAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cFirstElementPositivePredefinedDependencyParserRuleCall_2_0_0 = (RuleCall)cFirstElementAssignment_2_0.eContents().get(0);
		private final Assignment cClauseContinuationAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cClauseContinuationPositiveClauseContinuationParserRuleCall_2_1_0 = (RuleCall)cClauseContinuationAssignment_2_1.eContents().get(0);
		
		//PositiveClause GeneralClause:
		//	firstElement=PositiveAtomic clauseContinuation=PositiveClauseContinuation |
		//	'(' firstElement=(PositiveAtomic | PositivePredefinedDependency) clauseContinuation=PositiveClauseContinuation ')'
		//	clauseContinuation2=PositiveClauseContinuation? | firstElement=PositivePredefinedDependency
		//	clauseContinuation=PositiveClauseContinuation?;
		@Override public ParserRule getRule() { return rule; }
		
		//firstElement=PositiveAtomic clauseContinuation=PositiveClauseContinuation | '(' firstElement=(PositiveAtomic |
		//PositivePredefinedDependency) clauseContinuation=PositiveClauseContinuation ')'
		//clauseContinuation2=PositiveClauseContinuation? | firstElement=PositivePredefinedDependency
		//clauseContinuation=PositiveClauseContinuation?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//firstElement=PositiveAtomic clauseContinuation=PositiveClauseContinuation
		public Group getGroup_0() { return cGroup_0; }
		
		//firstElement=PositiveAtomic
		public Assignment getFirstElementAssignment_0_0() { return cFirstElementAssignment_0_0; }
		
		//PositiveAtomic
		public RuleCall getFirstElementPositiveAtomicParserRuleCall_0_0_0() { return cFirstElementPositiveAtomicParserRuleCall_0_0_0; }
		
		//clauseContinuation=PositiveClauseContinuation
		public Assignment getClauseContinuationAssignment_0_1() { return cClauseContinuationAssignment_0_1; }
		
		//PositiveClauseContinuation
		public RuleCall getClauseContinuationPositiveClauseContinuationParserRuleCall_0_1_0() { return cClauseContinuationPositiveClauseContinuationParserRuleCall_0_1_0; }
		
		//'(' firstElement=(PositiveAtomic | PositivePredefinedDependency) clauseContinuation=PositiveClauseContinuation ')'
		//clauseContinuation2=PositiveClauseContinuation?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//firstElement=(PositiveAtomic | PositivePredefinedDependency)
		public Assignment getFirstElementAssignment_1_1() { return cFirstElementAssignment_1_1; }
		
		//(PositiveAtomic | PositivePredefinedDependency)
		public Alternatives getFirstElementAlternatives_1_1_0() { return cFirstElementAlternatives_1_1_0; }
		
		//PositiveAtomic
		public RuleCall getFirstElementPositiveAtomicParserRuleCall_1_1_0_0() { return cFirstElementPositiveAtomicParserRuleCall_1_1_0_0; }
		
		//PositivePredefinedDependency
		public RuleCall getFirstElementPositivePredefinedDependencyParserRuleCall_1_1_0_1() { return cFirstElementPositivePredefinedDependencyParserRuleCall_1_1_0_1; }
		
		//clauseContinuation=PositiveClauseContinuation
		public Assignment getClauseContinuationAssignment_1_2() { return cClauseContinuationAssignment_1_2; }
		
		//PositiveClauseContinuation
		public RuleCall getClauseContinuationPositiveClauseContinuationParserRuleCall_1_2_0() { return cClauseContinuationPositiveClauseContinuationParserRuleCall_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//clauseContinuation2=PositiveClauseContinuation?
		public Assignment getClauseContinuation2Assignment_1_4() { return cClauseContinuation2Assignment_1_4; }
		
		//PositiveClauseContinuation
		public RuleCall getClauseContinuation2PositiveClauseContinuationParserRuleCall_1_4_0() { return cClauseContinuation2PositiveClauseContinuationParserRuleCall_1_4_0; }
		
		//firstElement=PositivePredefinedDependency clauseContinuation=PositiveClauseContinuation?
		public Group getGroup_2() { return cGroup_2; }
		
		//firstElement=PositivePredefinedDependency
		public Assignment getFirstElementAssignment_2_0() { return cFirstElementAssignment_2_0; }
		
		//PositivePredefinedDependency
		public RuleCall getFirstElementPositivePredefinedDependencyParserRuleCall_2_0_0() { return cFirstElementPositivePredefinedDependencyParserRuleCall_2_0_0; }
		
		//clauseContinuation=PositiveClauseContinuation?
		public Assignment getClauseContinuationAssignment_2_1() { return cClauseContinuationAssignment_2_1; }
		
		//PositiveClauseContinuation
		public RuleCall getClauseContinuationPositiveClauseContinuationParserRuleCall_2_1_0() { return cClauseContinuationPositiveClauseContinuationParserRuleCall_2_1_0; }
	}
	public class PositiveClauseContinuationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.us.isa.interparamdep.InterparameterDependenciesLanguage.PositiveClauseContinuation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLogicalOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLogicalOpLogicalOperatorParserRuleCall_0_0 = (RuleCall)cLogicalOpAssignment_0.eContents().get(0);
		private final Assignment cAdditionalElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAdditionalElementsPositivePredicateParserRuleCall_1_0 = (RuleCall)cAdditionalElementsAssignment_1.eContents().get(0);
		
		//PositiveClauseContinuation GeneralClauseContinuation:
		//	logicalOp=LogicalOperator additionalElements=PositivePredicate;
		@Override public ParserRule getRule() { return rule; }
		
		//logicalOp=LogicalOperator additionalElements=PositivePredicate
		public Group getGroup() { return cGroup; }
		
		//logicalOp=LogicalOperator
		public Assignment getLogicalOpAssignment_0() { return cLogicalOpAssignment_0; }
		
		//LogicalOperator
		public RuleCall getLogicalOpLogicalOperatorParserRuleCall_0_0() { return cLogicalOpLogicalOperatorParserRuleCall_0_0; }
		
		//additionalElements=PositivePredicate
		public Assignment getAdditionalElementsAssignment_1() { return cAdditionalElementsAssignment_1; }
		
		//PositivePredicate
		public RuleCall getAdditionalElementsPositivePredicateParserRuleCall_1_0() { return cAdditionalElementsPositivePredicateParserRuleCall_1_0; }
	}
	public class PositivePredefinedDependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.us.isa.interparamdep.InterparameterDependenciesLanguage.PositivePredefinedDependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPredefDepTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cPredefDepTypeAlternatives_0_0 = (Alternatives)cPredefDepTypeAssignment_0.eContents().get(0);
		private final Keyword cPredefDepTypeOrKeyword_0_0_0 = (Keyword)cPredefDepTypeAlternatives_0_0.eContents().get(0);
		private final Keyword cPredefDepTypeOnlyOneKeyword_0_0_1 = (Keyword)cPredefDepTypeAlternatives_0_0.eContents().get(1);
		private final Keyword cPredefDepTypeAllOrNoneKeyword_0_0_2 = (Keyword)cPredefDepTypeAlternatives_0_0.eContents().get(2);
		private final Keyword cPredefDepTypeZeroOrOneKeyword_0_0_3 = (Keyword)cPredefDepTypeAlternatives_0_0.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPredefDepClausesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPredefDepClausesPositivePredicateParserRuleCall_2_0 = (RuleCall)cPredefDepClausesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPredefDepClausesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPredefDepClausesPositivePredicateParserRuleCall_3_1_0 = (RuleCall)cPredefDepClausesAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PositivePredefinedDependency GeneralPredefinedDependency:
		//	predefDepType=('Or' | 'OnlyOne' | 'AllOrNone' | 'ZeroOrOne') '(' predefDepClauses+=PositivePredicate (','
		//	predefDepClauses+=PositivePredicate)+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//predefDepType=('Or' | 'OnlyOne' | 'AllOrNone' | 'ZeroOrOne') '(' predefDepClauses+=PositivePredicate (','
		//predefDepClauses+=PositivePredicate)+ ')'
		public Group getGroup() { return cGroup; }
		
		//predefDepType=('Or' | 'OnlyOne' | 'AllOrNone' | 'ZeroOrOne')
		public Assignment getPredefDepTypeAssignment_0() { return cPredefDepTypeAssignment_0; }
		
		//('Or' | 'OnlyOne' | 'AllOrNone' | 'ZeroOrOne')
		public Alternatives getPredefDepTypeAlternatives_0_0() { return cPredefDepTypeAlternatives_0_0; }
		
		//'Or'
		public Keyword getPredefDepTypeOrKeyword_0_0_0() { return cPredefDepTypeOrKeyword_0_0_0; }
		
		//'OnlyOne'
		public Keyword getPredefDepTypeOnlyOneKeyword_0_0_1() { return cPredefDepTypeOnlyOneKeyword_0_0_1; }
		
		//'AllOrNone'
		public Keyword getPredefDepTypeAllOrNoneKeyword_0_0_2() { return cPredefDepTypeAllOrNoneKeyword_0_0_2; }
		
		//'ZeroOrOne'
		public Keyword getPredefDepTypeZeroOrOneKeyword_0_0_3() { return cPredefDepTypeZeroOrOneKeyword_0_0_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//predefDepClauses+=PositivePredicate
		public Assignment getPredefDepClausesAssignment_2() { return cPredefDepClausesAssignment_2; }
		
		//PositivePredicate
		public RuleCall getPredefDepClausesPositivePredicateParserRuleCall_2_0() { return cPredefDepClausesPositivePredicateParserRuleCall_2_0; }
		
		//(',' predefDepClauses+=PositivePredicate)+
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//predefDepClauses+=PositivePredicate
		public Assignment getPredefDepClausesAssignment_3_1() { return cPredefDepClausesAssignment_3_1; }
		
		//PositivePredicate
		public RuleCall getPredefDepClausesPositivePredicateParserRuleCall_3_1_0() { return cPredefDepClausesPositivePredicateParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class NotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.us.isa.interparamdep.InterparameterDependenciesLanguage.Not");
		private final Keyword cNOTKeyword = (Keyword)rule.eContents().get(1);
		
		//Not:
		//	'NOT';
		@Override public ParserRule getRule() { return rule; }
		
		//'NOT'
		public Keyword getNOTKeyword() { return cNOTKeyword; }
	}
	public class LogicalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.us.isa.interparamdep.InterparameterDependenciesLanguage.LogicalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cANDKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cORKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//LogicalOperator:
		//	'AND' | 'OR';
		@Override public ParserRule getRule() { return rule; }
		
		//'AND' | 'OR'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'AND'
		public Keyword getANDKeyword_0() { return cANDKeyword_0; }
		
		//'OR'
		public Keyword getORKeyword_1() { return cORKeyword_1; }
	}
	
	
	private final ModelElements pModel;
	private final DependencyElements pDependency;
	private final TerminalRule tNL;
	private final ArithmeticDependencyElements pArithmeticDependency;
	private final ArithmeticOperatorElements pArithmeticOperator;
	private final ConditionalDependencyElements pConditionalDependency;
	private final PredicateElements pPredicate;
	private final AtomicElements pAtomic;
	private final ParamElements pParam;
	private final ParamAssignmentElements pParamAssignment;
	private final ClauseElements pClause;
	private final ClauseContinuationElements pClauseContinuation;
	private final PredefinedDependencyElements pPredefinedDependency;
	private final PositivePredicateElements pPositivePredicate;
	private final PositiveAtomicElements pPositiveAtomic;
	private final PositiveClauseElements pPositiveClause;
	private final PositiveClauseContinuationElements pPositiveClauseContinuation;
	private final PositivePredefinedDependencyElements pPositivePredefinedDependency;
	private final NotElements pNot;
	private final LogicalOperatorElements pLogicalOperator;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public InterparameterDependenciesLanguageGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pDependency = new DependencyElements();
		this.tNL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "es.us.isa.interparamdep.InterparameterDependenciesLanguage.NL");
		this.pArithmeticDependency = new ArithmeticDependencyElements();
		this.pArithmeticOperator = new ArithmeticOperatorElements();
		this.pConditionalDependency = new ConditionalDependencyElements();
		this.pPredicate = new PredicateElements();
		this.pAtomic = new AtomicElements();
		this.pParam = new ParamElements();
		this.pParamAssignment = new ParamAssignmentElements();
		this.pClause = new ClauseElements();
		this.pClauseContinuation = new ClauseContinuationElements();
		this.pPredefinedDependency = new PredefinedDependencyElements();
		this.pPositivePredicate = new PositivePredicateElements();
		this.pPositiveAtomic = new PositiveAtomicElements();
		this.pPositiveClause = new PositiveClauseElements();
		this.pPositiveClauseContinuation = new PositiveClauseContinuationElements();
		this.pPositivePredefinedDependency = new PositivePredefinedDependencyElements();
		this.pNot = new NotElements();
		this.pLogicalOperator = new LogicalOperatorElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("es.us.isa.interparamdep.InterparameterDependenciesLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	dependencies+=Dependency*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Dependency:
	//	dep=(ArithmeticDependency | ConditionalDependency | PredefinedDependency) ';' NL?;
	public DependencyElements getDependencyAccess() {
		return pDependency;
	}
	
	public ParserRule getDependencyRule() {
		return getDependencyAccess().getRule();
	}
	
	//terminal NL:
	//	'\r'? '\n'+;
	public TerminalRule getNLRule() {
		return tNL;
	}
	
	//ArithmeticDependency:
	//	param1=ID arithOp=ArithmeticOperator param2=ID;
	public ArithmeticDependencyElements getArithmeticDependencyAccess() {
		return pArithmeticDependency;
	}
	
	public ParserRule getArithmeticDependencyRule() {
		return getArithmeticDependencyAccess().getRule();
	}
	
	//ArithmeticOperator:
	//	'<' | '>' | '<=' | '>=' | '=' | '!=';
	public ArithmeticOperatorElements getArithmeticOperatorAccess() {
		return pArithmeticOperator;
	}
	
	public ParserRule getArithmeticOperatorRule() {
		return getArithmeticOperatorAccess().getRule();
	}
	
	//ConditionalDependency:
	//	'IF' condition=Predicate 'THEN' consequence=Predicate;
	public ConditionalDependencyElements getConditionalDependencyAccess() {
		return pConditionalDependency;
	}
	
	public ParserRule getConditionalDependencyRule() {
		return getConditionalDependencyAccess().getRule();
	}
	
	//Predicate GeneralPredicate:
	//	Atomic | Clause;
	public PredicateElements getPredicateAccess() {
		return pPredicate;
	}
	
	public ParserRule getPredicateRule() {
		return getPredicateAccess().getRule();
	}
	
	//Atomic GeneralAtomic:
	//	not=Not? param=Param | not=Not? param=ParamAssignment | ArithmeticDependency;
	public AtomicElements getAtomicAccess() {
		return pAtomic;
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}
	
	//Param:
	//	name=ID;
	public ParamElements getParamAccess() {
		return pParam;
	}
	
	public ParserRule getParamRule() {
		return getParamAccess().getRule();
	}
	
	//ParamAssignment:
	//	Param '=' paramValues+=STRING ('|' paramValues+=STRING)*;
	public ParamAssignmentElements getParamAssignmentAccess() {
		return pParamAssignment;
	}
	
	public ParserRule getParamAssignmentRule() {
		return getParamAssignmentAccess().getRule();
	}
	
	//Clause GeneralClause:
	//	firstElement=Atomic clauseContinuation=ClauseContinuation | not=Not? '(' firstElement=(Atomic | PredefinedDependency)
	//	clauseContinuation=ClauseContinuation ')' clauseContinuation2=ClauseContinuation? | firstElement=PredefinedDependency
	//	clauseContinuation=ClauseContinuation?;
	public ClauseElements getClauseAccess() {
		return pClause;
	}
	
	public ParserRule getClauseRule() {
		return getClauseAccess().getRule();
	}
	
	//ClauseContinuation GeneralClauseContinuation:
	//	logicalOp=LogicalOperator additionalElements=Predicate;
	public ClauseContinuationElements getClauseContinuationAccess() {
		return pClauseContinuation;
	}
	
	public ParserRule getClauseContinuationRule() {
		return getClauseContinuationAccess().getRule();
	}
	
	//PredefinedDependency GeneralPredefinedDependency:
	//	not=Not? predefDepType=('Or' | 'OnlyOne' | 'AllOrNone' | 'ZeroOrOne') '(' predefDepClauses+=PositivePredicate (','
	//	predefDepClauses+=PositivePredicate)+ ')';
	public PredefinedDependencyElements getPredefinedDependencyAccess() {
		return pPredefinedDependency;
	}
	
	public ParserRule getPredefinedDependencyRule() {
		return getPredefinedDependencyAccess().getRule();
	}
	
	//PositivePredicate GeneralPredicate:
	//	PositiveAtomic | PositiveClause;
	public PositivePredicateElements getPositivePredicateAccess() {
		return pPositivePredicate;
	}
	
	public ParserRule getPositivePredicateRule() {
		return getPositivePredicateAccess().getRule();
	}
	
	//PositiveAtomic GeneralAtomic:
	//	param=Param | param=ParamAssignment | ArithmeticDependency;
	public PositiveAtomicElements getPositiveAtomicAccess() {
		return pPositiveAtomic;
	}
	
	public ParserRule getPositiveAtomicRule() {
		return getPositiveAtomicAccess().getRule();
	}
	
	//PositiveClause GeneralClause:
	//	firstElement=PositiveAtomic clauseContinuation=PositiveClauseContinuation |
	//	'(' firstElement=(PositiveAtomic | PositivePredefinedDependency) clauseContinuation=PositiveClauseContinuation ')'
	//	clauseContinuation2=PositiveClauseContinuation? | firstElement=PositivePredefinedDependency
	//	clauseContinuation=PositiveClauseContinuation?;
	public PositiveClauseElements getPositiveClauseAccess() {
		return pPositiveClause;
	}
	
	public ParserRule getPositiveClauseRule() {
		return getPositiveClauseAccess().getRule();
	}
	
	//PositiveClauseContinuation GeneralClauseContinuation:
	//	logicalOp=LogicalOperator additionalElements=PositivePredicate;
	public PositiveClauseContinuationElements getPositiveClauseContinuationAccess() {
		return pPositiveClauseContinuation;
	}
	
	public ParserRule getPositiveClauseContinuationRule() {
		return getPositiveClauseContinuationAccess().getRule();
	}
	
	//PositivePredefinedDependency GeneralPredefinedDependency:
	//	predefDepType=('Or' | 'OnlyOne' | 'AllOrNone' | 'ZeroOrOne') '(' predefDepClauses+=PositivePredicate (','
	//	predefDepClauses+=PositivePredicate)+ ')';
	public PositivePredefinedDependencyElements getPositivePredefinedDependencyAccess() {
		return pPositivePredefinedDependency;
	}
	
	public ParserRule getPositivePredefinedDependencyRule() {
		return getPositivePredefinedDependencyAccess().getRule();
	}
	
	//Not:
	//	'NOT';
	public NotElements getNotAccess() {
		return pNot;
	}
	
	public ParserRule getNotRule() {
		return getNotAccess().getRule();
	}
	
	//LogicalOperator:
	//	'AND' | 'OR';
	public LogicalOperatorElements getLogicalOperatorAccess() {
		return pLogicalOperator;
	}
	
	public ParserRule getLogicalOperatorRule() {
		return getLogicalOperatorAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
